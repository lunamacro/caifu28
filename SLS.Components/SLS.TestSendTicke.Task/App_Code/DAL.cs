using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections;

using Shove.Database;

namespace DAL
{
    /*
    Program Name: Shove.DAL.30
    Program Version: 3.0
    Writer By: 3km.shovesoft.shove (zhou changjun)
    Release Time: 2008.9.1

    System Request: Shove.dll
    All Rights saved.
    */

    public class Tables
    {
        public class T_ActiveAllBuyStar : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotterieID;
            public MSSQL.Field UserList;
            public MSSQL.Field Order;

            public T_ActiveAllBuyStar()
            {
                TableName = "T_ActiveAllBuyStar";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                LotterieID = new MSSQL.Field(this, "LotterieID", "LotterieID", SqlDbType.Int, false);
                UserList = new MSSQL.Field(this, "UserList", "UserList", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
            }
        }

        public class T_Advertisements : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Name;
            public MSSQL.Field Title;
            public MSSQL.Field Url;
            public MSSQL.Field DateTime;
            public MSSQL.Field Order;
            public MSSQL.Field isShow;

            public T_Advertisements()
            {
                TableName = "T_Advertisements";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
            }
        }

        public class T_AlipayBuyTemp : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Money;
            public MSSQL.Field HandleResult;
            public MSSQL.Field SchemeID;
            public MSSQL.Field ChaseTaskID;
            public MSSQL.Field IsChase;
            public MSSQL.Field IsCoBuy;
            public MSSQL.Field LotteryID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field StopwhenwinMoney;
            public MSSQL.Field AdditionasXml;
            public MSSQL.Field Title;
            public MSSQL.Field Multiple;
            public MSSQL.Field BuyMoney;
            public MSSQL.Field SumMoney;
            public MSSQL.Field AssureMoney;
            public MSSQL.Field Share;
            public MSSQL.Field BuyShare;
            public MSSQL.Field AssureShare;
            public MSSQL.Field SecrecyLevel;
            public MSSQL.Field Description;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field UpdateloadFileContent;
            public MSSQL.Field OpenUsers;
            public MSSQL.Field Number;
            public MSSQL.Field ShowRq;
            public MSSQL.Field ShowNoRq;
            public MSSQL.Field maxmoney;
            public MSSQL.Field type;
            public MSSQL.Field schemeBonusScale;

            public T_AlipayBuyTemp()
            {
                TableName = "T_AlipayBuyTemp";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                ChaseTaskID = new MSSQL.Field(this, "ChaseTaskID", "ChaseTaskID", SqlDbType.BigInt, false);
                IsChase = new MSSQL.Field(this, "IsChase", "IsChase", SqlDbType.Bit, false);
                IsCoBuy = new MSSQL.Field(this, "IsCoBuy", "IsCoBuy", SqlDbType.Bit, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                StopwhenwinMoney = new MSSQL.Field(this, "StopwhenwinMoney", "StopwhenwinMoney", SqlDbType.Money, false);
                AdditionasXml = new MSSQL.Field(this, "AdditionasXml", "AdditionasXml", SqlDbType.NText, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                BuyMoney = new MSSQL.Field(this, "BuyMoney", "BuyMoney", SqlDbType.Money, false);
                SumMoney = new MSSQL.Field(this, "SumMoney", "SumMoney", SqlDbType.Money, false);
                AssureMoney = new MSSQL.Field(this, "AssureMoney", "AssureMoney", SqlDbType.Money, false);
                Share = new MSSQL.Field(this, "Share", "Share", SqlDbType.Int, false);
                BuyShare = new MSSQL.Field(this, "BuyShare", "BuyShare", SqlDbType.Int, false);
                AssureShare = new MSSQL.Field(this, "AssureShare", "AssureShare", SqlDbType.Int, false);
                SecrecyLevel = new MSSQL.Field(this, "SecrecyLevel", "SecrecyLevel", SqlDbType.SmallInt, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                UpdateloadFileContent = new MSSQL.Field(this, "UpdateloadFileContent", "UpdateloadFileContent", SqlDbType.VarChar, false);
                OpenUsers = new MSSQL.Field(this, "OpenUsers", "OpenUsers", SqlDbType.VarChar, false);
                Number = new MSSQL.Field(this, "Number", "Number", SqlDbType.Int, false);
                ShowRq = new MSSQL.Field(this, "ShowRq", "ShowRq", SqlDbType.Bit, false);
                ShowNoRq = new MSSQL.Field(this, "ShowNoRq", "ShowNoRq", SqlDbType.Bit, false);
                maxmoney = new MSSQL.Field(this, "maxmoney", "maxmoney", SqlDbType.Money, false);
                type = new MSSQL.Field(this, "type", "type", SqlDbType.Int, false);
                schemeBonusScale = new MSSQL.Field(this, "schemeBonusScale", "schemeBonusScale", SqlDbType.Int, false);
            }
        }

        public class T_BankDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ProvinceName;
            public MSSQL.Field CityName;
            public MSSQL.Field BankTypeName;
            public MSSQL.Field BankName;
            public MSSQL.Field provinceId;
            public MSSQL.Field cityId;
            public MSSQL.Field bankTypeId;

            public T_BankDetails()
            {
                TableName = "T_BankDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                ProvinceName = new MSSQL.Field(this, "ProvinceName", "ProvinceName", SqlDbType.VarChar, false);
                CityName = new MSSQL.Field(this, "CityName", "CityName", SqlDbType.VarChar, false);
                BankTypeName = new MSSQL.Field(this, "BankTypeName", "BankTypeName", SqlDbType.VarChar, false);
                BankName = new MSSQL.Field(this, "BankName", "BankName", SqlDbType.VarChar, false);
                provinceId = new MSSQL.Field(this, "provinceId", "provinceId", SqlDbType.Int, false);
                cityId = new MSSQL.Field(this, "cityId", "cityId", SqlDbType.Int, false);
                bankTypeId = new MSSQL.Field(this, "bankTypeId", "bankTypeId", SqlDbType.Int, false);
            }
        }

        public class T_Banks : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Order;

            public T_Banks()
            {
                TableName = "T_Banks";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.SmallInt, false);
            }
        }

        public class T_BetCommission : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Status_ON;
            public MSSQL.Field Commission;

            public T_BetCommission()
            {
                TableName = "T_BetCommission";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.NVarChar, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Status_ON = new MSSQL.Field(this, "Status_ON", "Status_ON", SqlDbType.Bit, false);
                Commission = new MSSQL.Field(this, "Commission", "Commission", SqlDbType.Float, false);
            }
        }

        public class T_BuyDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeID;
            public MSSQL.Field Share;
            public MSSQL.Field QuashStatus;
            public MSSQL.Field isWhenInitiate;
            public MSSQL.Field WinMoneyNoWithTax;
            public MSSQL.Field isAutoFollowScheme;
            public MSSQL.Field DetailMoney;
            public MSSQL.Field FromClient;

            public T_BuyDetails()
            {
                TableName = "T_BuyDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                Share = new MSSQL.Field(this, "Share", "Share", SqlDbType.Int, false);
                QuashStatus = new MSSQL.Field(this, "QuashStatus", "QuashStatus", SqlDbType.SmallInt, false);
                isWhenInitiate = new MSSQL.Field(this, "isWhenInitiate", "isWhenInitiate", SqlDbType.Bit, false);
                WinMoneyNoWithTax = new MSSQL.Field(this, "WinMoneyNoWithTax", "WinMoneyNoWithTax", SqlDbType.Money, false);
                isAutoFollowScheme = new MSSQL.Field(this, "isAutoFollowScheme", "isAutoFollowScheme", SqlDbType.Bit, false);
                DetailMoney = new MSSQL.Field(this, "DetailMoney", "DetailMoney", SqlDbType.Money, false);
                FromClient = new MSSQL.Field(this, "FromClient", "FromClient", SqlDbType.Int, false);
            }
        }

        public class T_BuyDetailsRedundancy : MSSQL.TableBase
        {
            public MSSQL.Field BuyDetailsID;

            public T_BuyDetailsRedundancy()
            {
                TableName = "T_BuyDetailsRedundancy";

                BuyDetailsID = new MSSQL.Field(this, "BuyDetailsID", "BuyDetailsID", SqlDbType.BigInt, false);
            }
        }

        public class T_BuyWays : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field SchemeNumber;
            public MSSQL.Field Name;
            public MSSQL.Field Count1;
            public MSSQL.Field Count2;
            public MSSQL.Field GameNumber;
            public MSSQL.Field GameNumber2;
            public MSSQL.Field BuyWays;
            public MSSQL.Field Rate;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field UserID;
            public MSSQL.Field Type;

            public T_BuyWays()
            {
                TableName = "T_BuyWays";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                SchemeNumber = new MSSQL.Field(this, "SchemeNumber", "SchemeNumber", SqlDbType.VarChar, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Count1 = new MSSQL.Field(this, "Count1", "Count1", SqlDbType.Int, false);
                Count2 = new MSSQL.Field(this, "Count2", "Count2", SqlDbType.Int, false);
                GameNumber = new MSSQL.Field(this, "GameNumber", "GameNumber", SqlDbType.Int, false);
                GameNumber2 = new MSSQL.Field(this, "GameNumber2", "GameNumber2", SqlDbType.Int, false);
                BuyWays = new MSSQL.Field(this, "BuyWays", "BuyWays", SqlDbType.VarChar, false);
                Rate = new MSSQL.Field(this, "Rate", "Rate", SqlDbType.Float, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.Int, false);
            }
        }

        public class T_CardPasswordAgentDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field AgentID;
            public MSSQL.Field DateTime;
            public MSSQL.Field OperatorType;
            public MSSQL.Field Amount;
            public MSSQL.Field Memo;

            public T_CardPasswordAgentDetails()
            {
                TableName = "T_CardPasswordAgentDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                AgentID = new MSSQL.Field(this, "AgentID", "AgentID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                OperatorType = new MSSQL.Field(this, "OperatorType", "OperatorType", SqlDbType.SmallInt, false);
                Amount = new MSSQL.Field(this, "Amount", "Amount", SqlDbType.Money, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
            }
        }

        public class T_CardPasswordAgents : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Key;
            public MSSQL.Field Password;
            public MSSQL.Field Company;
            public MSSQL.Field Url;
            public MSSQL.Field State;
            public MSSQL.Field IPAddressLimit;
            public MSSQL.Field Balance;

            public T_CardPasswordAgents()
            {
                TableName = "T_CardPasswordAgents";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Key = new MSSQL.Field(this, "Key", "Key", SqlDbType.VarChar, false);
                Password = new MSSQL.Field(this, "Password", "Password", SqlDbType.VarChar, false);
                Company = new MSSQL.Field(this, "Company", "Company", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.SmallInt, false);
                IPAddressLimit = new MSSQL.Field(this, "IPAddressLimit", "IPAddressLimit", SqlDbType.VarChar, false);
                Balance = new MSSQL.Field(this, "Balance", "Balance", SqlDbType.Money, false);
            }
        }

        public class T_CardPasswords : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field AgentID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Period;
            public MSSQL.Field Money;
            public MSSQL.Field State;
            public MSSQL.Field UserID;
            public MSSQL.Field UseDateTime;

            public T_CardPasswords()
            {
                TableName = "T_CardPasswords";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                AgentID = new MSSQL.Field(this, "AgentID", "AgentID", SqlDbType.Int, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Period = new MSSQL.Field(this, "Period", "Period", SqlDbType.DateTime, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.NChar, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.SmallInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                UseDateTime = new MSSQL.Field(this, "UseDateTime", "UseDateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_CardPasswordsValid : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field UserID;
            public MSSQL.Field Mobile;
            public MSSQL.Field CardPasswordsNum;

            public T_CardPasswordsValid()
            {
                TableName = "T_CardPasswordsValid";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                CardPasswordsNum = new MSSQL.Field(this, "CardPasswordsNum", "CardPasswordsNum", SqlDbType.VarChar, false);
            }
        }

        public class T_CardPasswordTryErrors : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Number;

            public T_CardPasswordTryErrors()
            {
                TableName = "T_CardPasswordTryErrors";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Number = new MSSQL.Field(this, "Number", "Number", SqlDbType.VarChar, false);
            }
        }

        public class T_ChallengeBetRed : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserId;
            public MSSQL.Field BetCount;
            public MSSQL.Field WinCount;
            public MSSQL.Field Score;
            public MSSQL.Field TotalWinMoney;

            public T_ChallengeBetRed()
            {
                TableName = "T_ChallengeBetRed";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserId = new MSSQL.Field(this, "UserId", "UserId", SqlDbType.BigInt, false);
                BetCount = new MSSQL.Field(this, "BetCount", "BetCount", SqlDbType.Int, false);
                WinCount = new MSSQL.Field(this, "WinCount", "WinCount", SqlDbType.Int, false);
                Score = new MSSQL.Field(this, "Score", "Score", SqlDbType.Money, false);
                TotalWinMoney = new MSSQL.Field(this, "TotalWinMoney", "TotalWinMoney", SqlDbType.Money, false);
            }
        }

        public class T_ChallengeHotBet : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field MatchID;
            public MSSQL.Field WinningCount;
            public MSSQL.Field DrawCount;
            public MSSQL.Field LostCount;

            public T_ChallengeHotBet()
            {
                TableName = "T_ChallengeHotBet";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                MatchID = new MSSQL.Field(this, "MatchID", "MatchID", SqlDbType.BigInt, false);
                WinningCount = new MSSQL.Field(this, "WinningCount", "WinningCount", SqlDbType.Int, false);
                DrawCount = new MSSQL.Field(this, "DrawCount", "DrawCount", SqlDbType.Int, false);
                LostCount = new MSSQL.Field(this, "LostCount", "LostCount", SqlDbType.Int, false);
            }
        }

        public class T_ChallengeSaveScheme : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field InitiateUserId;
            public MSSQL.Field IsuseID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Money;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field SchemeNumber;
            public MSSQL.Field IsOpened;
            public MSSQL.Field PrintOutDateTime;
            public MSSQL.Field OpenOperateId;
            public MSSQL.Field WinMoney;
            public MSSQL.Field WinDescription;
            public MSSQL.Field Odds;

            public T_ChallengeSaveScheme()
            {
                TableName = "T_ChallengeSaveScheme";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                InitiateUserId = new MSSQL.Field(this, "InitiateUserId", "InitiateUserId", SqlDbType.BigInt, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                SchemeNumber = new MSSQL.Field(this, "SchemeNumber", "SchemeNumber", SqlDbType.VarChar, false);
                IsOpened = new MSSQL.Field(this, "IsOpened", "IsOpened", SqlDbType.Bit, false);
                PrintOutDateTime = new MSSQL.Field(this, "PrintOutDateTime", "PrintOutDateTime", SqlDbType.DateTime, false);
                OpenOperateId = new MSSQL.Field(this, "OpenOperateId", "OpenOperateId", SqlDbType.BigInt, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                WinDescription = new MSSQL.Field(this, "WinDescription", "WinDescription", SqlDbType.VarChar, false);
                Odds = new MSSQL.Field(this, "Odds", "Odds", SqlDbType.VarChar, false);
            }
        }

        public class T_ChallengeScheme : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field InitiateUserId;
            public MSSQL.Field IsuseID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Money;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field SchemeNumber;
            public MSSQL.Field IsOpened;
            public MSSQL.Field PrintOutDateTime;
            public MSSQL.Field OpenOperateId;
            public MSSQL.Field WinMoney;
            public MSSQL.Field WinDescription;
            public MSSQL.Field Odds;

            public T_ChallengeScheme()
            {
                TableName = "T_ChallengeScheme";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                InitiateUserId = new MSSQL.Field(this, "InitiateUserId", "InitiateUserId", SqlDbType.BigInt, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                SchemeNumber = new MSSQL.Field(this, "SchemeNumber", "SchemeNumber", SqlDbType.VarChar, false);
                IsOpened = new MSSQL.Field(this, "IsOpened", "IsOpened", SqlDbType.Bit, false);
                PrintOutDateTime = new MSSQL.Field(this, "PrintOutDateTime", "PrintOutDateTime", SqlDbType.DateTime, false);
                OpenOperateId = new MSSQL.Field(this, "OpenOperateId", "OpenOperateId", SqlDbType.BigInt, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                WinDescription = new MSSQL.Field(this, "WinDescription", "WinDescription", SqlDbType.VarChar, false);
                Odds = new MSSQL.Field(this, "Odds", "Odds", SqlDbType.VarChar, false);
            }
        }

        public class T_ChaseLotteryNumber : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ChaseID;
            public MSSQL.Field LotteryNumber;

            public T_ChaseLotteryNumber()
            {
                TableName = "T_ChaseLotteryNumber";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                ChaseID = new MSSQL.Field(this, "ChaseID", "ChaseID", SqlDbType.BigInt, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
            }
        }

        public class T_Chases : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Type;
            public MSSQL.Field StartTime;
            public MSSQL.Field EndTime;
            public MSSQL.Field DateTime;
            public MSSQL.Field IsuseCount;
            public MSSQL.Field Multiple;
            public MSSQL.Field Nums;
            public MSSQL.Field BetType;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field StopTypeWhenWin;
            public MSSQL.Field StopTypeWhenWinMoney;
            public MSSQL.Field QuashStatus;
            public MSSQL.Field Money;
            public MSSQL.Field Title;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Price;

            public T_Chases()
            {
                TableName = "T_Chases";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.SmallInt, false);
                StartTime = new MSSQL.Field(this, "StartTime", "StartTime", SqlDbType.DateTime, false);
                EndTime = new MSSQL.Field(this, "EndTime", "EndTime", SqlDbType.DateTime, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                IsuseCount = new MSSQL.Field(this, "IsuseCount", "IsuseCount", SqlDbType.Int, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Nums = new MSSQL.Field(this, "Nums", "Nums", SqlDbType.Int, false);
                BetType = new MSSQL.Field(this, "BetType", "BetType", SqlDbType.SmallInt, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                StopTypeWhenWin = new MSSQL.Field(this, "StopTypeWhenWin", "StopTypeWhenWin", SqlDbType.SmallInt, false);
                StopTypeWhenWinMoney = new MSSQL.Field(this, "StopTypeWhenWinMoney", "StopTypeWhenWinMoney", SqlDbType.Money, false);
                QuashStatus = new MSSQL.Field(this, "QuashStatus", "QuashStatus", SqlDbType.SmallInt, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Price = new MSSQL.Field(this, "Price", "Price", SqlDbType.Int, false);
            }
        }

        public class T_ChaseTaskDetailRedundancy : MSSQL.TableBase
        {
            public MSSQL.Field ChaseTaskDetailID;

            public T_ChaseTaskDetailRedundancy()
            {
                TableName = "T_ChaseTaskDetailRedundancy";

                ChaseTaskDetailID = new MSSQL.Field(this, "ChaseTaskDetailID", "ChaseTaskDetailID", SqlDbType.BigInt, false);
            }
        }

        public class T_ChaseTaskDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field ChaseTaskID;
            public MSSQL.Field DateTime;
            public MSSQL.Field IsuseID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Multiple;
            public MSSQL.Field Money;
            public MSSQL.Field QuashStatus;
            public MSSQL.Field Executed;
            public MSSQL.Field SchemeID;
            public MSSQL.Field SecrecyLevel;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field Share;
            public MSSQL.Field BuyedShare;
            public MSSQL.Field AssureShare;

            public T_ChaseTaskDetails()
            {
                TableName = "T_ChaseTaskDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                ChaseTaskID = new MSSQL.Field(this, "ChaseTaskID", "ChaseTaskID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                QuashStatus = new MSSQL.Field(this, "QuashStatus", "QuashStatus", SqlDbType.SmallInt, false);
                Executed = new MSSQL.Field(this, "Executed", "Executed", SqlDbType.Bit, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                SecrecyLevel = new MSSQL.Field(this, "SecrecyLevel", "SecrecyLevel", SqlDbType.SmallInt, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                Share = new MSSQL.Field(this, "Share", "Share", SqlDbType.Int, false);
                BuyedShare = new MSSQL.Field(this, "BuyedShare", "BuyedShare", SqlDbType.Int, false);
                AssureShare = new MSSQL.Field(this, "AssureShare", "AssureShare", SqlDbType.Int, false);
            }
        }

        public class T_ChaseTasks : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Title;
            public MSSQL.Field LotteryID;
            public MSSQL.Field QuashStatus;
            public MSSQL.Field StopWhenWinMoney;
            public MSSQL.Field Description;
            public MSSQL.Field SchemeBonusScale;
            public MSSQL.Field FromClient;

            public T_ChaseTasks()
            {
                TableName = "T_ChaseTasks";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                QuashStatus = new MSSQL.Field(this, "QuashStatus", "QuashStatus", SqlDbType.SmallInt, false);
                StopWhenWinMoney = new MSSQL.Field(this, "StopWhenWinMoney", "StopWhenWinMoney", SqlDbType.Money, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                SchemeBonusScale = new MSSQL.Field(this, "SchemeBonusScale", "SchemeBonusScale", SqlDbType.Float, false);
                FromClient = new MSSQL.Field(this, "FromClient", "FromClient", SqlDbType.Int, false);
            }
        }

        public class T_Citys : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ProvinceID;
            public MSSQL.Field Name;

            public T_Citys()
            {
                TableName = "T_Citys";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                ProvinceID = new MSSQL.Field(this, "ProvinceID", "ProvinceID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
            }
        }

        public class T_CompensationRate : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field MatchID;
            public MSSQL.Field OkoooMatchID;
            public MSSQL.Field Day;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field Average99_S;
            public MSSQL.Field Average99_P;
            public MSSQL.Field Average99_F;
            public MSSQL.Field Willhill_S;
            public MSSQL.Field Willhill_P;
            public MSSQL.Field Willhill_F;
            public MSSQL.Field Lad_S;
            public MSSQL.Field Lad_P;
            public MSSQL.Field Lad_F;
            public MSSQL.Field Bet365_S;
            public MSSQL.Field Bet365_P;
            public MSSQL.Field Bet365_F;
            public MSSQL.Field Macau_S;
            public MSSQL.Field Macau_P;
            public MSSQL.Field Macau_F;

            public T_CompensationRate()
            {
                TableName = "T_CompensationRate";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                MatchID = new MSSQL.Field(this, "MatchID", "MatchID", SqlDbType.BigInt, false);
                OkoooMatchID = new MSSQL.Field(this, "OkoooMatchID", "OkoooMatchID", SqlDbType.BigInt, false);
                Day = new MSSQL.Field(this, "Day", "Day", SqlDbType.VarChar, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.VarChar, false);
                Average99_S = new MSSQL.Field(this, "Average99_S", "Average99_S", SqlDbType.Float, false);
                Average99_P = new MSSQL.Field(this, "Average99_P", "Average99_P", SqlDbType.Float, false);
                Average99_F = new MSSQL.Field(this, "Average99_F", "Average99_F", SqlDbType.Float, false);
                Willhill_S = new MSSQL.Field(this, "Willhill_S", "Willhill_S", SqlDbType.Float, false);
                Willhill_P = new MSSQL.Field(this, "Willhill_P", "Willhill_P", SqlDbType.Float, false);
                Willhill_F = new MSSQL.Field(this, "Willhill_F", "Willhill_F", SqlDbType.Float, false);
                Lad_S = new MSSQL.Field(this, "Lad_S", "Lad_S", SqlDbType.Float, false);
                Lad_P = new MSSQL.Field(this, "Lad_P", "Lad_P", SqlDbType.Float, false);
                Lad_F = new MSSQL.Field(this, "Lad_F", "Lad_F", SqlDbType.Float, false);
                Bet365_S = new MSSQL.Field(this, "Bet365_S", "Bet365_S", SqlDbType.Float, false);
                Bet365_P = new MSSQL.Field(this, "Bet365_P", "Bet365_P", SqlDbType.Float, false);
                Bet365_F = new MSSQL.Field(this, "Bet365_F", "Bet365_F", SqlDbType.Float, false);
                Macau_S = new MSSQL.Field(this, "Macau_S", "Macau_S", SqlDbType.Float, false);
                Macau_P = new MSSQL.Field(this, "Macau_P", "Macau_P", SqlDbType.Float, false);
                Macau_F = new MSSQL.Field(this, "Macau_F", "Macau_F", SqlDbType.Float, false);
            }
        }

        public class T_Competences : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Code;
            public MSSQL.Field Description;

            public T_Competences()
            {
                TableName = "T_Competences";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Code = new MSSQL.Field(this, "Code", "Code", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
            }
        }

        public class T_CompetencesOfGroups : MSSQL.TableBase
        {
            public MSSQL.Field GroupID;
            public MSSQL.Field CompetenceID;

            public T_CompetencesOfGroups()
            {
                TableName = "T_CompetencesOfGroups";

                GroupID = new MSSQL.Field(this, "GroupID", "GroupID", SqlDbType.SmallInt, false);
                CompetenceID = new MSSQL.Field(this, "CompetenceID", "CompetenceID", SqlDbType.SmallInt, false);
            }
        }

        public class T_CompetencesOfUsers : MSSQL.TableBase
        {
            public MSSQL.Field UserID;
            public MSSQL.Field CompetenceID;

            public T_CompetencesOfUsers()
            {
                TableName = "T_CompetencesOfUsers";

                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                CompetenceID = new MSSQL.Field(this, "CompetenceID", "CompetenceID", SqlDbType.SmallInt, false);
            }
        }

        public class T_ContactUs : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ContactUsType;
            public MSSQL.Field ContentDetails;

            public T_ContactUs()
            {
                TableName = "T_ContactUs";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                ContactUsType = new MSSQL.Field(this, "ContactUsType", "ContactUsType", SqlDbType.Int, false);
                ContentDetails = new MSSQL.Field(this, "ContentDetails", "ContentDetails", SqlDbType.NVarChar, false);
            }
        }

        public class T_Cps : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field OwnerUserID;
            public MSSQL.Field Name;
            public MSSQL.Field DateTime;
            public MSSQL.Field Url;
            public MSSQL.Field LogoUrl;
            public MSSQL.Field BonusScale;
            public MSSQL.Field ON;
            public MSSQL.Field Company;
            public MSSQL.Field Address;
            public MSSQL.Field PostCode;
            public MSSQL.Field ResponsiblePerson;
            public MSSQL.Field ContactPerson;
            public MSSQL.Field Telephone;
            public MSSQL.Field Fax;
            public MSSQL.Field Mobile;
            public MSSQL.Field Email;
            public MSSQL.Field QQ;
            public MSSQL.Field ServiceTelephone;
            public MSSQL.Field MD5Key;
            public MSSQL.Field Type;
            public MSSQL.Field DomainName;
            public MSSQL.Field ParentID;
            public MSSQL.Field OperatorID;
            public MSSQL.Field CommendID;
            public MSSQL.Field IsShow;
            public MSSQL.Field PageTitleName;
            public MSSQL.Field PageHeadConctroFilelName;
            public MSSQL.Field PageFootConctrolFilelName;

            public T_Cps()
            {
                TableName = "T_Cps";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                OwnerUserID = new MSSQL.Field(this, "OwnerUserID", "OwnerUserID", SqlDbType.BigInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                LogoUrl = new MSSQL.Field(this, "LogoUrl", "LogoUrl", SqlDbType.VarChar, false);
                BonusScale = new MSSQL.Field(this, "BonusScale", "BonusScale", SqlDbType.Float, false);
                ON = new MSSQL.Field(this, "ON", "ON", SqlDbType.Bit, false);
                Company = new MSSQL.Field(this, "Company", "Company", SqlDbType.VarChar, false);
                Address = new MSSQL.Field(this, "Address", "Address", SqlDbType.VarChar, false);
                PostCode = new MSSQL.Field(this, "PostCode", "PostCode", SqlDbType.VarChar, false);
                ResponsiblePerson = new MSSQL.Field(this, "ResponsiblePerson", "ResponsiblePerson", SqlDbType.VarChar, false);
                ContactPerson = new MSSQL.Field(this, "ContactPerson", "ContactPerson", SqlDbType.VarChar, false);
                Telephone = new MSSQL.Field(this, "Telephone", "Telephone", SqlDbType.VarChar, false);
                Fax = new MSSQL.Field(this, "Fax", "Fax", SqlDbType.VarChar, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.VarChar, false);
                QQ = new MSSQL.Field(this, "QQ", "QQ", SqlDbType.VarChar, false);
                ServiceTelephone = new MSSQL.Field(this, "ServiceTelephone", "ServiceTelephone", SqlDbType.VarChar, false);
                MD5Key = new MSSQL.Field(this, "MD5Key", "MD5Key", SqlDbType.VarChar, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.SmallInt, false);
                DomainName = new MSSQL.Field(this, "DomainName", "DomainName", SqlDbType.VarChar, false);
                ParentID = new MSSQL.Field(this, "ParentID", "ParentID", SqlDbType.BigInt, false);
                OperatorID = new MSSQL.Field(this, "OperatorID", "OperatorID", SqlDbType.BigInt, false);
                CommendID = new MSSQL.Field(this, "CommendID", "CommendID", SqlDbType.BigInt, false);
                IsShow = new MSSQL.Field(this, "IsShow", "IsShow", SqlDbType.Bit, false);
                PageTitleName = new MSSQL.Field(this, "PageTitleName", "PageTitleName", SqlDbType.VarChar, false);
                PageHeadConctroFilelName = new MSSQL.Field(this, "PageHeadConctroFilelName", "PageHeadConctroFilelName", SqlDbType.VarChar, false);
                PageFootConctrolFilelName = new MSSQL.Field(this, "PageFootConctrolFilelName", "PageFootConctrolFilelName", SqlDbType.VarChar, false);
            }
        }

        public class T_CpsAccountRevenue : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field CpsID;
            public MSSQL.Field DayTime;
            public MSSQL.Field TotalUserCount;
            public MSSQL.Field DayNewUserCount;
            public MSSQL.Field DayNewUserPayCount;
            public MSSQL.Field DayNewUserPaySum;
            public MSSQL.Field CpsBonus;
            public MSSQL.Field CpsWithSiteMoneySum;

            public T_CpsAccountRevenue()
            {
                TableName = "T_CpsAccountRevenue";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                CpsID = new MSSQL.Field(this, "CpsID", "CpsID", SqlDbType.Int, false);
                DayTime = new MSSQL.Field(this, "DayTime", "DayTime", SqlDbType.DateTime, false);
                TotalUserCount = new MSSQL.Field(this, "TotalUserCount", "TotalUserCount", SqlDbType.Int, false);
                DayNewUserCount = new MSSQL.Field(this, "DayNewUserCount", "DayNewUserCount", SqlDbType.Int, false);
                DayNewUserPayCount = new MSSQL.Field(this, "DayNewUserPayCount", "DayNewUserPayCount", SqlDbType.Int, false);
                DayNewUserPaySum = new MSSQL.Field(this, "DayNewUserPaySum", "DayNewUserPaySum", SqlDbType.Money, false);
                CpsBonus = new MSSQL.Field(this, "CpsBonus", "CpsBonus", SqlDbType.Money, false);
                CpsWithSiteMoneySum = new MSSQL.Field(this, "CpsWithSiteMoneySum", "CpsWithSiteMoneySum", SqlDbType.Money, false);
            }
        }

        public class T_CpsAdminAccountByMonth : MSSQL.TableBase
        {
            public MSSQL.Field AccountMonth;
            public MSSQL.Field BuyMoney;
            public MSSQL.Field PayBonus;
            public MSSQL.Field CpsCount;
            public MSSQL.Field IsPayOff;
            public MSSQL.Field UpdateTime;
            public MSSQL.Field MonthCpsCount;
            public MSSQL.Field MonthTradeCpsCount;
            public MSSQL.Field CpsMemberCount;
            public MSSQL.Field MonthNewCpsMemberCount;

            public T_CpsAdminAccountByMonth()
            {
                TableName = "T_CpsAdminAccountByMonth";

                AccountMonth = new MSSQL.Field(this, "AccountMonth", "AccountMonth", SqlDbType.VarChar, false);
                BuyMoney = new MSSQL.Field(this, "BuyMoney", "BuyMoney", SqlDbType.Money, false);
                PayBonus = new MSSQL.Field(this, "PayBonus", "PayBonus", SqlDbType.Money, false);
                CpsCount = new MSSQL.Field(this, "CpsCount", "CpsCount", SqlDbType.Int, false);
                IsPayOff = new MSSQL.Field(this, "IsPayOff", "IsPayOff", SqlDbType.Bit, false);
                UpdateTime = new MSSQL.Field(this, "UpdateTime", "UpdateTime", SqlDbType.DateTime, false);
                MonthCpsCount = new MSSQL.Field(this, "MonthCpsCount", "MonthCpsCount", SqlDbType.Int, false);
                MonthTradeCpsCount = new MSSQL.Field(this, "MonthTradeCpsCount", "MonthTradeCpsCount", SqlDbType.Int, false);
                CpsMemberCount = new MSSQL.Field(this, "CpsMemberCount", "CpsMemberCount", SqlDbType.Int, false);
                MonthNewCpsMemberCount = new MSSQL.Field(this, "MonthNewCpsMemberCount", "MonthNewCpsMemberCount", SqlDbType.Int, false);
            }
        }

        public class T_CpsBonusDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field OwnerUserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Money;
            public MSSQL.Field BonusScale;
            public MSSQL.Field IsAddInAllowBonus;
            public MSSQL.Field OperatorType;
            public MSSQL.Field FromUserID;
            public MSSQL.Field FromUserCpsID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field BuyDetailID;
            public MSSQL.Field PayNumber;
            public MSSQL.Field PayBank;
            public MSSQL.Field OperatorID;
            public MSSQL.Field Memo;
            public MSSQL.Field PrintOutDatetime;
            public MSSQL.Field LotteryID;
            public MSSQL.Field PlayTypeID;

            public T_CpsBonusDetails()
            {
                TableName = "T_CpsBonusDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                OwnerUserID = new MSSQL.Field(this, "OwnerUserID", "OwnerUserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                BonusScale = new MSSQL.Field(this, "BonusScale", "BonusScale", SqlDbType.Float, false);
                IsAddInAllowBonus = new MSSQL.Field(this, "IsAddInAllowBonus", "IsAddInAllowBonus", SqlDbType.Bit, false);
                OperatorType = new MSSQL.Field(this, "OperatorType", "OperatorType", SqlDbType.SmallInt, false);
                FromUserID = new MSSQL.Field(this, "FromUserID", "FromUserID", SqlDbType.BigInt, false);
                FromUserCpsID = new MSSQL.Field(this, "FromUserCpsID", "FromUserCpsID", SqlDbType.BigInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                BuyDetailID = new MSSQL.Field(this, "BuyDetailID", "BuyDetailID", SqlDbType.BigInt, false);
                PayNumber = new MSSQL.Field(this, "PayNumber", "PayNumber", SqlDbType.VarChar, false);
                PayBank = new MSSQL.Field(this, "PayBank", "PayBank", SqlDbType.VarChar, false);
                OperatorID = new MSSQL.Field(this, "OperatorID", "OperatorID", SqlDbType.BigInt, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
                PrintOutDatetime = new MSSQL.Field(this, "PrintOutDatetime", "PrintOutDatetime", SqlDbType.DateTime, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.BigInt, false);
            }
        }

        public class T_CpsBonusScale : MSSQL.TableBase
        {
            public MSSQL.Field OwnerUserID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field BonusScale;

            public T_CpsBonusScale()
            {
                TableName = "T_CpsBonusScale";

                OwnerUserID = new MSSQL.Field(this, "OwnerUserID", "OwnerUserID", SqlDbType.BigInt, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.BigInt, false);
                BonusScale = new MSSQL.Field(this, "BonusScale", "BonusScale", SqlDbType.Float, false);
            }
        }

        public class T_CpsBonusScaleSetting : MSSQL.TableBase
        {
            public MSSQL.Field LotteryID;
            public MSSQL.Field LotteryName;
            public MSSQL.Field TypeID;
            public MSSQL.Field UnionBonusScale;
            public MSSQL.Field SiteBonusScale;
            public MSSQL.Field CommenderBonusScale;
            public MSSQL.Field CommendSiteBonusScale;
            public MSSQL.Field Memo;

            public T_CpsBonusScaleSetting()
            {
                TableName = "T_CpsBonusScaleSetting";

                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.BigInt, false);
                LotteryName = new MSSQL.Field(this, "LotteryName", "LotteryName", SqlDbType.NVarChar, false);
                TypeID = new MSSQL.Field(this, "TypeID", "TypeID", SqlDbType.BigInt, false);
                UnionBonusScale = new MSSQL.Field(this, "UnionBonusScale", "UnionBonusScale", SqlDbType.Float, false);
                SiteBonusScale = new MSSQL.Field(this, "SiteBonusScale", "SiteBonusScale", SqlDbType.Float, false);
                CommenderBonusScale = new MSSQL.Field(this, "CommenderBonusScale", "CommenderBonusScale", SqlDbType.Float, false);
                CommendSiteBonusScale = new MSSQL.Field(this, "CommendSiteBonusScale", "CommendSiteBonusScale", SqlDbType.Float, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
            }
        }

        public class T_CpsBonusScaleType : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ParentID;
            public MSSQL.Field Name;
            public MSSQL.Field TypePath;

            public T_CpsBonusScaleType()
            {
                TableName = "T_CpsBonusScaleType";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                ParentID = new MSSQL.Field(this, "ParentID", "ParentID", SqlDbType.BigInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.NVarChar, false);
                TypePath = new MSSQL.Field(this, "TypePath", "TypePath", SqlDbType.VarChar, false);
            }
        }

        public class T_CpsIncomeByDay : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field CpsID;
            public MSSQL.Field DayTime;
            public MSSQL.Field TotalUserCount;
            public MSSQL.Field DayNewUserCount;
            public MSSQL.Field DayNewUserPayCount;
            public MSSQL.Field DayNewUserTradeMoney;
            public MSSQL.Field DayMemberTradeMoney;
            public MSSQL.Field DaySiteTradeMoney;
            public MSSQL.Field DayBonus;

            public T_CpsIncomeByDay()
            {
                TableName = "T_CpsIncomeByDay";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                CpsID = new MSSQL.Field(this, "CpsID", "CpsID", SqlDbType.Int, false);
                DayTime = new MSSQL.Field(this, "DayTime", "DayTime", SqlDbType.DateTime, false);
                TotalUserCount = new MSSQL.Field(this, "TotalUserCount", "TotalUserCount", SqlDbType.Int, false);
                DayNewUserCount = new MSSQL.Field(this, "DayNewUserCount", "DayNewUserCount", SqlDbType.Int, false);
                DayNewUserPayCount = new MSSQL.Field(this, "DayNewUserPayCount", "DayNewUserPayCount", SqlDbType.Int, false);
                DayNewUserTradeMoney = new MSSQL.Field(this, "DayNewUserTradeMoney", "DayNewUserTradeMoney", SqlDbType.Money, false);
                DayMemberTradeMoney = new MSSQL.Field(this, "DayMemberTradeMoney", "DayMemberTradeMoney", SqlDbType.Money, false);
                DaySiteTradeMoney = new MSSQL.Field(this, "DaySiteTradeMoney", "DaySiteTradeMoney", SqlDbType.Money, false);
                DayBonus = new MSSQL.Field(this, "DayBonus", "DayBonus", SqlDbType.Money, false);
            }
        }

        public class T_CpsIncomeByMonth : MSSQL.TableBase
        {
            public MSSQL.Field CpsID;
            public MSSQL.Field YearMonth;
            public MSSQL.Field BuyMoney;
            public MSSQL.Field Bonus;
            public MSSQL.Field IsGetMoney;
            public MSSQL.Field CreateDatetime;
            public MSSQL.Field Memo;

            public T_CpsIncomeByMonth()
            {
                TableName = "T_CpsIncomeByMonth";

                CpsID = new MSSQL.Field(this, "CpsID", "CpsID", SqlDbType.BigInt, false);
                YearMonth = new MSSQL.Field(this, "YearMonth", "YearMonth", SqlDbType.VarChar, false);
                BuyMoney = new MSSQL.Field(this, "BuyMoney", "BuyMoney", SqlDbType.Money, false);
                Bonus = new MSSQL.Field(this, "Bonus", "Bonus", SqlDbType.Money, false);
                IsGetMoney = new MSSQL.Field(this, "IsGetMoney", "IsGetMoney", SqlDbType.Bit, false);
                CreateDatetime = new MSSQL.Field(this, "CreateDatetime", "CreateDatetime", SqlDbType.DateTime, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
            }
        }

        public class T_CpsLog : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Datetime;
            public MSSQL.Field LogContent;

            public T_CpsLog()
            {
                TableName = "T_CpsLog";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                Datetime = new MSSQL.Field(this, "Datetime", "Datetime", SqlDbType.DateTime, false);
                LogContent = new MSSQL.Field(this, "LogContent", "LogContent", SqlDbType.VarChar, false);
            }
        }

        public class T_CpsTrys : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandlelDateTime;
            public MSSQL.Field Name;
            public MSSQL.Field Url;
            public MSSQL.Field LogoUrl;
            public MSSQL.Field Company;
            public MSSQL.Field Address;
            public MSSQL.Field PostCode;
            public MSSQL.Field ResponsiblePerson;
            public MSSQL.Field ContactPerson;
            public MSSQL.Field Telephone;
            public MSSQL.Field Fax;
            public MSSQL.Field Mobile;
            public MSSQL.Field Email;
            public MSSQL.Field QQ;
            public MSSQL.Field ServiceTelephone;
            public MSSQL.Field MD5Key;
            public MSSQL.Field Type;
            public MSSQL.Field DomainName;
            public MSSQL.Field ParentID;
            public MSSQL.Field BonusScale;
            public MSSQL.Field CommendID;
            public MSSQL.Field Content;

            public T_CpsTrys()
            {
                TableName = "T_CpsTrys";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                HandlelDateTime = new MSSQL.Field(this, "HandlelDateTime", "HandlelDateTime", SqlDbType.DateTime, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                LogoUrl = new MSSQL.Field(this, "LogoUrl", "LogoUrl", SqlDbType.VarChar, false);
                Company = new MSSQL.Field(this, "Company", "Company", SqlDbType.VarChar, false);
                Address = new MSSQL.Field(this, "Address", "Address", SqlDbType.VarChar, false);
                PostCode = new MSSQL.Field(this, "PostCode", "PostCode", SqlDbType.VarChar, false);
                ResponsiblePerson = new MSSQL.Field(this, "ResponsiblePerson", "ResponsiblePerson", SqlDbType.VarChar, false);
                ContactPerson = new MSSQL.Field(this, "ContactPerson", "ContactPerson", SqlDbType.VarChar, false);
                Telephone = new MSSQL.Field(this, "Telephone", "Telephone", SqlDbType.VarChar, false);
                Fax = new MSSQL.Field(this, "Fax", "Fax", SqlDbType.VarChar, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.VarChar, false);
                QQ = new MSSQL.Field(this, "QQ", "QQ", SqlDbType.VarChar, false);
                ServiceTelephone = new MSSQL.Field(this, "ServiceTelephone", "ServiceTelephone", SqlDbType.VarChar, false);
                MD5Key = new MSSQL.Field(this, "MD5Key", "MD5Key", SqlDbType.VarChar, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.SmallInt, false);
                DomainName = new MSSQL.Field(this, "DomainName", "DomainName", SqlDbType.VarChar, false);
                ParentID = new MSSQL.Field(this, "ParentID", "ParentID", SqlDbType.BigInt, false);
                BonusScale = new MSSQL.Field(this, "BonusScale", "BonusScale", SqlDbType.Float, false);
                CommendID = new MSSQL.Field(this, "CommendID", "CommendID", SqlDbType.BigInt, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
            }
        }

        public class T_CpsType : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;

            public T_CpsType()
            {
                TableName = "T_CpsType";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, true);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
            }
        }

        public class T_CustomFollowSchemes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field FollowSchemeID;
            public MSSQL.Field MoneyStart;
            public MSSQL.Field MoneyEnd;
            public MSSQL.Field BuyShareStart;
            public MSSQL.Field BuyShareEnd;
            public MSSQL.Field Type;

            public T_CustomFollowSchemes()
            {
                TableName = "T_CustomFollowSchemes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                FollowSchemeID = new MSSQL.Field(this, "FollowSchemeID", "FollowSchemeID", SqlDbType.BigInt, false);
                MoneyStart = new MSSQL.Field(this, "MoneyStart", "MoneyStart", SqlDbType.Money, false);
                MoneyEnd = new MSSQL.Field(this, "MoneyEnd", "MoneyEnd", SqlDbType.Money, false);
                BuyShareStart = new MSSQL.Field(this, "BuyShareStart", "BuyShareStart", SqlDbType.Int, false);
                BuyShareEnd = new MSSQL.Field(this, "BuyShareEnd", "BuyShareEnd", SqlDbType.Int, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.SmallInt, false);
            }
        }

        public class T_CustomFriendFollowSchemes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field FollowUserID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field MoneyStart;
            public MSSQL.Field MoneyEnd;
            public MSSQL.Field BuyShareStart;
            public MSSQL.Field BuyShareEnd;
            public MSSQL.Field Type;
            public MSSQL.Field DateTime;

            public T_CustomFriendFollowSchemes()
            {
                TableName = "T_CustomFriendFollowSchemes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                FollowUserID = new MSSQL.Field(this, "FollowUserID", "FollowUserID", SqlDbType.BigInt, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                MoneyStart = new MSSQL.Field(this, "MoneyStart", "MoneyStart", SqlDbType.Money, false);
                MoneyEnd = new MSSQL.Field(this, "MoneyEnd", "MoneyEnd", SqlDbType.Money, false);
                BuyShareStart = new MSSQL.Field(this, "BuyShareStart", "BuyShareStart", SqlDbType.Int, false);
                BuyShareEnd = new MSSQL.Field(this, "BuyShareEnd", "BuyShareEnd", SqlDbType.Int, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.SmallInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_EimsInformation : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ApplictionID;
            public MSSQL.Field InstanceID;
            public MSSQL.Field OwnerID;
            public MSSQL.Field Ver;
            public MSSQL.Field VisitTime;

            public T_EimsInformation()
            {
                TableName = "T_EimsInformation";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                ApplictionID = new MSSQL.Field(this, "ApplictionID", "ApplictionID", SqlDbType.VarChar, false);
                InstanceID = new MSSQL.Field(this, "InstanceID", "InstanceID", SqlDbType.VarChar, false);
                OwnerID = new MSSQL.Field(this, "OwnerID", "OwnerID", SqlDbType.VarChar, false);
                Ver = new MSSQL.Field(this, "Ver", "Ver", SqlDbType.VarChar, false);
                VisitTime = new MSSQL.Field(this, "VisitTime", "VisitTime", SqlDbType.DateTime, false);
            }
        }

        public class T_EimsIsv : MSSQL.TableBase
        {
            public MSSQL.Field id;
            public MSSQL.Field eimsid;
            public MSSQL.Field user_name;
            public MSSQL.Field user_pass;

            public T_EimsIsv()
            {
                TableName = "T_EimsIsv";

                id = new MSSQL.Field(this, "id", "id", SqlDbType.Int, true);
                eimsid = new MSSQL.Field(this, "eimsid", "eimsid", SqlDbType.NVarChar, false);
                user_name = new MSSQL.Field(this, "user_name", "user_name", SqlDbType.NVarChar, false);
                user_pass = new MSSQL.Field(this, "user_pass", "user_pass", SqlDbType.NVarChar, false);
            }
        }

        public class T_ElectronTicketAgentDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field AgentID;
            public MSSQL.Field DateTime;
            public MSSQL.Field OperatorType;
            public MSSQL.Field Amount;
            public MSSQL.Field Memo;

            public T_ElectronTicketAgentDetails()
            {
                TableName = "T_ElectronTicketAgentDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                AgentID = new MSSQL.Field(this, "AgentID", "AgentID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                OperatorType = new MSSQL.Field(this, "OperatorType", "OperatorType", SqlDbType.SmallInt, false);
                Amount = new MSSQL.Field(this, "Amount", "Amount", SqlDbType.Money, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
            }
        }

        public class T_ElectronTicketAgents : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Key;
            public MSSQL.Field Password;
            public MSSQL.Field Company;
            public MSSQL.Field Url;
            public MSSQL.Field Balance;
            public MSSQL.Field State;
            public MSSQL.Field UseLotteryList;
            public MSSQL.Field IPAddressLimit;

            public T_ElectronTicketAgents()
            {
                TableName = "T_ElectronTicketAgents";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Key = new MSSQL.Field(this, "Key", "Key", SqlDbType.VarChar, false);
                Password = new MSSQL.Field(this, "Password", "Password", SqlDbType.VarChar, false);
                Company = new MSSQL.Field(this, "Company", "Company", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                Balance = new MSSQL.Field(this, "Balance", "Balance", SqlDbType.Money, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.SmallInt, false);
                UseLotteryList = new MSSQL.Field(this, "UseLotteryList", "UseLotteryList", SqlDbType.VarChar, false);
                IPAddressLimit = new MSSQL.Field(this, "IPAddressLimit", "IPAddressLimit", SqlDbType.VarChar, false);
            }
        }

        public class T_ElectronTicketAgentSchemeDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field Name;
            public MSSQL.Field AlipayName;
            public MSSQL.Field RealityName;
            public MSSQL.Field IDCard;
            public MSSQL.Field Telephone;
            public MSSQL.Field Mobile;
            public MSSQL.Field Email;
            public MSSQL.Field Share;
            public MSSQL.Field Amount;

            public T_ElectronTicketAgentSchemeDetails()
            {
                TableName = "T_ElectronTicketAgentSchemeDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                AlipayName = new MSSQL.Field(this, "AlipayName", "AlipayName", SqlDbType.VarChar, false);
                RealityName = new MSSQL.Field(this, "RealityName", "RealityName", SqlDbType.VarChar, false);
                IDCard = new MSSQL.Field(this, "IDCard", "IDCard", SqlDbType.VarChar, false);
                Telephone = new MSSQL.Field(this, "Telephone", "Telephone", SqlDbType.VarChar, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.VarChar, false);
                Share = new MSSQL.Field(this, "Share", "Share", SqlDbType.Int, false);
                Amount = new MSSQL.Field(this, "Amount", "Amount", SqlDbType.Money, false);
            }
        }

        public class T_ElectronTicketAgentSchemes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field AgentID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeNumber;
            public MSSQL.Field LotteryID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field Amount;
            public MSSQL.Field Multiple;
            public MSSQL.Field Share;
            public MSSQL.Field InitiateName;
            public MSSQL.Field InitiateAlipayName;
            public MSSQL.Field InitiateAlipayID;
            public MSSQL.Field InitiateRealityName;
            public MSSQL.Field InitiateIDCard;
            public MSSQL.Field InitiateTelephone;
            public MSSQL.Field InitiateMobile;
            public MSSQL.Field InitiateEmail;
            public MSSQL.Field InitiateBonusScale;
            public MSSQL.Field InitiateBonusLimitLower;
            public MSSQL.Field InitiateBonusLimitUpper;
            public MSSQL.Field State;
            public MSSQL.Field BettingDescription;
            public MSSQL.Field WinMoney;
            public MSSQL.Field WinMoneyWithoutTax;
            public MSSQL.Field WinDescription;
            public MSSQL.Field Identifiers;
            public MSSQL.Field WriteOff;
            public MSSQL.Field LotteryNumber;

            public T_ElectronTicketAgentSchemes()
            {
                TableName = "T_ElectronTicketAgentSchemes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                AgentID = new MSSQL.Field(this, "AgentID", "AgentID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeNumber = new MSSQL.Field(this, "SchemeNumber", "SchemeNumber", SqlDbType.VarChar, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                Amount = new MSSQL.Field(this, "Amount", "Amount", SqlDbType.Money, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Share = new MSSQL.Field(this, "Share", "Share", SqlDbType.Int, false);
                InitiateName = new MSSQL.Field(this, "InitiateName", "InitiateName", SqlDbType.VarChar, false);
                InitiateAlipayName = new MSSQL.Field(this, "InitiateAlipayName", "InitiateAlipayName", SqlDbType.VarChar, false);
                InitiateAlipayID = new MSSQL.Field(this, "InitiateAlipayID", "InitiateAlipayID", SqlDbType.VarChar, false);
                InitiateRealityName = new MSSQL.Field(this, "InitiateRealityName", "InitiateRealityName", SqlDbType.VarChar, false);
                InitiateIDCard = new MSSQL.Field(this, "InitiateIDCard", "InitiateIDCard", SqlDbType.VarChar, false);
                InitiateTelephone = new MSSQL.Field(this, "InitiateTelephone", "InitiateTelephone", SqlDbType.VarChar, false);
                InitiateMobile = new MSSQL.Field(this, "InitiateMobile", "InitiateMobile", SqlDbType.VarChar, false);
                InitiateEmail = new MSSQL.Field(this, "InitiateEmail", "InitiateEmail", SqlDbType.VarChar, false);
                InitiateBonusScale = new MSSQL.Field(this, "InitiateBonusScale", "InitiateBonusScale", SqlDbType.Float, false);
                InitiateBonusLimitLower = new MSSQL.Field(this, "InitiateBonusLimitLower", "InitiateBonusLimitLower", SqlDbType.Money, false);
                InitiateBonusLimitUpper = new MSSQL.Field(this, "InitiateBonusLimitUpper", "InitiateBonusLimitUpper", SqlDbType.Money, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.SmallInt, false);
                BettingDescription = new MSSQL.Field(this, "BettingDescription", "BettingDescription", SqlDbType.VarChar, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                WinMoneyWithoutTax = new MSSQL.Field(this, "WinMoneyWithoutTax", "WinMoneyWithoutTax", SqlDbType.Money, false);
                WinDescription = new MSSQL.Field(this, "WinDescription", "WinDescription", SqlDbType.VarChar, false);
                Identifiers = new MSSQL.Field(this, "Identifiers", "Identifiers", SqlDbType.VarChar, false);
                WriteOff = new MSSQL.Field(this, "WriteOff", "WriteOff", SqlDbType.Bit, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
            }
        }

        public class T_ElectronTicketAgentSchemesElectronTickets : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Money;
            public MSSQL.Field Multiple;
            public MSSQL.Field Sends;
            public MSSQL.Field HandleDateTime;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandleDescription;
            public MSSQL.Field Identifiers;
            public MSSQL.Field Ticket;

            public T_ElectronTicketAgentSchemesElectronTickets()
            {
                TableName = "T_ElectronTicketAgentSchemesElectronTickets";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Sends = new MSSQL.Field(this, "Sends", "Sends", SqlDbType.SmallInt, false);
                HandleDateTime = new MSSQL.Field(this, "HandleDateTime", "HandleDateTime", SqlDbType.DateTime, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                HandleDescription = new MSSQL.Field(this, "HandleDescription", "HandleDescription", SqlDbType.VarChar, false);
                Identifiers = new MSSQL.Field(this, "Identifiers", "Identifiers", SqlDbType.VarChar, false);
                Ticket = new MSSQL.Field(this, "Ticket", "Ticket", SqlDbType.VarChar, false);
            }
        }

        public class T_ElectronTicketAgentSchemesNumber : MSSQL.TableBase
        {
            public MSSQL.Field AgendID;
            public MSSQL.Field SchemeNumber;

            public T_ElectronTicketAgentSchemesNumber()
            {
                TableName = "T_ElectronTicketAgentSchemesNumber";

                AgendID = new MSSQL.Field(this, "AgendID", "AgendID", SqlDbType.BigInt, false);
                SchemeNumber = new MSSQL.Field(this, "SchemeNumber", "SchemeNumber", SqlDbType.VarChar, false);
            }
        }

        public class T_ElectronTicketAgentSchemesSendToCenter : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Money;
            public MSSQL.Field Multiple;
            public MSSQL.Field Sends;
            public MSSQL.Field HandleDateTime;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandleDescription;
            public MSSQL.Field Identifiers;
            public MSSQL.Field Ticket;

            public T_ElectronTicketAgentSchemesSendToCenter()
            {
                TableName = "T_ElectronTicketAgentSchemesSendToCenter";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Sends = new MSSQL.Field(this, "Sends", "Sends", SqlDbType.SmallInt, false);
                HandleDateTime = new MSSQL.Field(this, "HandleDateTime", "HandleDateTime", SqlDbType.DateTime, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                HandleDescription = new MSSQL.Field(this, "HandleDescription", "HandleDescription", SqlDbType.VarChar, false);
                Identifiers = new MSSQL.Field(this, "Identifiers", "Identifiers", SqlDbType.VarChar, false);
                Ticket = new MSSQL.Field(this, "Ticket", "Ticket", SqlDbType.VarChar, false);
            }
        }

        public class T_ExecutedChases : MSSQL.TableBase
        {
            public MSSQL.Field ChaseID;
            public MSSQL.Field SchemeID;

            public T_ExecutedChases()
            {
                TableName = "T_ExecutedChases";

                ChaseID = new MSSQL.Field(this, "ChaseID", "ChaseID", SqlDbType.BigInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
            }
        }

        public class T_Experts : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Description;
            public MSSQL.Field isCanIssued;
            public MSSQL.Field MaxPrice;
            public MSSQL.Field BonusScale;
            public MSSQL.Field ON;
            public MSSQL.Field ReadCount;
            public MSSQL.Field isCommend;

            public T_Experts()
            {
                TableName = "T_Experts";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                isCanIssued = new MSSQL.Field(this, "isCanIssued", "isCanIssued", SqlDbType.Bit, false);
                MaxPrice = new MSSQL.Field(this, "MaxPrice", "MaxPrice", SqlDbType.Money, false);
                BonusScale = new MSSQL.Field(this, "BonusScale", "BonusScale", SqlDbType.Float, false);
                ON = new MSSQL.Field(this, "ON", "ON", SqlDbType.Bit, false);
                ReadCount = new MSSQL.Field(this, "ReadCount", "ReadCount", SqlDbType.Int, false);
                isCommend = new MSSQL.Field(this, "isCommend", "isCommend", SqlDbType.Bit, false);
            }
        }

        public class T_ExpertsCommendRead : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field ExpertsCommendID;
            public MSSQL.Field UserID;

            public T_ExpertsCommendRead()
            {
                TableName = "T_ExpertsCommendRead";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                ExpertsCommendID = new MSSQL.Field(this, "ExpertsCommendID", "ExpertsCommendID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
            }
        }

        public class T_ExpertsCommends : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field ExpertsID;
            public MSSQL.Field DateTime;
            public MSSQL.Field IsuseID;
            public MSSQL.Field Title;
            public MSSQL.Field Price;
            public MSSQL.Field ReadCount;
            public MSSQL.Field WinMoney;
            public MSSQL.Field isCommend;
            public MSSQL.Field Content;
            public MSSQL.Field Number;

            public T_ExpertsCommends()
            {
                TableName = "T_ExpertsCommends";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                ExpertsID = new MSSQL.Field(this, "ExpertsID", "ExpertsID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                Price = new MSSQL.Field(this, "Price", "Price", SqlDbType.Money, false);
                ReadCount = new MSSQL.Field(this, "ReadCount", "ReadCount", SqlDbType.Int, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                isCommend = new MSSQL.Field(this, "isCommend", "isCommend", SqlDbType.Bit, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                Number = new MSSQL.Field(this, "Number", "Number", SqlDbType.VarChar, false);
            }
        }

        public class T_ExpertsPredict : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field DateTime;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Description;
            public MSSQL.Field ON;
            public MSSQL.Field URL;

            public T_ExpertsPredict()
            {
                TableName = "T_ExpertsPredict";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                ON = new MSSQL.Field(this, "ON", "ON", SqlDbType.Bit, false);
                URL = new MSSQL.Field(this, "URL", "URL", SqlDbType.VarChar, false);
            }
        }

        public class T_ExpertsPredictCommends : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ExpertsPredictID;
            public MSSQL.Field CommendID;
            public MSSQL.Field IsShow;
            public MSSQL.Field Content;
            public MSSQL.Field DateTime;

            public T_ExpertsPredictCommends()
            {
                TableName = "T_ExpertsPredictCommends";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                ExpertsPredictID = new MSSQL.Field(this, "ExpertsPredictID", "ExpertsPredictID", SqlDbType.Int, false);
                CommendID = new MSSQL.Field(this, "CommendID", "CommendID", SqlDbType.BigInt, false);
                IsShow = new MSSQL.Field(this, "IsShow", "IsShow", SqlDbType.Bit, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_ExpertsPredictNews : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field ExpertsPredictID;
            public MSSQL.Field Description;
            public MSSQL.Field ON;
            public MSSQL.Field URL;
            public MSSQL.Field isWinning;

            public T_ExpertsPredictNews()
            {
                TableName = "T_ExpertsPredictNews";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                ExpertsPredictID = new MSSQL.Field(this, "ExpertsPredictID", "ExpertsPredictID", SqlDbType.Int, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                ON = new MSSQL.Field(this, "ON", "ON", SqlDbType.Bit, false);
                URL = new MSSQL.Field(this, "URL", "URL", SqlDbType.VarChar, false);
                isWinning = new MSSQL.Field(this, "isWinning", "isWinning", SqlDbType.Bit, false);
            }
        }

        public class T_ExtraBonus : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field realWinMoney;
            public MSSQL.Field realWinMoneyWithoutTax;
            public MSSQL.Field CommonWinMoney;
            public MSSQL.Field CommonWinMoneyWithoutTax;
            public MSSQL.Field ExtraMoney;
            public MSSQL.Field ExtraMoneyWithoutTax;
            public MSSQL.Field BuyTime;
            public MSSQL.Field GenerateTime;

            public T_ExtraBonus()
            {
                TableName = "T_ExtraBonus";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                realWinMoney = new MSSQL.Field(this, "realWinMoney", "realWinMoney", SqlDbType.Money, false);
                realWinMoneyWithoutTax = new MSSQL.Field(this, "realWinMoneyWithoutTax", "realWinMoneyWithoutTax", SqlDbType.Money, false);
                CommonWinMoney = new MSSQL.Field(this, "CommonWinMoney", "CommonWinMoney", SqlDbType.Money, false);
                CommonWinMoneyWithoutTax = new MSSQL.Field(this, "CommonWinMoneyWithoutTax", "CommonWinMoneyWithoutTax", SqlDbType.Money, false);
                ExtraMoney = new MSSQL.Field(this, "ExtraMoney", "ExtraMoney", SqlDbType.Money, false);
                ExtraMoneyWithoutTax = new MSSQL.Field(this, "ExtraMoneyWithoutTax", "ExtraMoneyWithoutTax", SqlDbType.Money, false);
                BuyTime = new MSSQL.Field(this, "BuyTime", "BuyTime", SqlDbType.DateTime, false);
                GenerateTime = new MSSQL.Field(this, "GenerateTime", "GenerateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_FloatNotify : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Title;
            public MSSQL.Field Color;
            public MSSQL.Field Url;
            public MSSQL.Field DateTime;
            public MSSQL.Field Order;
            public MSSQL.Field isShow;

            public T_FloatNotify()
            {
                TableName = "T_FloatNotify";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                Color = new MSSQL.Field(this, "Color", "Color", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
            }
        }

        public class T_FocusEvent : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Datetime;
            public MSSQL.Field Year;
            public MSSQL.Field Month;
            public MSSQL.Field Title;
            public MSSQL.Field Content;
            public MSSQL.Field ImageUrl;
            public MSSQL.Field IsShow;

            public T_FocusEvent()
            {
                TableName = "T_FocusEvent";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                Datetime = new MSSQL.Field(this, "Datetime", "Datetime", SqlDbType.DateTime, false);
                Year = new MSSQL.Field(this, "Year", "Year", SqlDbType.Int, false);
                Month = new MSSQL.Field(this, "Month", "Month", SqlDbType.Int, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.NVarChar, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.NVarChar, false);
                ImageUrl = new MSSQL.Field(this, "ImageUrl", "ImageUrl", SqlDbType.NVarChar, false);
                IsShow = new MSSQL.Field(this, "IsShow", "IsShow", SqlDbType.Bit, false);
            }
        }

        public class T_FocusImageNews : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Title;
            public MSSQL.Field ImageUrl;
            public MSSQL.Field Url;
            public MSSQL.Field DateTime;
            public MSSQL.Field IsBig;

            public T_FocusImageNews()
            {
                TableName = "T_FocusImageNews";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                ImageUrl = new MSSQL.Field(this, "ImageUrl", "ImageUrl", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                IsBig = new MSSQL.Field(this, "IsBig", "IsBig", SqlDbType.Bit, false);
            }
        }

        public class T_FocusNews : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Title;
            public MSSQL.Field Url;
            public MSSQL.Field DateTime;
            public MSSQL.Field IsMaster;
            public MSSQL.Field Order;

            public T_FocusNews()
            {
                TableName = "T_FocusNews";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                IsMaster = new MSSQL.Field(this, "IsMaster", "IsMaster", SqlDbType.Bit, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.SmallInt, false);
            }
        }

        public class T_FootballLeagueTypes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Code;
            public MSSQL.Field MarkersColor;
            public MSSQL.Field Description;
            public MSSQL.Field Order;
            public MSSQL.Field isUse;

            public T_FootballLeagueTypes()
            {
                TableName = "T_FootballLeagueTypes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Code = new MSSQL.Field(this, "Code", "Code", SqlDbType.VarChar, false);
                MarkersColor = new MSSQL.Field(this, "MarkersColor", "MarkersColor", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                isUse = new MSSQL.Field(this, "isUse", "isUse", SqlDbType.Bit, false);
            }
        }

        public class T_FriendshipLinks : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field LinkName;
            public MSSQL.Field LogoUrl;
            public MSSQL.Field Url;
            public MSSQL.Field Order;
            public MSSQL.Field isShow;

            public T_FriendshipLinks()
            {
                TableName = "T_FriendshipLinks";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                LinkName = new MSSQL.Field(this, "LinkName", "LinkName", SqlDbType.VarChar, false);
                LogoUrl = new MSSQL.Field(this, "LogoUrl", "LogoUrl", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
            }
        }

        public class T_GreetingCards : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field InitiateUserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field EndDatetime;
            public MSSQL.Field LotteryID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field Multiple;
            public MSSQL.Field Money;
            public MSSQL.Field Executed;
            public MSSQL.Field QuashStatus;
            public MSSQL.Field SchemeID;
            public MSSQL.Field ReceiveUserID;
            public MSSQL.Field ReceiveDatetime;
            public MSSQL.Field SecrecyLevel;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field VerificationCade;

            public T_GreetingCards()
            {
                TableName = "T_GreetingCards";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                InitiateUserID = new MSSQL.Field(this, "InitiateUserID", "InitiateUserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                EndDatetime = new MSSQL.Field(this, "EndDatetime", "EndDatetime", SqlDbType.DateTime, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Executed = new MSSQL.Field(this, "Executed", "Executed", SqlDbType.Bit, false);
                QuashStatus = new MSSQL.Field(this, "QuashStatus", "QuashStatus", SqlDbType.SmallInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                ReceiveUserID = new MSSQL.Field(this, "ReceiveUserID", "ReceiveUserID", SqlDbType.BigInt, false);
                ReceiveDatetime = new MSSQL.Field(this, "ReceiveDatetime", "ReceiveDatetime", SqlDbType.DateTime, false);
                SecrecyLevel = new MSSQL.Field(this, "SecrecyLevel", "SecrecyLevel", SqlDbType.SmallInt, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                VerificationCade = new MSSQL.Field(this, "VerificationCade", "VerificationCade", SqlDbType.BigInt, false);
            }
        }

        public class T_IPAddress : MSSQL.TableBase
        {
            public MSSQL.Field IPStart;
            public MSSQL.Field IPEnd;
            public MSSQL.Field Country;
            public MSSQL.Field City;

            public T_IPAddress()
            {
                TableName = "T_IPAddress";

                IPStart = new MSSQL.Field(this, "IPStart", "IPStart", SqlDbType.Float, false);
                IPEnd = new MSSQL.Field(this, "IPEnd", "IPEnd", SqlDbType.Float, false);
                Country = new MSSQL.Field(this, "Country", "Country", SqlDbType.NVarChar, false);
                City = new MSSQL.Field(this, "City", "City", SqlDbType.NVarChar, false);
            }
        }

        public class T_IsuseBonuses : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field defaultMoney;
            public MSSQL.Field DefaultMoneyNoWithTax;
            public MSSQL.Field WinNumber;

            public T_IsuseBonuses()
            {
                TableName = "T_IsuseBonuses";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                defaultMoney = new MSSQL.Field(this, "defaultMoney", "defaultMoney", SqlDbType.Money, false);
                DefaultMoneyNoWithTax = new MSSQL.Field(this, "DefaultMoneyNoWithTax", "DefaultMoneyNoWithTax", SqlDbType.Money, false);
                WinNumber = new MSSQL.Field(this, "WinNumber", "WinNumber", SqlDbType.VarChar, false);
            }
        }

        public class T_IsuseForJQC : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field No;
            public MSSQL.Field Team;
            public MSSQL.Field DateTime;
            public MSSQL.Field First;
            public MSSQL.Field Second;
            public MSSQL.Field Three;
            public MSSQL.Field Fourth;
            public MSSQL.Field lost;
            public MSSQL.Field draw;
            public MSSQL.Field win;

            public T_IsuseForJQC()
            {
                TableName = "T_IsuseForJQC";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                No = new MSSQL.Field(this, "No", "No", SqlDbType.SmallInt, false);
                Team = new MSSQL.Field(this, "Team", "Team", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.VarChar, false);
                First = new MSSQL.Field(this, "First", "First", SqlDbType.Float, false);
                Second = new MSSQL.Field(this, "Second", "Second", SqlDbType.Float, false);
                Three = new MSSQL.Field(this, "Three", "Three", SqlDbType.Float, false);
                Fourth = new MSSQL.Field(this, "Fourth", "Fourth", SqlDbType.Float, false);
                lost = new MSSQL.Field(this, "lost", "lost", SqlDbType.Float, false);
                draw = new MSSQL.Field(this, "draw", "draw", SqlDbType.Float, false);
                win = new MSSQL.Field(this, "win", "win", SqlDbType.Float, false);
            }
        }

        public class T_IsuseForLCBQC : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field No;
            public MSSQL.Field HostTeam;
            public MSSQL.Field QuestTeam;
            public MSSQL.Field DateTime;
            public MSSQL.Field lost;
            public MSSQL.Field draw;
            public MSSQL.Field win;
            public MSSQL.Field lostScale;
            public MSSQL.Field drawScale;
            public MSSQL.Field winScale;

            public T_IsuseForLCBQC()
            {
                TableName = "T_IsuseForLCBQC";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                No = new MSSQL.Field(this, "No", "No", SqlDbType.SmallInt, false);
                HostTeam = new MSSQL.Field(this, "HostTeam", "HostTeam", SqlDbType.VarChar, false);
                QuestTeam = new MSSQL.Field(this, "QuestTeam", "QuestTeam", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.VarChar, false);
                lost = new MSSQL.Field(this, "lost", "lost", SqlDbType.Float, false);
                draw = new MSSQL.Field(this, "draw", "draw", SqlDbType.Float, false);
                win = new MSSQL.Field(this, "win", "win", SqlDbType.Float, false);
                lostScale = new MSSQL.Field(this, "lostScale", "lostScale", SqlDbType.Float, false);
                drawScale = new MSSQL.Field(this, "drawScale", "drawScale", SqlDbType.Float, false);
                winScale = new MSSQL.Field(this, "winScale", "winScale", SqlDbType.Float, false);
            }
        }

        public class T_IsuseForLCDC : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field No;
            public MSSQL.Field HostTeam;
            public MSSQL.Field QuestTeam;
            public MSSQL.Field DateTime;

            public T_IsuseForLCDC()
            {
                TableName = "T_IsuseForLCDC";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                No = new MSSQL.Field(this, "No", "No", SqlDbType.SmallInt, false);
                HostTeam = new MSSQL.Field(this, "HostTeam", "HostTeam", SqlDbType.VarChar, false);
                QuestTeam = new MSSQL.Field(this, "QuestTeam", "QuestTeam", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.VarChar, false);
            }
        }

        public class T_IsuseForSFC : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field No;
            public MSSQL.Field HostTeam;
            public MSSQL.Field QuestTeam;
            public MSSQL.Field DateTime;
            public MSSQL.Field lost;
            public MSSQL.Field draw;
            public MSSQL.Field win;
            public MSSQL.Field lostScale;
            public MSSQL.Field drawScale;
            public MSSQL.Field winScale;
            public MSSQL.Field result;

            public T_IsuseForSFC()
            {
                TableName = "T_IsuseForSFC";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                No = new MSSQL.Field(this, "No", "No", SqlDbType.SmallInt, false);
                HostTeam = new MSSQL.Field(this, "HostTeam", "HostTeam", SqlDbType.VarChar, false);
                QuestTeam = new MSSQL.Field(this, "QuestTeam", "QuestTeam", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.VarChar, false);
                lost = new MSSQL.Field(this, "lost", "lost", SqlDbType.Float, false);
                draw = new MSSQL.Field(this, "draw", "draw", SqlDbType.Float, false);
                win = new MSSQL.Field(this, "win", "win", SqlDbType.Float, false);
                lostScale = new MSSQL.Field(this, "lostScale", "lostScale", SqlDbType.Float, false);
                drawScale = new MSSQL.Field(this, "drawScale", "drawScale", SqlDbType.Float, false);
                winScale = new MSSQL.Field(this, "winScale", "winScale", SqlDbType.Float, false);
                result = new MSSQL.Field(this, "result", "result", SqlDbType.VarChar, false);
            }
        }

        public class T_IsuseForZCDC : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field LeagueTypeID;
            public MSSQL.Field No;
            public MSSQL.Field HostTeam;
            public MSSQL.Field QuestTeam;
            public MSSQL.Field LetBall;
            public MSSQL.Field DateTime;
            public MSSQL.Field HalftimeResult;
            public MSSQL.Field Result;
            public MSSQL.Field SPFResult;
            public MSSQL.Field SPF_SP;
            public MSSQL.Field ZJQResult;
            public MSSQL.Field ZJQ_SP;
            public MSSQL.Field SXDSResult;
            public MSSQL.Field SXDS_SP;
            public MSSQL.Field ZQBFResult;
            public MSSQL.Field ZQBF_SP;
            public MSSQL.Field BQCSPFResult;
            public MSSQL.Field BQCSPF_SP;
            public MSSQL.Field AnalysisURL;

            public T_IsuseForZCDC()
            {
                TableName = "T_IsuseForZCDC";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                LeagueTypeID = new MSSQL.Field(this, "LeagueTypeID", "LeagueTypeID", SqlDbType.Int, false);
                No = new MSSQL.Field(this, "No", "No", SqlDbType.SmallInt, false);
                HostTeam = new MSSQL.Field(this, "HostTeam", "HostTeam", SqlDbType.VarChar, false);
                QuestTeam = new MSSQL.Field(this, "QuestTeam", "QuestTeam", SqlDbType.VarChar, false);
                LetBall = new MSSQL.Field(this, "LetBall", "LetBall", SqlDbType.SmallInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.VarChar, false);
                HalftimeResult = new MSSQL.Field(this, "HalftimeResult", "HalftimeResult", SqlDbType.VarChar, false);
                Result = new MSSQL.Field(this, "Result", "Result", SqlDbType.VarChar, false);
                SPFResult = new MSSQL.Field(this, "SPFResult", "SPFResult", SqlDbType.VarChar, false);
                SPF_SP = new MSSQL.Field(this, "SPF_SP", "SPF_SP", SqlDbType.Float, false);
                ZJQResult = new MSSQL.Field(this, "ZJQResult", "ZJQResult", SqlDbType.VarChar, false);
                ZJQ_SP = new MSSQL.Field(this, "ZJQ_SP", "ZJQ_SP", SqlDbType.Float, false);
                SXDSResult = new MSSQL.Field(this, "SXDSResult", "SXDSResult", SqlDbType.VarChar, false);
                SXDS_SP = new MSSQL.Field(this, "SXDS_SP", "SXDS_SP", SqlDbType.Float, false);
                ZQBFResult = new MSSQL.Field(this, "ZQBFResult", "ZQBFResult", SqlDbType.VarChar, false);
                ZQBF_SP = new MSSQL.Field(this, "ZQBF_SP", "ZQBF_SP", SqlDbType.Float, false);
                BQCSPFResult = new MSSQL.Field(this, "BQCSPFResult", "BQCSPFResult", SqlDbType.VarChar, false);
                BQCSPF_SP = new MSSQL.Field(this, "BQCSPF_SP", "BQCSPF_SP", SqlDbType.Float, false);
                AnalysisURL = new MSSQL.Field(this, "AnalysisURL", "AnalysisURL", SqlDbType.VarChar, false);
            }
        }

        public class T_IsuseInfo : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IssueID;
            public MSSQL.Field TotalSaleMoney;
            public MSSQL.Field PoolOut;
            public MSSQL.Field TotalAwardMoney;
            public MSSQL.Field TotalSaleMoneyLocal;
            public MSSQL.Field TotalAwardMoneyLocal;
            public MSSQL.Field Sum;
            public MSSQL.Field SmallAwardSum;
            public MSSQL.Field BigAwardSum;
            public MSSQL.Field TaxSum;

            public T_IsuseInfo()
            {
                TableName = "T_IsuseInfo";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IssueID = new MSSQL.Field(this, "IssueID", "IssueID", SqlDbType.BigInt, false);
                TotalSaleMoney = new MSSQL.Field(this, "TotalSaleMoney", "TotalSaleMoney", SqlDbType.Money, false);
                PoolOut = new MSSQL.Field(this, "PoolOut", "PoolOut", SqlDbType.Money, false);
                TotalAwardMoney = new MSSQL.Field(this, "TotalAwardMoney", "TotalAwardMoney", SqlDbType.Money, false);
                TotalSaleMoneyLocal = new MSSQL.Field(this, "TotalSaleMoneyLocal", "TotalSaleMoneyLocal", SqlDbType.Money, false);
                TotalAwardMoneyLocal = new MSSQL.Field(this, "TotalAwardMoneyLocal", "TotalAwardMoneyLocal", SqlDbType.Money, false);
                Sum = new MSSQL.Field(this, "Sum", "Sum", SqlDbType.Money, false);
                SmallAwardSum = new MSSQL.Field(this, "SmallAwardSum", "SmallAwardSum", SqlDbType.Money, false);
                BigAwardSum = new MSSQL.Field(this, "BigAwardSum", "BigAwardSum", SqlDbType.Money, false);
                TaxSum = new MSSQL.Field(this, "TaxSum", "TaxSum", SqlDbType.Money, false);
            }
        }

        public class T_Isuses : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Name;
            public MSSQL.Field StartTime;
            public MSSQL.Field EndTime;
            public MSSQL.Field ChaseExecuted;
            public MSSQL.Field IsOpened;
            public MSSQL.Field WinLotteryNumber;
            public MSSQL.Field OpenOperatorID;
            public MSSQL.Field State;
            public MSSQL.Field StateUpdateTime;
            public MSSQL.Field OpenAffiche;
            public MSSQL.Field WinDetail;
            public MSSQL.Field TotalSales;
            public MSSQL.Field Betting;
            public MSSQL.Field Explanation;

            public T_Isuses()
            {
                TableName = "T_Isuses";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                StartTime = new MSSQL.Field(this, "StartTime", "StartTime", SqlDbType.DateTime, false);
                EndTime = new MSSQL.Field(this, "EndTime", "EndTime", SqlDbType.DateTime, false);
                ChaseExecuted = new MSSQL.Field(this, "ChaseExecuted", "ChaseExecuted", SqlDbType.Bit, false);
                IsOpened = new MSSQL.Field(this, "IsOpened", "IsOpened", SqlDbType.Bit, false);
                WinLotteryNumber = new MSSQL.Field(this, "WinLotteryNumber", "WinLotteryNumber", SqlDbType.VarChar, false);
                OpenOperatorID = new MSSQL.Field(this, "OpenOperatorID", "OpenOperatorID", SqlDbType.BigInt, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.SmallInt, false);
                StateUpdateTime = new MSSQL.Field(this, "StateUpdateTime", "StateUpdateTime", SqlDbType.DateTime, false);
                OpenAffiche = new MSSQL.Field(this, "OpenAffiche", "OpenAffiche", SqlDbType.VarChar, false);
                WinDetail = new MSSQL.Field(this, "WinDetail", "WinDetail", SqlDbType.NVarChar, false);
                TotalSales = new MSSQL.Field(this, "TotalSales", "TotalSales", SqlDbType.BigInt, false);
                Betting = new MSSQL.Field(this, "Betting", "Betting", SqlDbType.VarChar, false);
                Explanation = new MSSQL.Field(this, "Explanation", "Explanation", SqlDbType.VarChar, false);
            }
        }

        public class T_Lotteries : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Code;
            public MSSQL.Field MaxChaseIsuse;
            public MSSQL.Field ChaseExecuteDeferMinute;
            public MSSQL.Field Order;
            public MSSQL.Field WinNumberExemple;
            public MSSQL.Field IntervalType;
            public MSSQL.Field PrintOutType;
            public MSSQL.Field TypeID;
            public MSSQL.Field Type2;
            public MSSQL.Field Agreement;
            public MSSQL.Field Explain;
            public MSSQL.Field SchemeExemple;
            public MSSQL.Field OpenAfficheTemplate;
            public MSSQL.Field QuashExecuteDeferMinute;
            public MSSQL.Field Sort;
            public MSSQL.Field Recommend;
            public MSSQL.Field ImgURL;
            public MSSQL.Field NewOrder;
            public MSSQL.Field Kinformation;
            public MSSQL.Field SmallImgURL;

            public T_Lotteries()
            {
                TableName = "T_Lotteries";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Code = new MSSQL.Field(this, "Code", "Code", SqlDbType.VarChar, false);
                MaxChaseIsuse = new MSSQL.Field(this, "MaxChaseIsuse", "MaxChaseIsuse", SqlDbType.VarChar, false);
                ChaseExecuteDeferMinute = new MSSQL.Field(this, "ChaseExecuteDeferMinute", "ChaseExecuteDeferMinute", SqlDbType.Int, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                WinNumberExemple = new MSSQL.Field(this, "WinNumberExemple", "WinNumberExemple", SqlDbType.VarChar, false);
                IntervalType = new MSSQL.Field(this, "IntervalType", "IntervalType", SqlDbType.VarChar, false);
                PrintOutType = new MSSQL.Field(this, "PrintOutType", "PrintOutType", SqlDbType.SmallInt, false);
                TypeID = new MSSQL.Field(this, "TypeID", "TypeID", SqlDbType.SmallInt, false);
                Type2 = new MSSQL.Field(this, "Type2", "Type2", SqlDbType.SmallInt, false);
                Agreement = new MSSQL.Field(this, "Agreement", "Agreement", SqlDbType.VarChar, false);
                Explain = new MSSQL.Field(this, "Explain", "Explain", SqlDbType.VarChar, false);
                SchemeExemple = new MSSQL.Field(this, "SchemeExemple", "SchemeExemple", SqlDbType.VarChar, false);
                OpenAfficheTemplate = new MSSQL.Field(this, "OpenAfficheTemplate", "OpenAfficheTemplate", SqlDbType.VarChar, false);
                QuashExecuteDeferMinute = new MSSQL.Field(this, "QuashExecuteDeferMinute", "QuashExecuteDeferMinute", SqlDbType.Int, false);
                Sort = new MSSQL.Field(this, "Sort", "Sort", SqlDbType.Int, false);
                Recommend = new MSSQL.Field(this, "Recommend", "Recommend", SqlDbType.Bit, false);
                ImgURL = new MSSQL.Field(this, "ImgURL", "ImgURL", SqlDbType.VarChar, false);
                NewOrder = new MSSQL.Field(this, "NewOrder", "NewOrder", SqlDbType.Int, false);
                Kinformation = new MSSQL.Field(this, "Kinformation", "Kinformation", SqlDbType.VarChar, false);
                SmallImgURL = new MSSQL.Field(this, "SmallImgURL", "SmallImgURL", SqlDbType.VarChar, false);
            }
        }

        public class T_LotteryToolLinks : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field LinkName;
            public MSSQL.Field LogoUrl;
            public MSSQL.Field Url;
            public MSSQL.Field Order;
            public MSSQL.Field isShow;

            public T_LotteryToolLinks()
            {
                TableName = "T_LotteryToolLinks";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                LinkName = new MSSQL.Field(this, "LinkName", "LinkName", SqlDbType.VarChar, false);
                LogoUrl = new MSSQL.Field(this, "LogoUrl", "LogoUrl", SqlDbType.VarChar, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
            }
        }

        public class T_LotteryType : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ParentID;
            public MSSQL.Field Name;
            public MSSQL.Field Description;
            public MSSQL.Field Order;

            public T_LotteryType()
            {
                TableName = "T_LotteryType";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, true);
                ParentID = new MSSQL.Field(this, "ParentID", "ParentID", SqlDbType.SmallInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.SmallInt, false);
            }
        }

        public class T_LuckNumber : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Type;
            public MSSQL.Field Name;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field DateTime;

            public T_LuckNumber()
            {
                TableName = "T_LuckNumber";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.SmallInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_MarketOutlook : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Title;
            public MSSQL.Field isShow;
            public MSSQL.Field Content;

            public T_MarketOutlook()
            {
                TableName = "T_MarketOutlook";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
            }
        }

        public class T_Match : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field GameColor;
            public MSSQL.Field Game;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field MatchDate;
            public MSSQL.Field MainTeam;
            public MSSQL.Field GuestTeam;
            public MSSQL.Field MainLoseBall;
            public MSSQL.Field StopSellingTime;
            public MSSQL.Field SPFResult;
            public MSSQL.Field SPFBonus;
            public MSSQL.Field BQCResult;
            public MSSQL.Field BQCBonus;
            public MSSQL.Field ZJQSResult;
            public MSSQL.Field ZJQSBonus;
            public MSSQL.Field ZQBFResult;
            public MSSQL.Field ZQBFBonus;
            public MSSQL.Field FirstHalfResult;
            public MSSQL.Field Result;
            public MSSQL.Field IsOpened;
            public MSSQL.Field RQSPFResult;
            public MSSQL.Field RQSPFBonus;

            public T_Match()
            {
                TableName = "T_Match";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                GameColor = new MSSQL.Field(this, "GameColor", "GameColor", SqlDbType.NVarChar, false);
                Game = new MSSQL.Field(this, "Game", "Game", SqlDbType.NVarChar, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.NVarChar, false);
                MatchDate = new MSSQL.Field(this, "MatchDate", "MatchDate", SqlDbType.DateTime, false);
                MainTeam = new MSSQL.Field(this, "MainTeam", "MainTeam", SqlDbType.NVarChar, false);
                GuestTeam = new MSSQL.Field(this, "GuestTeam", "GuestTeam", SqlDbType.NVarChar, false);
                MainLoseBall = new MSSQL.Field(this, "MainLoseBall", "MainLoseBall", SqlDbType.NVarChar, false);
                StopSellingTime = new MSSQL.Field(this, "StopSellingTime", "StopSellingTime", SqlDbType.DateTime, false);
                SPFResult = new MSSQL.Field(this, "SPFResult", "SPFResult", SqlDbType.NVarChar, false);
                SPFBonus = new MSSQL.Field(this, "SPFBonus", "SPFBonus", SqlDbType.NVarChar, false);
                BQCResult = new MSSQL.Field(this, "BQCResult", "BQCResult", SqlDbType.NVarChar, false);
                BQCBonus = new MSSQL.Field(this, "BQCBonus", "BQCBonus", SqlDbType.NVarChar, false);
                ZJQSResult = new MSSQL.Field(this, "ZJQSResult", "ZJQSResult", SqlDbType.NVarChar, false);
                ZJQSBonus = new MSSQL.Field(this, "ZJQSBonus", "ZJQSBonus", SqlDbType.NVarChar, false);
                ZQBFResult = new MSSQL.Field(this, "ZQBFResult", "ZQBFResult", SqlDbType.NVarChar, false);
                ZQBFBonus = new MSSQL.Field(this, "ZQBFBonus", "ZQBFBonus", SqlDbType.NVarChar, false);
                FirstHalfResult = new MSSQL.Field(this, "FirstHalfResult", "FirstHalfResult", SqlDbType.NVarChar, false);
                Result = new MSSQL.Field(this, "Result", "Result", SqlDbType.NVarChar, false);
                IsOpened = new MSSQL.Field(this, "IsOpened", "IsOpened", SqlDbType.Bit, false);
                RQSPFResult = new MSSQL.Field(this, "RQSPFResult", "RQSPFResult", SqlDbType.VarChar, false);
                RQSPFBonus = new MSSQL.Field(this, "RQSPFBonus", "RQSPFBonus", SqlDbType.VarChar, false);
            }
        }

        public class T_MatchBasket : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field GameColor;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field MatchDate;
            public MSSQL.Field MainTeam;
            public MSSQL.Field GuestTeam;
            public MSSQL.Field StopSellingTime;
            public MSSQL.Field Winlosescore;
            public MSSQL.Field Givewinlosescore;
            public MSSQL.Field BigSmallscore;
            public MSSQL.Field DXResult;
            public MSSQL.Field DXBonus;
            public MSSQL.Field RFSFResult;
            public MSSQL.Field RFSFBonus;
            public MSSQL.Field SFResult;
            public MSSQL.Field SFBonus;
            public MSSQL.Field SFCResult;
            public MSSQL.Field SFCBonus;
            public MSSQL.Field Result;
            public MSSQL.Field IsResult;
            public MSSQL.Field IsOpened;
            public MSSQL.Field Game;

            public T_MatchBasket()
            {
                TableName = "T_MatchBasket";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                GameColor = new MSSQL.Field(this, "GameColor", "GameColor", SqlDbType.NVarChar, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.NVarChar, false);
                MatchDate = new MSSQL.Field(this, "MatchDate", "MatchDate", SqlDbType.DateTime, false);
                MainTeam = new MSSQL.Field(this, "MainTeam", "MainTeam", SqlDbType.NVarChar, false);
                GuestTeam = new MSSQL.Field(this, "GuestTeam", "GuestTeam", SqlDbType.NVarChar, false);
                StopSellingTime = new MSSQL.Field(this, "StopSellingTime", "StopSellingTime", SqlDbType.DateTime, false);
                Winlosescore = new MSSQL.Field(this, "Winlosescore", "Winlosescore", SqlDbType.NVarChar, false);
                Givewinlosescore = new MSSQL.Field(this, "Givewinlosescore", "Givewinlosescore", SqlDbType.NVarChar, false);
                BigSmallscore = new MSSQL.Field(this, "BigSmallscore", "BigSmallscore", SqlDbType.Float, false);
                DXResult = new MSSQL.Field(this, "DXResult", "DXResult", SqlDbType.NVarChar, false);
                DXBonus = new MSSQL.Field(this, "DXBonus", "DXBonus", SqlDbType.NVarChar, false);
                RFSFResult = new MSSQL.Field(this, "RFSFResult", "RFSFResult", SqlDbType.NVarChar, false);
                RFSFBonus = new MSSQL.Field(this, "RFSFBonus", "RFSFBonus", SqlDbType.NVarChar, false);
                SFResult = new MSSQL.Field(this, "SFResult", "SFResult", SqlDbType.NVarChar, false);
                SFBonus = new MSSQL.Field(this, "SFBonus", "SFBonus", SqlDbType.NVarChar, false);
                SFCResult = new MSSQL.Field(this, "SFCResult", "SFCResult", SqlDbType.NVarChar, false);
                SFCBonus = new MSSQL.Field(this, "SFCBonus", "SFCBonus", SqlDbType.NVarChar, false);
                Result = new MSSQL.Field(this, "Result", "Result", SqlDbType.NVarChar, false);
                IsResult = new MSSQL.Field(this, "IsResult", "IsResult", SqlDbType.Bit, false);
                IsOpened = new MSSQL.Field(this, "IsOpened", "IsOpened", SqlDbType.Bit, false);
                Game = new MSSQL.Field(this, "Game", "Game", SqlDbType.NVarChar, false);
            }
        }

        public class T_MaxMultiple : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field MaxMultiple;

            public T_MaxMultiple()
            {
                TableName = "T_MaxMultiple";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                MaxMultiple = new MSSQL.Field(this, "MaxMultiple", "MaxMultiple", SqlDbType.Int, false);
            }
        }

        public class T_Model : MSSQL.TableBase
        {
            public MSSQL.Field id;
            public MSSQL.Field UserID;
            public MSSQL.Field Name;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Content;
            public MSSQL.Field Descption;
            public MSSQL.Field TypeName;

            public T_Model()
            {
                TableName = "T_Model";

                id = new MSSQL.Field(this, "id", "id", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.NVarChar, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.NVarChar, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.NVarChar, false);
                Descption = new MSSQL.Field(this, "Descption", "Descption", SqlDbType.NVarChar, false);
                TypeName = new MSSQL.Field(this, "TypeName", "TypeName", SqlDbType.NVarChar, false);
            }
        }

        public class T_News : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field TypeID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Title;
            public MSSQL.Field ImageUrl;
            public MSSQL.Field isShow;
            public MSSQL.Field isHasImage;
            public MSSQL.Field isCanComments;
            public MSSQL.Field isCommend;
            public MSSQL.Field isHot;
            public MSSQL.Field ReadCount;
            public MSSQL.Field Content;
            public MSSQL.Field IsusesId;
            public MSSQL.Field IsTop;
            public MSSQL.Field TopTime;

            public T_News()
            {
                TableName = "T_News";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                TypeID = new MSSQL.Field(this, "TypeID", "TypeID", SqlDbType.Int, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                ImageUrl = new MSSQL.Field(this, "ImageUrl", "ImageUrl", SqlDbType.VarChar, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
                isHasImage = new MSSQL.Field(this, "isHasImage", "isHasImage", SqlDbType.Bit, false);
                isCanComments = new MSSQL.Field(this, "isCanComments", "isCanComments", SqlDbType.Bit, false);
                isCommend = new MSSQL.Field(this, "isCommend", "isCommend", SqlDbType.Bit, false);
                isHot = new MSSQL.Field(this, "isHot", "isHot", SqlDbType.Bit, false);
                ReadCount = new MSSQL.Field(this, "ReadCount", "ReadCount", SqlDbType.BigInt, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                IsusesId = new MSSQL.Field(this, "IsusesId", "IsusesId", SqlDbType.Int, false);
                IsTop = new MSSQL.Field(this, "IsTop", "IsTop", SqlDbType.Bit, false);
                TopTime = new MSSQL.Field(this, "TopTime", "TopTime", SqlDbType.DateTime, false);
            }
        }

        public class T_NewsComments : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field NewsID;
            public MSSQL.Field DateTime;
            public MSSQL.Field CommentserID;
            public MSSQL.Field CommentserName;
            public MSSQL.Field isShow;
            public MSSQL.Field Content;

            public T_NewsComments()
            {
                TableName = "T_NewsComments";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                NewsID = new MSSQL.Field(this, "NewsID", "NewsID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                CommentserID = new MSSQL.Field(this, "CommentserID", "CommentserID", SqlDbType.BigInt, false);
                CommentserName = new MSSQL.Field(this, "CommentserName", "CommentserName", SqlDbType.VarChar, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
            }
        }

        public class T_NewsPaperIsuses : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field StartTime;
            public MSSQL.Field EndTime;
            public MSSQL.Field NPMessage;

            public T_NewsPaperIsuses()
            {
                TableName = "T_NewsPaperIsuses";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                StartTime = new MSSQL.Field(this, "StartTime", "StartTime", SqlDbType.DateTime, false);
                EndTime = new MSSQL.Field(this, "EndTime", "EndTime", SqlDbType.DateTime, false);
                NPMessage = new MSSQL.Field(this, "NPMessage", "NPMessage", SqlDbType.VarChar, false);
            }
        }

        public class T_NewSpecial : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field TypeID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Title;
            public MSSQL.Field Content;
            public MSSQL.Field TopTime;
            public MSSQL.Field IsTop;

            public T_NewSpecial()
            {
                TableName = "T_NewSpecial";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.Int, false);
                TypeID = new MSSQL.Field(this, "TypeID", "TypeID", SqlDbType.Int, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                TopTime = new MSSQL.Field(this, "TopTime", "TopTime", SqlDbType.DateTime, false);
                IsTop = new MSSQL.Field(this, "IsTop", "IsTop", SqlDbType.Bit, false);
            }
        }

        public class T_NewsTypes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field ParentID;
            public MSSQL.Field Name;
            public MSSQL.Field IsShow;
            public MSSQL.Field IsSystem;

            public T_NewsTypes()
            {
                TableName = "T_NewsTypes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                ParentID = new MSSQL.Field(this, "ParentID", "ParentID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                IsShow = new MSSQL.Field(this, "IsShow", "IsShow", SqlDbType.Bit, false);
                IsSystem = new MSSQL.Field(this, "IsSystem", "IsSystem", SqlDbType.Bit, false);
            }
        }

        public class T_NotificationTypes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Code;
            public MSSQL.Field Description;
            public MSSQL.Field TemplateEmail;
            public MSSQL.Field TemplateStationSMS;
            public MSSQL.Field TemplateSMS;

            public T_NotificationTypes()
            {
                TableName = "T_NotificationTypes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Code = new MSSQL.Field(this, "Code", "Code", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                TemplateEmail = new MSSQL.Field(this, "TemplateEmail", "TemplateEmail", SqlDbType.VarChar, false);
                TemplateStationSMS = new MSSQL.Field(this, "TemplateStationSMS", "TemplateStationSMS", SqlDbType.VarChar, false);
                TemplateSMS = new MSSQL.Field(this, "TemplateSMS", "TemplateSMS", SqlDbType.VarChar, false);
            }
        }

        public class T_NumberGamePassStatistics : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Money;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field NumberCount;
            public MSSQL.Field Win1;
            public MSSQL.Field Win2;
            public MSSQL.Field Win3;
            public MSSQL.Field Win4;
            public MSSQL.Field Win5;
            public MSSQL.Field Win6;
            public MSSQL.Field Win7;
            public MSSQL.Field Win8;
            public MSSQL.Field WinDescription;
            public MSSQL.Field Datetime;
            public MSSQL.Field WinMoney;
            public MSSQL.Field IssueID;
            public MSSQL.Field ShowLotteryNumber;
            public MSSQL.Field AllTrueNumber;
            public MSSQL.Field ErrorOneNumber;
            public MSSQL.Field CorrectDate;
            public MSSQL.Field Multiple;
            public MSSQL.Field SumWin1;
            public MSSQL.Field SumWin2;
            public MSSQL.Field SumWin3;
            public MSSQL.Field SumWin4;
            public MSSQL.Field SumWin5;
            public MSSQL.Field SumWin6;
            public MSSQL.Field SumWin7;
            public MSSQL.Field SumWin8;
            public MSSQL.Field OldDistribution;
            public MSSQL.Field WinDistribution;
            public MSSQL.Field Number3Count;
            public MSSQL.Field Number1Count;
            public MSSQL.Field Number0Count;
            public MSSQL.Field WinLotteryNumber;
            public MSSQL.Field IsUpdate;

            public T_NumberGamePassStatistics()
            {
                TableName = "T_NumberGamePassStatistics";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                NumberCount = new MSSQL.Field(this, "NumberCount", "NumberCount", SqlDbType.Int, false);
                Win1 = new MSSQL.Field(this, "Win1", "Win1", SqlDbType.Int, false);
                Win2 = new MSSQL.Field(this, "Win2", "Win2", SqlDbType.Int, false);
                Win3 = new MSSQL.Field(this, "Win3", "Win3", SqlDbType.Int, false);
                Win4 = new MSSQL.Field(this, "Win4", "Win4", SqlDbType.Int, false);
                Win5 = new MSSQL.Field(this, "Win5", "Win5", SqlDbType.Int, false);
                Win6 = new MSSQL.Field(this, "Win6", "Win6", SqlDbType.Int, false);
                Win7 = new MSSQL.Field(this, "Win7", "Win7", SqlDbType.Int, false);
                Win8 = new MSSQL.Field(this, "Win8", "Win8", SqlDbType.Int, false);
                WinDescription = new MSSQL.Field(this, "WinDescription", "WinDescription", SqlDbType.VarChar, false);
                Datetime = new MSSQL.Field(this, "Datetime", "Datetime", SqlDbType.DateTime, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                IssueID = new MSSQL.Field(this, "IssueID", "IssueID", SqlDbType.BigInt, false);
                ShowLotteryNumber = new MSSQL.Field(this, "ShowLotteryNumber", "ShowLotteryNumber", SqlDbType.VarChar, false);
                AllTrueNumber = new MSSQL.Field(this, "AllTrueNumber", "AllTrueNumber", SqlDbType.Int, false);
                ErrorOneNumber = new MSSQL.Field(this, "ErrorOneNumber", "ErrorOneNumber", SqlDbType.Int, false);
                CorrectDate = new MSSQL.Field(this, "CorrectDate", "CorrectDate", SqlDbType.Int, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                SumWin1 = new MSSQL.Field(this, "SumWin1", "SumWin1", SqlDbType.Money, false);
                SumWin2 = new MSSQL.Field(this, "SumWin2", "SumWin2", SqlDbType.Money, false);
                SumWin3 = new MSSQL.Field(this, "SumWin3", "SumWin3", SqlDbType.Money, false);
                SumWin4 = new MSSQL.Field(this, "SumWin4", "SumWin4", SqlDbType.Money, false);
                SumWin5 = new MSSQL.Field(this, "SumWin5", "SumWin5", SqlDbType.Money, false);
                SumWin6 = new MSSQL.Field(this, "SumWin6", "SumWin6", SqlDbType.Money, false);
                SumWin7 = new MSSQL.Field(this, "SumWin7", "SumWin7", SqlDbType.Money, false);
                SumWin8 = new MSSQL.Field(this, "SumWin8", "SumWin8", SqlDbType.Money, false);
                OldDistribution = new MSSQL.Field(this, "OldDistribution", "OldDistribution", SqlDbType.VarChar, false);
                WinDistribution = new MSSQL.Field(this, "WinDistribution", "WinDistribution", SqlDbType.VarChar, false);
                Number3Count = new MSSQL.Field(this, "Number3Count", "Number3Count", SqlDbType.Int, false);
                Number1Count = new MSSQL.Field(this, "Number1Count", "Number1Count", SqlDbType.Int, false);
                Number0Count = new MSSQL.Field(this, "Number0Count", "Number0Count", SqlDbType.Int, false);
                WinLotteryNumber = new MSSQL.Field(this, "WinLotteryNumber", "WinLotteryNumber", SqlDbType.VarChar, false);
                IsUpdate = new MSSQL.Field(this, "IsUpdate", "IsUpdate", SqlDbType.Bit, false);
            }
        }

        public class T_Options : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Key;
            public MSSQL.Field Value;
            public MSSQL.Field Description;

            public T_Options()
            {
                TableName = "T_Options";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, false);
                Key = new MSSQL.Field(this, "Key", "Key", SqlDbType.VarChar, false);
                Value = new MSSQL.Field(this, "Value", "Value", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
            }
        }

        public class T_PageResources : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field PageName;
            public MSSQL.Field SitePath;
            public MSSQL.Field ResourceName;
            public MSSQL.Field ResourceUrl;

            public T_PageResources()
            {
                TableName = "T_PageResources";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                PageName = new MSSQL.Field(this, "PageName", "PageName", SqlDbType.VarChar, false);
                SitePath = new MSSQL.Field(this, "SitePath", "SitePath", SqlDbType.VarChar, false);
                ResourceName = new MSSQL.Field(this, "ResourceName", "ResourceName", SqlDbType.VarChar, false);
                ResourceUrl = new MSSQL.Field(this, "ResourceUrl", "ResourceUrl", SqlDbType.VarChar, false);
            }
        }

        public class T_PassRate : MSSQL.TableBase
        {
            public MSSQL.Field Id;
            public MSSQL.Field Day;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field MatchDate;
            public MSSQL.Field Game;
            public MSSQL.Field MainTeam;
            public MSSQL.Field GuestTeam;
            public MSSQL.Field MatchID;
            public MSSQL.Field Win;
            public MSSQL.Field WinDirection;
            public MSSQL.Field Flat;
            public MSSQL.Field FlatDirection;
            public MSSQL.Field Lose;
            public MSSQL.Field LoseDirection;
            public MSSQL.Field S10;
            public MSSQL.Field S10Direction;
            public MSSQL.Field S20;
            public MSSQL.Field S20Direction;
            public MSSQL.Field S21;
            public MSSQL.Field S21Direction;
            public MSSQL.Field S30;
            public MSSQL.Field S30Direction;
            public MSSQL.Field S31;
            public MSSQL.Field S31Direction;
            public MSSQL.Field S32;
            public MSSQL.Field S32Direction;
            public MSSQL.Field S40;
            public MSSQL.Field S40Direction;
            public MSSQL.Field S41;
            public MSSQL.Field S41Direction;
            public MSSQL.Field S42;
            public MSSQL.Field S42Direction;
            public MSSQL.Field S50;
            public MSSQL.Field S50Direction;
            public MSSQL.Field S51;
            public MSSQL.Field S51Direction;
            public MSSQL.Field S52;
            public MSSQL.Field S52Direction;
            public MSSQL.Field Sother;
            public MSSQL.Field SotherDirection;
            public MSSQL.Field P00;
            public MSSQL.Field P00Direction;
            public MSSQL.Field P11;
            public MSSQL.Field P11Direction;
            public MSSQL.Field P22;
            public MSSQL.Field P22Direction;
            public MSSQL.Field P33;
            public MSSQL.Field P33Direction;
            public MSSQL.Field Pother;
            public MSSQL.Field PotherDirection;
            public MSSQL.Field F01;
            public MSSQL.Field F01Direction;
            public MSSQL.Field F02;
            public MSSQL.Field F02Direction;
            public MSSQL.Field F12;
            public MSSQL.Field F12Direction;
            public MSSQL.Field F03;
            public MSSQL.Field F03Direction;
            public MSSQL.Field F13;
            public MSSQL.Field F13Direction;
            public MSSQL.Field F23;
            public MSSQL.Field F23Direction;
            public MSSQL.Field F04;
            public MSSQL.Field F04Direction;
            public MSSQL.Field F14;
            public MSSQL.Field F14Direction;
            public MSSQL.Field F24;
            public MSSQL.Field F24Direction;
            public MSSQL.Field F05;
            public MSSQL.Field F05Direction;
            public MSSQL.Field F15;
            public MSSQL.Field F15Direction;
            public MSSQL.Field F25;
            public MSSQL.Field F25Direction;
            public MSSQL.Field Fother;
            public MSSQL.Field FotherDirection;
            public MSSQL.Field In0;
            public MSSQL.Field In0Direction;
            public MSSQL.Field In1;
            public MSSQL.Field In1Direction;
            public MSSQL.Field In2;
            public MSSQL.Field In2Direction;
            public MSSQL.Field In3;
            public MSSQL.Field In3Direction;
            public MSSQL.Field In4;
            public MSSQL.Field In4Direction;
            public MSSQL.Field In5;
            public MSSQL.Field In5Direction;
            public MSSQL.Field In6;
            public MSSQL.Field In6Direction;
            public MSSQL.Field In7;
            public MSSQL.Field In7Direction;
            public MSSQL.Field SS;
            public MSSQL.Field SSDirection;
            public MSSQL.Field SP;
            public MSSQL.Field SPDirection;
            public MSSQL.Field SF;
            public MSSQL.Field SFDirection;
            public MSSQL.Field PS;
            public MSSQL.Field PSDirection;
            public MSSQL.Field PP;
            public MSSQL.Field PPDirection;
            public MSSQL.Field PF;
            public MSSQL.Field PFDirection;
            public MSSQL.Field FS;
            public MSSQL.Field FSDirection;
            public MSSQL.Field FP;
            public MSSQL.Field FPDirection;
            public MSSQL.Field FF;
            public MSSQL.Field FFDirection;
            public MSSQL.Field MainLoseball;
            public MSSQL.Field StopSellTime;
            public MSSQL.Field EuropeSSP;
            public MSSQL.Field EuropePSP;
            public MSSQL.Field EuropeFSP;
            public MSSQL.Field InforMationID;
            public MSSQL.Field InforMationMainTeamID;
            public MSSQL.Field InforMationGuestTeamID;
            public MSSQL.Field InforMationMatchTypeID;
            public MSSQL.Field GameColor;
            public MSSQL.Field SNumberCount;
            public MSSQL.Field PNumberCount;
            public MSSQL.Field FNumberCount;
            public MSSQL.Field IsHhad;
            public MSSQL.Field IsCrs;
            public MSSQL.Field IsTtg;
            public MSSQL.Field IsHafu;
            public MSSQL.Field State;
            public MSSQL.Field IsSPF;
            public MSSQL.Field SPFWin;
            public MSSQL.Field SPFWinDirection;
            public MSSQL.Field SPFFlat;
            public MSSQL.Field SPFFlatDirection;
            public MSSQL.Field SPFLose;
            public MSSQL.Field SPFLoseDirection;

            public T_PassRate()
            {
                TableName = "T_PassRate";

                Id = new MSSQL.Field(this, "Id", "Id", SqlDbType.Int, true);
                Day = new MSSQL.Field(this, "Day", "Day", SqlDbType.VarChar, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.VarChar, false);
                MatchDate = new MSSQL.Field(this, "MatchDate", "MatchDate", SqlDbType.DateTime, false);
                Game = new MSSQL.Field(this, "Game", "Game", SqlDbType.VarChar, false);
                MainTeam = new MSSQL.Field(this, "MainTeam", "MainTeam", SqlDbType.VarChar, false);
                GuestTeam = new MSSQL.Field(this, "GuestTeam", "GuestTeam", SqlDbType.VarChar, false);
                MatchID = new MSSQL.Field(this, "MatchID", "MatchID", SqlDbType.BigInt, false);
                Win = new MSSQL.Field(this, "Win", "Win", SqlDbType.Float, false);
                WinDirection = new MSSQL.Field(this, "WinDirection", "WinDirection", SqlDbType.VarChar, false);
                Flat = new MSSQL.Field(this, "Flat", "Flat", SqlDbType.Float, false);
                FlatDirection = new MSSQL.Field(this, "FlatDirection", "FlatDirection", SqlDbType.VarChar, false);
                Lose = new MSSQL.Field(this, "Lose", "Lose", SqlDbType.Float, false);
                LoseDirection = new MSSQL.Field(this, "LoseDirection", "LoseDirection", SqlDbType.VarChar, false);
                S10 = new MSSQL.Field(this, "S10", "S10", SqlDbType.Float, false);
                S10Direction = new MSSQL.Field(this, "S10Direction", "S10Direction", SqlDbType.VarChar, false);
                S20 = new MSSQL.Field(this, "S20", "S20", SqlDbType.Float, false);
                S20Direction = new MSSQL.Field(this, "S20Direction", "S20Direction", SqlDbType.VarChar, false);
                S21 = new MSSQL.Field(this, "S21", "S21", SqlDbType.Float, false);
                S21Direction = new MSSQL.Field(this, "S21Direction", "S21Direction", SqlDbType.VarChar, false);
                S30 = new MSSQL.Field(this, "S30", "S30", SqlDbType.Float, false);
                S30Direction = new MSSQL.Field(this, "S30Direction", "S30Direction", SqlDbType.VarChar, false);
                S31 = new MSSQL.Field(this, "S31", "S31", SqlDbType.Float, false);
                S31Direction = new MSSQL.Field(this, "S31Direction", "S31Direction", SqlDbType.VarChar, false);
                S32 = new MSSQL.Field(this, "S32", "S32", SqlDbType.Float, false);
                S32Direction = new MSSQL.Field(this, "S32Direction", "S32Direction", SqlDbType.VarChar, false);
                S40 = new MSSQL.Field(this, "S40", "S40", SqlDbType.Float, false);
                S40Direction = new MSSQL.Field(this, "S40Direction", "S40Direction", SqlDbType.VarChar, false);
                S41 = new MSSQL.Field(this, "S41", "S41", SqlDbType.Float, false);
                S41Direction = new MSSQL.Field(this, "S41Direction", "S41Direction", SqlDbType.VarChar, false);
                S42 = new MSSQL.Field(this, "S42", "S42", SqlDbType.Float, false);
                S42Direction = new MSSQL.Field(this, "S42Direction", "S42Direction", SqlDbType.VarChar, false);
                S50 = new MSSQL.Field(this, "S50", "S50", SqlDbType.Float, false);
                S50Direction = new MSSQL.Field(this, "S50Direction", "S50Direction", SqlDbType.VarChar, false);
                S51 = new MSSQL.Field(this, "S51", "S51", SqlDbType.Float, false);
                S51Direction = new MSSQL.Field(this, "S51Direction", "S51Direction", SqlDbType.VarChar, false);
                S52 = new MSSQL.Field(this, "S52", "S52", SqlDbType.Float, false);
                S52Direction = new MSSQL.Field(this, "S52Direction", "S52Direction", SqlDbType.VarChar, false);
                Sother = new MSSQL.Field(this, "Sother", "Sother", SqlDbType.Float, false);
                SotherDirection = new MSSQL.Field(this, "SotherDirection", "SotherDirection", SqlDbType.VarChar, false);
                P00 = new MSSQL.Field(this, "P00", "P00", SqlDbType.Float, false);
                P00Direction = new MSSQL.Field(this, "P00Direction", "P00Direction", SqlDbType.VarChar, false);
                P11 = new MSSQL.Field(this, "P11", "P11", SqlDbType.Float, false);
                P11Direction = new MSSQL.Field(this, "P11Direction", "P11Direction", SqlDbType.VarChar, false);
                P22 = new MSSQL.Field(this, "P22", "P22", SqlDbType.Float, false);
                P22Direction = new MSSQL.Field(this, "P22Direction", "P22Direction", SqlDbType.VarChar, false);
                P33 = new MSSQL.Field(this, "P33", "P33", SqlDbType.Float, false);
                P33Direction = new MSSQL.Field(this, "P33Direction", "P33Direction", SqlDbType.VarChar, false);
                Pother = new MSSQL.Field(this, "Pother", "Pother", SqlDbType.Float, false);
                PotherDirection = new MSSQL.Field(this, "PotherDirection", "PotherDirection", SqlDbType.VarChar, false);
                F01 = new MSSQL.Field(this, "F01", "F01", SqlDbType.Float, false);
                F01Direction = new MSSQL.Field(this, "F01Direction", "F01Direction", SqlDbType.VarChar, false);
                F02 = new MSSQL.Field(this, "F02", "F02", SqlDbType.Float, false);
                F02Direction = new MSSQL.Field(this, "F02Direction", "F02Direction", SqlDbType.VarChar, false);
                F12 = new MSSQL.Field(this, "F12", "F12", SqlDbType.Float, false);
                F12Direction = new MSSQL.Field(this, "F12Direction", "F12Direction", SqlDbType.VarChar, false);
                F03 = new MSSQL.Field(this, "F03", "F03", SqlDbType.Float, false);
                F03Direction = new MSSQL.Field(this, "F03Direction", "F03Direction", SqlDbType.VarChar, false);
                F13 = new MSSQL.Field(this, "F13", "F13", SqlDbType.Float, false);
                F13Direction = new MSSQL.Field(this, "F13Direction", "F13Direction", SqlDbType.VarChar, false);
                F23 = new MSSQL.Field(this, "F23", "F23", SqlDbType.Float, false);
                F23Direction = new MSSQL.Field(this, "F23Direction", "F23Direction", SqlDbType.VarChar, false);
                F04 = new MSSQL.Field(this, "F04", "F04", SqlDbType.Float, false);
                F04Direction = new MSSQL.Field(this, "F04Direction", "F04Direction", SqlDbType.VarChar, false);
                F14 = new MSSQL.Field(this, "F14", "F14", SqlDbType.Float, false);
                F14Direction = new MSSQL.Field(this, "F14Direction", "F14Direction", SqlDbType.VarChar, false);
                F24 = new MSSQL.Field(this, "F24", "F24", SqlDbType.Float, false);
                F24Direction = new MSSQL.Field(this, "F24Direction", "F24Direction", SqlDbType.VarChar, false);
                F05 = new MSSQL.Field(this, "F05", "F05", SqlDbType.Float, false);
                F05Direction = new MSSQL.Field(this, "F05Direction", "F05Direction", SqlDbType.VarChar, false);
                F15 = new MSSQL.Field(this, "F15", "F15", SqlDbType.Float, false);
                F15Direction = new MSSQL.Field(this, "F15Direction", "F15Direction", SqlDbType.VarChar, false);
                F25 = new MSSQL.Field(this, "F25", "F25", SqlDbType.Float, false);
                F25Direction = new MSSQL.Field(this, "F25Direction", "F25Direction", SqlDbType.VarChar, false);
                Fother = new MSSQL.Field(this, "Fother", "Fother", SqlDbType.Float, false);
                FotherDirection = new MSSQL.Field(this, "FotherDirection", "FotherDirection", SqlDbType.VarChar, false);
                In0 = new MSSQL.Field(this, "In0", "In0", SqlDbType.Float, false);
                In0Direction = new MSSQL.Field(this, "In0Direction", "In0Direction", SqlDbType.VarChar, false);
                In1 = new MSSQL.Field(this, "In1", "In1", SqlDbType.Float, false);
                In1Direction = new MSSQL.Field(this, "In1Direction", "In1Direction", SqlDbType.VarChar, false);
                In2 = new MSSQL.Field(this, "In2", "In2", SqlDbType.Float, false);
                In2Direction = new MSSQL.Field(this, "In2Direction", "In2Direction", SqlDbType.VarChar, false);
                In3 = new MSSQL.Field(this, "In3", "In3", SqlDbType.Float, false);
                In3Direction = new MSSQL.Field(this, "In3Direction", "In3Direction", SqlDbType.VarChar, false);
                In4 = new MSSQL.Field(this, "In4", "In4", SqlDbType.Float, false);
                In4Direction = new MSSQL.Field(this, "In4Direction", "In4Direction", SqlDbType.VarChar, false);
                In5 = new MSSQL.Field(this, "In5", "In5", SqlDbType.Float, false);
                In5Direction = new MSSQL.Field(this, "In5Direction", "In5Direction", SqlDbType.VarChar, false);
                In6 = new MSSQL.Field(this, "In6", "In6", SqlDbType.Float, false);
                In6Direction = new MSSQL.Field(this, "In6Direction", "In6Direction", SqlDbType.VarChar, false);
                In7 = new MSSQL.Field(this, "In7", "In7", SqlDbType.Float, false);
                In7Direction = new MSSQL.Field(this, "In7Direction", "In7Direction", SqlDbType.VarChar, false);
                SS = new MSSQL.Field(this, "SS", "SS", SqlDbType.Float, false);
                SSDirection = new MSSQL.Field(this, "SSDirection", "SSDirection", SqlDbType.VarChar, false);
                SP = new MSSQL.Field(this, "SP", "SP", SqlDbType.Float, false);
                SPDirection = new MSSQL.Field(this, "SPDirection", "SPDirection", SqlDbType.VarChar, false);
                SF = new MSSQL.Field(this, "SF", "SF", SqlDbType.Float, false);
                SFDirection = new MSSQL.Field(this, "SFDirection", "SFDirection", SqlDbType.VarChar, false);
                PS = new MSSQL.Field(this, "PS", "PS", SqlDbType.Float, false);
                PSDirection = new MSSQL.Field(this, "PSDirection", "PSDirection", SqlDbType.VarChar, false);
                PP = new MSSQL.Field(this, "PP", "PP", SqlDbType.Float, false);
                PPDirection = new MSSQL.Field(this, "PPDirection", "PPDirection", SqlDbType.VarChar, false);
                PF = new MSSQL.Field(this, "PF", "PF", SqlDbType.Float, false);
                PFDirection = new MSSQL.Field(this, "PFDirection", "PFDirection", SqlDbType.VarChar, false);
                FS = new MSSQL.Field(this, "FS", "FS", SqlDbType.Float, false);
                FSDirection = new MSSQL.Field(this, "FSDirection", "FSDirection", SqlDbType.VarChar, false);
                FP = new MSSQL.Field(this, "FP", "FP", SqlDbType.Float, false);
                FPDirection = new MSSQL.Field(this, "FPDirection", "FPDirection", SqlDbType.VarChar, false);
                FF = new MSSQL.Field(this, "FF", "FF", SqlDbType.Float, false);
                FFDirection = new MSSQL.Field(this, "FFDirection", "FFDirection", SqlDbType.VarChar, false);
                MainLoseball = new MSSQL.Field(this, "MainLoseball", "MainLoseball", SqlDbType.Int, false);
                StopSellTime = new MSSQL.Field(this, "StopSellTime", "StopSellTime", SqlDbType.DateTime, false);
                EuropeSSP = new MSSQL.Field(this, "EuropeSSP", "EuropeSSP", SqlDbType.VarChar, false);
                EuropePSP = new MSSQL.Field(this, "EuropePSP", "EuropePSP", SqlDbType.VarChar, false);
                EuropeFSP = new MSSQL.Field(this, "EuropeFSP", "EuropeFSP", SqlDbType.VarChar, false);
                InforMationID = new MSSQL.Field(this, "InforMationID", "InforMationID", SqlDbType.BigInt, false);
                InforMationMainTeamID = new MSSQL.Field(this, "InforMationMainTeamID", "InforMationMainTeamID", SqlDbType.BigInt, false);
                InforMationGuestTeamID = new MSSQL.Field(this, "InforMationGuestTeamID", "InforMationGuestTeamID", SqlDbType.BigInt, false);
                InforMationMatchTypeID = new MSSQL.Field(this, "InforMationMatchTypeID", "InforMationMatchTypeID", SqlDbType.BigInt, false);
                GameColor = new MSSQL.Field(this, "GameColor", "GameColor", SqlDbType.VarChar, false);
                SNumberCount = new MSSQL.Field(this, "SNumberCount", "SNumberCount", SqlDbType.Int, false);
                PNumberCount = new MSSQL.Field(this, "PNumberCount", "PNumberCount", SqlDbType.Int, false);
                FNumberCount = new MSSQL.Field(this, "FNumberCount", "FNumberCount", SqlDbType.Int, false);
                IsHhad = new MSSQL.Field(this, "IsHhad", "IsHhad", SqlDbType.Bit, false);
                IsCrs = new MSSQL.Field(this, "IsCrs", "IsCrs", SqlDbType.Bit, false);
                IsTtg = new MSSQL.Field(this, "IsTtg", "IsTtg", SqlDbType.Bit, false);
                IsHafu = new MSSQL.Field(this, "IsHafu", "IsHafu", SqlDbType.Bit, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.Bit, false);
                IsSPF = new MSSQL.Field(this, "IsSPF", "IsSPF", SqlDbType.Bit, false);
                SPFWin = new MSSQL.Field(this, "SPFWin", "SPFWin", SqlDbType.Float, false);
                SPFWinDirection = new MSSQL.Field(this, "SPFWinDirection", "SPFWinDirection", SqlDbType.VarChar, false);
                SPFFlat = new MSSQL.Field(this, "SPFFlat", "SPFFlat", SqlDbType.Float, false);
                SPFFlatDirection = new MSSQL.Field(this, "SPFFlatDirection", "SPFFlatDirection", SqlDbType.VarChar, false);
                SPFLose = new MSSQL.Field(this, "SPFLose", "SPFLose", SqlDbType.Float, false);
                SPFLoseDirection = new MSSQL.Field(this, "SPFLoseDirection", "SPFLoseDirection", SqlDbType.VarChar, false);
            }
        }

        public class T_PassRateBasket : MSSQL.TableBase
        {
            public MSSQL.Field Id;
            public MSSQL.Field Day;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field MatchDate;
            public MSSQL.Field Game;
            public MSSQL.Field MainTeam;
            public MSSQL.Field GuestTeam;
            public MSSQL.Field MatchID;
            public MSSQL.Field MainLose;
            public MSSQL.Field MainLoseDirection;
            public MSSQL.Field MainWin;
            public MSSQL.Field MainWinDirection;
            public MSSQL.Field LetMainLose;
            public MSSQL.Field LetMainLoseDirection;
            public MSSQL.Field LetMainWin;
            public MSSQL.Field LetMainWinDirection;
            public MSSQL.Field DifferGuest1_5;
            public MSSQL.Field Guest1_5Direction;
            public MSSQL.Field DifferGuest6_10;
            public MSSQL.Field Guest6_10Direction;
            public MSSQL.Field DifferGuest11_15;
            public MSSQL.Field Guest11_15Direction;
            public MSSQL.Field DifferGuest16_20;
            public MSSQL.Field Guest16_20Direction;
            public MSSQL.Field DifferGuest21_25;
            public MSSQL.Field Guest21_25Direction;
            public MSSQL.Field DifferGuest26;
            public MSSQL.Field Guest26Direction;
            public MSSQL.Field DifferMain1_5;
            public MSSQL.Field Main1_5Direction;
            public MSSQL.Field DifferMain6_10;
            public MSSQL.Field Main6_10Direction;
            public MSSQL.Field DifferMain11_15;
            public MSSQL.Field Main11_15Direction;
            public MSSQL.Field DifferMain16_20;
            public MSSQL.Field Main16_20Direction;
            public MSSQL.Field DifferMain21_25;
            public MSSQL.Field Main21_25Direction;
            public MSSQL.Field DifferMain26;
            public MSSQL.Field Main26Direction;
            public MSSQL.Field Big;
            public MSSQL.Field BigDirection;
            public MSSQL.Field Small;
            public MSSQL.Field SmallDirection;
            public MSSQL.Field StopSellTime;
            public MSSQL.Field LetScore;
            public MSSQL.Field BigSmallscore;
            public MSSQL.Field InforMationID;
            public MSSQL.Field IsWnm;
            public MSSQL.Field IsMnl;
            public MSSQL.Field IsHilo;
            public MSSQL.Field IsHdc;
            public MSSQL.Field State;

            public T_PassRateBasket()
            {
                TableName = "T_PassRateBasket";

                Id = new MSSQL.Field(this, "Id", "Id", SqlDbType.Int, true);
                Day = new MSSQL.Field(this, "Day", "Day", SqlDbType.VarChar, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.VarChar, false);
                MatchDate = new MSSQL.Field(this, "MatchDate", "MatchDate", SqlDbType.DateTime, false);
                Game = new MSSQL.Field(this, "Game", "Game", SqlDbType.VarChar, false);
                MainTeam = new MSSQL.Field(this, "MainTeam", "MainTeam", SqlDbType.VarChar, false);
                GuestTeam = new MSSQL.Field(this, "GuestTeam", "GuestTeam", SqlDbType.VarChar, false);
                MatchID = new MSSQL.Field(this, "MatchID", "MatchID", SqlDbType.BigInt, false);
                MainLose = new MSSQL.Field(this, "MainLose", "MainLose", SqlDbType.Float, false);
                MainLoseDirection = new MSSQL.Field(this, "MainLoseDirection", "MainLoseDirection", SqlDbType.VarChar, false);
                MainWin = new MSSQL.Field(this, "MainWin", "MainWin", SqlDbType.Float, false);
                MainWinDirection = new MSSQL.Field(this, "MainWinDirection", "MainWinDirection", SqlDbType.VarChar, false);
                LetMainLose = new MSSQL.Field(this, "LetMainLose", "LetMainLose", SqlDbType.Float, false);
                LetMainLoseDirection = new MSSQL.Field(this, "LetMainLoseDirection", "LetMainLoseDirection", SqlDbType.VarChar, false);
                LetMainWin = new MSSQL.Field(this, "LetMainWin", "LetMainWin", SqlDbType.Float, false);
                LetMainWinDirection = new MSSQL.Field(this, "LetMainWinDirection", "LetMainWinDirection", SqlDbType.VarChar, false);
                DifferGuest1_5 = new MSSQL.Field(this, "DifferGuest1_5", "DifferGuest1_5", SqlDbType.Float, false);
                Guest1_5Direction = new MSSQL.Field(this, "Guest1_5Direction", "Guest1_5Direction", SqlDbType.VarChar, false);
                DifferGuest6_10 = new MSSQL.Field(this, "DifferGuest6_10", "DifferGuest6_10", SqlDbType.Float, false);
                Guest6_10Direction = new MSSQL.Field(this, "Guest6_10Direction", "Guest6_10Direction", SqlDbType.VarChar, false);
                DifferGuest11_15 = new MSSQL.Field(this, "DifferGuest11_15", "DifferGuest11_15", SqlDbType.Float, false);
                Guest11_15Direction = new MSSQL.Field(this, "Guest11_15Direction", "Guest11_15Direction", SqlDbType.VarChar, false);
                DifferGuest16_20 = new MSSQL.Field(this, "DifferGuest16_20", "DifferGuest16_20", SqlDbType.Float, false);
                Guest16_20Direction = new MSSQL.Field(this, "Guest16_20Direction", "Guest16_20Direction", SqlDbType.VarChar, false);
                DifferGuest21_25 = new MSSQL.Field(this, "DifferGuest21_25", "DifferGuest21_25", SqlDbType.Float, false);
                Guest21_25Direction = new MSSQL.Field(this, "Guest21_25Direction", "Guest21_25Direction", SqlDbType.VarChar, false);
                DifferGuest26 = new MSSQL.Field(this, "DifferGuest26", "DifferGuest26", SqlDbType.Float, false);
                Guest26Direction = new MSSQL.Field(this, "Guest26Direction", "Guest26Direction", SqlDbType.VarChar, false);
                DifferMain1_5 = new MSSQL.Field(this, "DifferMain1_5", "DifferMain1_5", SqlDbType.Float, false);
                Main1_5Direction = new MSSQL.Field(this, "Main1_5Direction", "Main1_5Direction", SqlDbType.VarChar, false);
                DifferMain6_10 = new MSSQL.Field(this, "DifferMain6_10", "DifferMain6_10", SqlDbType.Float, false);
                Main6_10Direction = new MSSQL.Field(this, "Main6_10Direction", "Main6_10Direction", SqlDbType.VarChar, false);
                DifferMain11_15 = new MSSQL.Field(this, "DifferMain11_15", "DifferMain11_15", SqlDbType.Float, false);
                Main11_15Direction = new MSSQL.Field(this, "Main11_15Direction", "Main11_15Direction", SqlDbType.VarChar, false);
                DifferMain16_20 = new MSSQL.Field(this, "DifferMain16_20", "DifferMain16_20", SqlDbType.Float, false);
                Main16_20Direction = new MSSQL.Field(this, "Main16_20Direction", "Main16_20Direction", SqlDbType.VarChar, false);
                DifferMain21_25 = new MSSQL.Field(this, "DifferMain21_25", "DifferMain21_25", SqlDbType.Float, false);
                Main21_25Direction = new MSSQL.Field(this, "Main21_25Direction", "Main21_25Direction", SqlDbType.VarChar, false);
                DifferMain26 = new MSSQL.Field(this, "DifferMain26", "DifferMain26", SqlDbType.Float, false);
                Main26Direction = new MSSQL.Field(this, "Main26Direction", "Main26Direction", SqlDbType.VarChar, false);
                Big = new MSSQL.Field(this, "Big", "Big", SqlDbType.Float, false);
                BigDirection = new MSSQL.Field(this, "BigDirection", "BigDirection", SqlDbType.VarChar, false);
                Small = new MSSQL.Field(this, "Small", "Small", SqlDbType.Float, false);
                SmallDirection = new MSSQL.Field(this, "SmallDirection", "SmallDirection", SqlDbType.VarChar, false);
                StopSellTime = new MSSQL.Field(this, "StopSellTime", "StopSellTime", SqlDbType.DateTime, false);
                LetScore = new MSSQL.Field(this, "LetScore", "LetScore", SqlDbType.Float, false);
                BigSmallscore = new MSSQL.Field(this, "BigSmallscore", "BigSmallscore", SqlDbType.Float, false);
                InforMationID = new MSSQL.Field(this, "InforMationID", "InforMationID", SqlDbType.BigInt, false);
                IsWnm = new MSSQL.Field(this, "IsWnm", "IsWnm", SqlDbType.Bit, false);
                IsMnl = new MSSQL.Field(this, "IsMnl", "IsMnl", SqlDbType.Bit, false);
                IsHilo = new MSSQL.Field(this, "IsHilo", "IsHilo", SqlDbType.Bit, false);
                IsHdc = new MSSQL.Field(this, "IsHdc", "IsHdc", SqlDbType.Bit, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.Bit, false);
            }
        }

        public class T_Personages : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field UserName;
            public MSSQL.Field DateTime;
            public MSSQL.Field Order;
            public MSSQL.Field IsShow;
            public MSSQL.Field UserID;
            public MSSQL.Field IsRecommend;

            public T_Personages()
            {
                TableName = "T_Personages";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                UserName = new MSSQL.Field(this, "UserName", "UserName", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                IsShow = new MSSQL.Field(this, "IsShow", "IsShow", SqlDbType.Bit, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                IsRecommend = new MSSQL.Field(this, "IsRecommend", "IsRecommend", SqlDbType.Bit, false);
            }
        }

        public class T_PlayScoreScale : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field WinMoney;
            public MSSQL.Field ScoreScale;

            public T_PlayScoreScale()
            {
                TableName = "T_PlayScoreScale";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                ScoreScale = new MSSQL.Field(this, "ScoreScale", "ScoreScale", SqlDbType.Float, false);
            }
        }

        public class T_PlayTypes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Name;
            public MSSQL.Field SystemEndAheadMinute;
            public MSSQL.Field Price;
            public MSSQL.Field BuyFileName;
            public MSSQL.Field MaxFollowSchemeNumberOf;
            public MSSQL.Field MaxMultiple;
            public MSSQL.Field Sort;

            public T_PlayTypes()
            {
                TableName = "T_PlayTypes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                SystemEndAheadMinute = new MSSQL.Field(this, "SystemEndAheadMinute", "SystemEndAheadMinute", SqlDbType.Int, false);
                Price = new MSSQL.Field(this, "Price", "Price", SqlDbType.Money, false);
                BuyFileName = new MSSQL.Field(this, "BuyFileName", "BuyFileName", SqlDbType.VarChar, false);
                MaxFollowSchemeNumberOf = new MSSQL.Field(this, "MaxFollowSchemeNumberOf", "MaxFollowSchemeNumberOf", SqlDbType.Int, false);
                MaxMultiple = new MSSQL.Field(this, "MaxMultiple", "MaxMultiple", SqlDbType.Int, false);
                Sort = new MSSQL.Field(this, "Sort", "Sort", SqlDbType.Int, false);
            }
        }

        public class T_PrepareBet : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field MinMoney;
            public MSSQL.Field MaxMoney;

            public T_PrepareBet()
            {
                TableName = "T_PrepareBet";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                MinMoney = new MSSQL.Field(this, "MinMoney", "MinMoney", SqlDbType.Money, false);
                MaxMoney = new MSSQL.Field(this, "MaxMoney", "MaxMoney", SqlDbType.Money, false);
            }
        }

        public class T_Provinces : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;

            public T_Provinces()
            {
                TableName = "T_Provinces";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
            }
        }

        public class T_Questions : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field TypeID;
            public MSSQL.Field Telephone;
            public MSSQL.Field AnswerStatus;
            public MSSQL.Field HandleDateTime;
            public MSSQL.Field HandleOperatorID;
            public MSSQL.Field AnswerOperatorID;
            public MSSQL.Field AnswerDateTime;
            public MSSQL.Field Content;
            public MSSQL.Field Answer;

            public T_Questions()
            {
                TableName = "T_Questions";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                TypeID = new MSSQL.Field(this, "TypeID", "TypeID", SqlDbType.SmallInt, false);
                Telephone = new MSSQL.Field(this, "Telephone", "Telephone", SqlDbType.VarChar, false);
                AnswerStatus = new MSSQL.Field(this, "AnswerStatus", "AnswerStatus", SqlDbType.SmallInt, false);
                HandleDateTime = new MSSQL.Field(this, "HandleDateTime", "HandleDateTime", SqlDbType.DateTime, false);
                HandleOperatorID = new MSSQL.Field(this, "HandleOperatorID", "HandleOperatorID", SqlDbType.BigInt, false);
                AnswerOperatorID = new MSSQL.Field(this, "AnswerOperatorID", "AnswerOperatorID", SqlDbType.BigInt, false);
                AnswerDateTime = new MSSQL.Field(this, "AnswerDateTime", "AnswerDateTime", SqlDbType.DateTime, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                Answer = new MSSQL.Field(this, "Answer", "Answer", SqlDbType.VarChar, false);
            }
        }

        public class T_QuestionTypes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Description;
            public MSSQL.Field UseType;

            public T_QuestionTypes()
            {
                TableName = "T_QuestionTypes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                UseType = new MSSQL.Field(this, "UseType", "UseType", SqlDbType.SmallInt, false);
            }
        }

        public class T_RecallingAllBuyStar : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemesID;
            public MSSQL.Field InitiatorName;
            public MSSQL.Field SchemesMoney;
            public MSSQL.Field SchemesWinMoney;
            public MSSQL.Field ProfitIndex;
            public MSSQL.Field State;

            public T_RecallingAllBuyStar()
            {
                TableName = "T_RecallingAllBuyStar";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                SchemesID = new MSSQL.Field(this, "SchemesID", "SchemesID", SqlDbType.Int, false);
                InitiatorName = new MSSQL.Field(this, "InitiatorName", "InitiatorName", SqlDbType.VarChar, false);
                SchemesMoney = new MSSQL.Field(this, "SchemesMoney", "SchemesMoney", SqlDbType.VarChar, false);
                SchemesWinMoney = new MSSQL.Field(this, "SchemesWinMoney", "SchemesWinMoney", SqlDbType.VarChar, false);
                ProfitIndex = new MSSQL.Field(this, "ProfitIndex", "ProfitIndex", SqlDbType.VarChar, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.Int, false);
            }
        }

        public class T_ReferenceOdds : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemesContentID;
            public MSSQL.Field Content;
            public MSSQL.Field Bonus;
            public MSSQL.Field Status;
            public MSSQL.Field Type;

            public T_ReferenceOdds()
            {
                TableName = "T_ReferenceOdds";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SchemesContentID = new MSSQL.Field(this, "SchemesContentID", "SchemesContentID", SqlDbType.BigInt, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                Bonus = new MSSQL.Field(this, "Bonus", "Bonus", SqlDbType.VarChar, false);
                Status = new MSSQL.Field(this, "Status", "Status", SqlDbType.Int, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.VarChar, false);
            }
        }

        public class T_SchemeElectronTickets : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Money;
            public MSSQL.Field Multiple;
            public MSSQL.Field Sends;
            public MSSQL.Field HandleDateTime;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandleDescription;
            public MSSQL.Field Identifiers;
            public MSSQL.Field Ticket;

            public T_SchemeElectronTickets()
            {
                TableName = "T_SchemeElectronTickets";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Sends = new MSSQL.Field(this, "Sends", "Sends", SqlDbType.SmallInt, false);
                HandleDateTime = new MSSQL.Field(this, "HandleDateTime", "HandleDateTime", SqlDbType.DateTime, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                HandleDescription = new MSSQL.Field(this, "HandleDescription", "HandleDescription", SqlDbType.VarChar, false);
                Identifiers = new MSSQL.Field(this, "Identifiers", "Identifiers", SqlDbType.VarChar, false);
                Ticket = new MSSQL.Field(this, "Ticket", "Ticket", SqlDbType.VarChar, false);
            }
        }

        public class T_SchemeIsCalcuteScore : MSSQL.TableBase
        {
            public MSSQL.Field SchemeID;
            public MSSQL.Field ScoreType;

            public T_SchemeIsCalcuteScore()
            {
                TableName = "T_SchemeIsCalcuteScore";

                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                ScoreType = new MSSQL.Field(this, "ScoreType", "ScoreType", SqlDbType.Int, false);
            }
        }

        public class T_SchemeOpenUsers : MSSQL.TableBase
        {
            public MSSQL.Field SchemeID;
            public MSSQL.Field UserID;

            public T_SchemeOpenUsers()
            {
                TableName = "T_SchemeOpenUsers";

                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
            }
        }

        public class T_Schemes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeNumber;
            public MSSQL.Field Title;
            public MSSQL.Field InitiateUserID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Multiple;
            public MSSQL.Field Money;
            public MSSQL.Field AssureMoney;
            public MSSQL.Field Share;
            public MSSQL.Field SecrecyLevel;
            public MSSQL.Field QuashStatus;
            public MSSQL.Field Buyed;
            public MSSQL.Field BuyOperatorID;
            public MSSQL.Field PrintOutType;
            public MSSQL.Field Identifiers;
            public MSSQL.Field isOpened;
            public MSSQL.Field OpenOperatorID;
            public MSSQL.Field WinMoney;
            public MSSQL.Field WinMoneyNoWithTax;
            public MSSQL.Field InitiateBonus;
            public MSSQL.Field AtTopStatus;
            public MSSQL.Field isCanChat;
            public MSSQL.Field PreWinMoney;
            public MSSQL.Field PreWinMoneyNoWithTax;
            public MSSQL.Field EditWinMoney;
            public MSSQL.Field EditWinMoneyNoWithTax;
            public MSSQL.Field BuyedShare;
            public MSSQL.Field Schedule;
            public MSSQL.Field ReSchedule;
            public MSSQL.Field IsSchemeCalculatedBonus;
            public MSSQL.Field Description;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field UploadFileContent;
            public MSSQL.Field WinDescription;
            public MSSQL.Field WinImage;
            public MSSQL.Field UpdateDatetime;
            public MSSQL.Field PrintOutDateTime;
            public MSSQL.Field Ot;
            public MSSQL.Field OutTo;
            public MSSQL.Field CorrelationSchemeID;
            public MSSQL.Field SchemeBonusScale;
            public MSSQL.Field IsPurchasing;
            public MSSQL.Field FromClient;

            public T_Schemes()
            {
                TableName = "T_Schemes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeNumber = new MSSQL.Field(this, "SchemeNumber", "SchemeNumber", SqlDbType.VarChar, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                InitiateUserID = new MSSQL.Field(this, "InitiateUserID", "InitiateUserID", SqlDbType.BigInt, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                AssureMoney = new MSSQL.Field(this, "AssureMoney", "AssureMoney", SqlDbType.Money, false);
                Share = new MSSQL.Field(this, "Share", "Share", SqlDbType.Int, false);
                SecrecyLevel = new MSSQL.Field(this, "SecrecyLevel", "SecrecyLevel", SqlDbType.SmallInt, false);
                QuashStatus = new MSSQL.Field(this, "QuashStatus", "QuashStatus", SqlDbType.SmallInt, false);
                Buyed = new MSSQL.Field(this, "Buyed", "Buyed", SqlDbType.Bit, false);
                BuyOperatorID = new MSSQL.Field(this, "BuyOperatorID", "BuyOperatorID", SqlDbType.BigInt, false);
                PrintOutType = new MSSQL.Field(this, "PrintOutType", "PrintOutType", SqlDbType.SmallInt, false);
                Identifiers = new MSSQL.Field(this, "Identifiers", "Identifiers", SqlDbType.VarChar, false);
                isOpened = new MSSQL.Field(this, "isOpened", "isOpened", SqlDbType.Bit, false);
                OpenOperatorID = new MSSQL.Field(this, "OpenOperatorID", "OpenOperatorID", SqlDbType.BigInt, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                WinMoneyNoWithTax = new MSSQL.Field(this, "WinMoneyNoWithTax", "WinMoneyNoWithTax", SqlDbType.Money, false);
                InitiateBonus = new MSSQL.Field(this, "InitiateBonus", "InitiateBonus", SqlDbType.Money, false);
                AtTopStatus = new MSSQL.Field(this, "AtTopStatus", "AtTopStatus", SqlDbType.SmallInt, false);
                isCanChat = new MSSQL.Field(this, "isCanChat", "isCanChat", SqlDbType.Bit, false);
                PreWinMoney = new MSSQL.Field(this, "PreWinMoney", "PreWinMoney", SqlDbType.Money, false);
                PreWinMoneyNoWithTax = new MSSQL.Field(this, "PreWinMoneyNoWithTax", "PreWinMoneyNoWithTax", SqlDbType.Money, false);
                EditWinMoney = new MSSQL.Field(this, "EditWinMoney", "EditWinMoney", SqlDbType.Money, false);
                EditWinMoneyNoWithTax = new MSSQL.Field(this, "EditWinMoneyNoWithTax", "EditWinMoneyNoWithTax", SqlDbType.Money, false);
                BuyedShare = new MSSQL.Field(this, "BuyedShare", "BuyedShare", SqlDbType.Int, false);
                Schedule = new MSSQL.Field(this, "Schedule", "Schedule", SqlDbType.Float, false);
                ReSchedule = new MSSQL.Field(this, "ReSchedule", "ReSchedule", SqlDbType.Float, false);
                IsSchemeCalculatedBonus = new MSSQL.Field(this, "IsSchemeCalculatedBonus", "IsSchemeCalculatedBonus", SqlDbType.Bit, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                UploadFileContent = new MSSQL.Field(this, "UploadFileContent", "UploadFileContent", SqlDbType.VarChar, false);
                WinDescription = new MSSQL.Field(this, "WinDescription", "WinDescription", SqlDbType.VarChar, false);
                WinImage = new MSSQL.Field(this, "WinImage", "WinImage", SqlDbType.VarChar, false);
                UpdateDatetime = new MSSQL.Field(this, "UpdateDatetime", "UpdateDatetime", SqlDbType.DateTime, false);
                PrintOutDateTime = new MSSQL.Field(this, "PrintOutDateTime", "PrintOutDateTime", SqlDbType.DateTime, false);
                Ot = new MSSQL.Field(this, "Ot", "Ot", SqlDbType.SmallInt, false);
                OutTo = new MSSQL.Field(this, "OutTo", "OutTo", SqlDbType.SmallInt, false);
                CorrelationSchemeID = new MSSQL.Field(this, "CorrelationSchemeID", "CorrelationSchemeID", SqlDbType.BigInt, false);
                SchemeBonusScale = new MSSQL.Field(this, "SchemeBonusScale", "SchemeBonusScale", SqlDbType.Float, false);
                IsPurchasing = new MSSQL.Field(this, "IsPurchasing", "IsPurchasing", SqlDbType.Bit, false);
                FromClient = new MSSQL.Field(this, "FromClient", "FromClient", SqlDbType.Int, false);
            }
        }

        public class T_SchemesContent : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field PlayType;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field Game;
            public MSSQL.Field MainTeam;
            public MSSQL.Field GuestTeam;
            public MSSQL.Field StopSellingTime;
            public MSSQL.Field LetBile;
            public MSSQL.Field Score;
            public MSSQL.Field Results;
            public MSSQL.Field PassType;
            public MSSQL.Field Issue;
            public MSSQL.Field Status;
            public MSSQL.Field EndTiem;
            public MSSQL.Field MatchID;

            public T_SchemesContent()
            {
                TableName = "T_SchemesContent";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                PlayType = new MSSQL.Field(this, "PlayType", "PlayType", SqlDbType.VarChar, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.NVarChar, false);
                Game = new MSSQL.Field(this, "Game", "Game", SqlDbType.NVarChar, false);
                MainTeam = new MSSQL.Field(this, "MainTeam", "MainTeam", SqlDbType.NVarChar, false);
                GuestTeam = new MSSQL.Field(this, "GuestTeam", "GuestTeam", SqlDbType.VarChar, false);
                StopSellingTime = new MSSQL.Field(this, "StopSellingTime", "StopSellingTime", SqlDbType.DateTime, false);
                LetBile = new MSSQL.Field(this, "LetBile", "LetBile", SqlDbType.VarChar, false);
                Score = new MSSQL.Field(this, "Score", "Score", SqlDbType.VarChar, false);
                Results = new MSSQL.Field(this, "Results", "Results", SqlDbType.VarChar, false);
                PassType = new MSSQL.Field(this, "PassType", "PassType", SqlDbType.NVarChar, false);
                Issue = new MSSQL.Field(this, "Issue", "Issue", SqlDbType.VarChar, false);
                Status = new MSSQL.Field(this, "Status", "Status", SqlDbType.Int, false);
                EndTiem = new MSSQL.Field(this, "EndTiem", "EndTiem", SqlDbType.DateTime, false);
                MatchID = new MSSQL.Field(this, "MatchID", "MatchID", SqlDbType.BigInt, false);
            }
        }

        public class T_SchemesFormulae : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Money;
            public MSSQL.Field Schedule;
            public MSSQL.Field MinMoney;

            public T_SchemesFormulae()
            {
                TableName = "T_SchemesFormulae";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.SmallInt, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Schedule = new MSSQL.Field(this, "Schedule", "Schedule", SqlDbType.Float, false);
                MinMoney = new MSSQL.Field(this, "MinMoney", "MinMoney", SqlDbType.Float, false);
            }
        }

        public class T_SchemesNumber : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeID;
            public MSSQL.Field Money;
            public MSSQL.Field Multiple;
            public MSSQL.Field LotteryNumber;

            public T_SchemesNumber()
            {
                TableName = "T_SchemesNumber";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
            }
        }

        public class T_SchemesOpened : MSSQL.TableBase
        {
            public MSSQL.Field SchemeID;
            public MSSQL.Field WinMoney;

            public T_SchemesOpened()
            {
                TableName = "T_SchemesOpened";

                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
            }
        }

        public class T_SchemesSendToCenter : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field SchemeID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Money;
            public MSSQL.Field Multiple;
            public MSSQL.Field Sends;
            public MSSQL.Field HandleDateTime;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandleDescription;
            public MSSQL.Field Identifiers;
            public MSSQL.Field Ticket;

            public T_SchemesSendToCenter()
            {
                TableName = "T_SchemesSendToCenter";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                Sends = new MSSQL.Field(this, "Sends", "Sends", SqlDbType.SmallInt, false);
                HandleDateTime = new MSSQL.Field(this, "HandleDateTime", "HandleDateTime", SqlDbType.DateTime, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                HandleDescription = new MSSQL.Field(this, "HandleDescription", "HandleDescription", SqlDbType.VarChar, false);
                Identifiers = new MSSQL.Field(this, "Identifiers", "Identifiers", SqlDbType.VarChar, false);
                Ticket = new MSSQL.Field(this, "Ticket", "Ticket", SqlDbType.VarChar, false);
            }
        }

        public class T_SchemesTop : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field Sort;

            public T_SchemesTop()
            {
                TableName = "T_SchemesTop";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.SmallInt, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                Sort = new MSSQL.Field(this, "Sort", "Sort", SqlDbType.SmallInt, false);
            }
        }

        public class T_SchemeSupperCobuy : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field TypeState;

            public T_SchemeSupperCobuy()
            {
                TableName = "T_SchemeSupperCobuy";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                TypeState = new MSSQL.Field(this, "TypeState", "TypeState", SqlDbType.Int, false);
            }
        }

        public class T_SchemeToTicketed : MSSQL.TableBase
        {
            public MSSQL.Field OurOrAgent;
            public MSSQL.Field SchemeID;

            public T_SchemeToTicketed()
            {
                TableName = "T_SchemeToTicketed";

                OurOrAgent = new MSSQL.Field(this, "OurOrAgent", "OurOrAgent", SqlDbType.SmallInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
            }
        }

        public class T_SchemeUpload : MSSQL.TableBase
        {
            public MSSQL.Field LotteryID;
            public MSSQL.Field SchemeContent;

            public T_SchemeUpload()
            {
                TableName = "T_SchemeUpload";

                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.BigInt, false);
                SchemeContent = new MSSQL.Field(this, "SchemeContent", "SchemeContent", SqlDbType.VarChar, false);
            }
        }

        public class T_SecurityQuestions : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Question;

            public T_SecurityQuestions()
            {
                TableName = "T_SecurityQuestions";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                Question = new MSSQL.Field(this, "Question", "Question", SqlDbType.NVarChar, false);
            }
        }

        public class T_SendNoticeForQuashScheme : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field UserID;
            public MSSQL.Field UserName;
            public MSSQL.Field IsEmailValided;
            public MSSQL.Field Email;
            public MSSQL.Field IsMobileValided;
            public MSSQL.Field Mobile;
            public MSSQL.Field Email_QuashScheme;
            public MSSQL.Field StationSMS_QuashScheme;
            public MSSQL.Field SMS_QuashScheme;
            public MSSQL.Field IsSend;

            public T_SendNoticeForQuashScheme()
            {
                TableName = "T_SendNoticeForQuashScheme";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                UserName = new MSSQL.Field(this, "UserName", "UserName", SqlDbType.VarChar, false);
                IsEmailValided = new MSSQL.Field(this, "IsEmailValided", "IsEmailValided", SqlDbType.Bit, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.VarChar, false);
                IsMobileValided = new MSSQL.Field(this, "IsMobileValided", "IsMobileValided", SqlDbType.Bit, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                Email_QuashScheme = new MSSQL.Field(this, "Email_QuashScheme", "Email_QuashScheme", SqlDbType.VarChar, false);
                StationSMS_QuashScheme = new MSSQL.Field(this, "StationSMS_QuashScheme", "StationSMS_QuashScheme", SqlDbType.VarChar, false);
                SMS_QuashScheme = new MSSQL.Field(this, "SMS_QuashScheme", "SMS_QuashScheme", SqlDbType.VarChar, false);
                IsSend = new MSSQL.Field(this, "IsSend", "IsSend", SqlDbType.Bit, false);
            }
        }

        public class T_Sensitivekeywords : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field KeyWords;

            public T_Sensitivekeywords()
            {
                TableName = "T_Sensitivekeywords";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, true);
                KeyWords = new MSSQL.Field(this, "KeyWords", "KeyWords", SqlDbType.VarChar, false);
            }
        }

        public class T_SingleRate : MSSQL.TableBase
        {
            public MSSQL.Field Id;
            public MSSQL.Field Day;
            public MSSQL.Field MatchDate;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field Game;
            public MSSQL.Field MainTeam;
            public MSSQL.Field GuestTeam;
            public MSSQL.Field Win;
            public MSSQL.Field WinDirection;
            public MSSQL.Field Flat;
            public MSSQL.Field FlatDirection;
            public MSSQL.Field Lose;
            public MSSQL.Field LoseDirection;
            public MSSQL.Field S10;
            public MSSQL.Field S10Direction;
            public MSSQL.Field S20;
            public MSSQL.Field S20Direction;
            public MSSQL.Field S21;
            public MSSQL.Field S21Direction;
            public MSSQL.Field S30;
            public MSSQL.Field S30Direction;
            public MSSQL.Field S31;
            public MSSQL.Field S31Direction;
            public MSSQL.Field S32;
            public MSSQL.Field S32Direction;
            public MSSQL.Field S40;
            public MSSQL.Field S40Direction;
            public MSSQL.Field S41;
            public MSSQL.Field S41Direction;
            public MSSQL.Field S42;
            public MSSQL.Field S42Direction;
            public MSSQL.Field S50;
            public MSSQL.Field S50Direction;
            public MSSQL.Field S51;
            public MSSQL.Field S51Direction;
            public MSSQL.Field S52;
            public MSSQL.Field S52Direction;
            public MSSQL.Field Sother;
            public MSSQL.Field SotherDirection;
            public MSSQL.Field P00;
            public MSSQL.Field P00Direction;
            public MSSQL.Field P11;
            public MSSQL.Field P11Direction;
            public MSSQL.Field P22;
            public MSSQL.Field P22Direction;
            public MSSQL.Field P33;
            public MSSQL.Field P33Direction;
            public MSSQL.Field Pother;
            public MSSQL.Field PotherDirection;
            public MSSQL.Field F01;
            public MSSQL.Field F01Direction;
            public MSSQL.Field F02;
            public MSSQL.Field F02Direction;
            public MSSQL.Field F12;
            public MSSQL.Field F12Direction;
            public MSSQL.Field F03;
            public MSSQL.Field F03Direction;
            public MSSQL.Field F13;
            public MSSQL.Field F13Direction;
            public MSSQL.Field F23;
            public MSSQL.Field F23Direction;
            public MSSQL.Field F04;
            public MSSQL.Field F04Direction;
            public MSSQL.Field F14;
            public MSSQL.Field F14Direction;
            public MSSQL.Field F24;
            public MSSQL.Field F24Direction;
            public MSSQL.Field F05;
            public MSSQL.Field F05Direction;
            public MSSQL.Field F15;
            public MSSQL.Field F15Direction;
            public MSSQL.Field F25;
            public MSSQL.Field F25Direction;
            public MSSQL.Field Fother;
            public MSSQL.Field FotherDirection;
            public MSSQL.Field In0;
            public MSSQL.Field In0Direction;
            public MSSQL.Field In1;
            public MSSQL.Field In1Direction;
            public MSSQL.Field In2;
            public MSSQL.Field In2Direction;
            public MSSQL.Field In3;
            public MSSQL.Field In3Direction;
            public MSSQL.Field In4;
            public MSSQL.Field In4Direction;
            public MSSQL.Field In5;
            public MSSQL.Field In5Direction;
            public MSSQL.Field In6;
            public MSSQL.Field In6Direction;
            public MSSQL.Field In7;
            public MSSQL.Field In7Direction;
            public MSSQL.Field SS;
            public MSSQL.Field SSDirection;
            public MSSQL.Field SP;
            public MSSQL.Field SPDirection;
            public MSSQL.Field SF;
            public MSSQL.Field SFDirection;
            public MSSQL.Field PS;
            public MSSQL.Field PSDirection;
            public MSSQL.Field PP;
            public MSSQL.Field PPDirection;
            public MSSQL.Field PF;
            public MSSQL.Field PFDirection;
            public MSSQL.Field FS;
            public MSSQL.Field FSDirection;
            public MSSQL.Field FP;
            public MSSQL.Field FPDirection;
            public MSSQL.Field FF;
            public MSSQL.Field FFDirection;
            public MSSQL.Field MainLoseball;
            public MSSQL.Field StopSellTime;
            public MSSQL.Field MatchID;
            public MSSQL.Field EuropeSSP;
            public MSSQL.Field EuropePSP;
            public MSSQL.Field EuropeFSP;
            public MSSQL.Field InforMationID;
            public MSSQL.Field InforMationMainTeamID;
            public MSSQL.Field InforMationGuestTeamID;
            public MSSQL.Field InforMationMatchTypeID;
            public MSSQL.Field GameColor;
            public MSSQL.Field SNumberCount;
            public MSSQL.Field PNumberCount;
            public MSSQL.Field FNumberCount;
            public MSSQL.Field IsHhad;
            public MSSQL.Field IsCrs;
            public MSSQL.Field IsTtg;
            public MSSQL.Field IsHafu;
            public MSSQL.Field State;
            public MSSQL.Field IsSPF;
            public MSSQL.Field SPFWin;
            public MSSQL.Field SPFWinDirection;
            public MSSQL.Field SPFFlat;
            public MSSQL.Field SPFFlatDirection;
            public MSSQL.Field SPFLose;
            public MSSQL.Field SPFLoseDirection;

            public T_SingleRate()
            {
                TableName = "T_SingleRate";

                Id = new MSSQL.Field(this, "Id", "Id", SqlDbType.Int, true);
                Day = new MSSQL.Field(this, "Day", "Day", SqlDbType.VarChar, false);
                MatchDate = new MSSQL.Field(this, "MatchDate", "MatchDate", SqlDbType.DateTime, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.VarChar, false);
                Game = new MSSQL.Field(this, "Game", "Game", SqlDbType.VarChar, false);
                MainTeam = new MSSQL.Field(this, "MainTeam", "MainTeam", SqlDbType.VarChar, false);
                GuestTeam = new MSSQL.Field(this, "GuestTeam", "GuestTeam", SqlDbType.VarChar, false);
                Win = new MSSQL.Field(this, "Win", "Win", SqlDbType.Float, false);
                WinDirection = new MSSQL.Field(this, "WinDirection", "WinDirection", SqlDbType.VarChar, false);
                Flat = new MSSQL.Field(this, "Flat", "Flat", SqlDbType.Float, false);
                FlatDirection = new MSSQL.Field(this, "FlatDirection", "FlatDirection", SqlDbType.VarChar, false);
                Lose = new MSSQL.Field(this, "Lose", "Lose", SqlDbType.Float, false);
                LoseDirection = new MSSQL.Field(this, "LoseDirection", "LoseDirection", SqlDbType.VarChar, false);
                S10 = new MSSQL.Field(this, "S10", "S10", SqlDbType.Float, false);
                S10Direction = new MSSQL.Field(this, "S10Direction", "S10Direction", SqlDbType.VarChar, false);
                S20 = new MSSQL.Field(this, "S20", "S20", SqlDbType.Float, false);
                S20Direction = new MSSQL.Field(this, "S20Direction", "S20Direction", SqlDbType.VarChar, false);
                S21 = new MSSQL.Field(this, "S21", "S21", SqlDbType.Float, false);
                S21Direction = new MSSQL.Field(this, "S21Direction", "S21Direction", SqlDbType.VarChar, false);
                S30 = new MSSQL.Field(this, "S30", "S30", SqlDbType.Float, false);
                S30Direction = new MSSQL.Field(this, "S30Direction", "S30Direction", SqlDbType.VarChar, false);
                S31 = new MSSQL.Field(this, "S31", "S31", SqlDbType.Float, false);
                S31Direction = new MSSQL.Field(this, "S31Direction", "S31Direction", SqlDbType.VarChar, false);
                S32 = new MSSQL.Field(this, "S32", "S32", SqlDbType.Float, false);
                S32Direction = new MSSQL.Field(this, "S32Direction", "S32Direction", SqlDbType.VarChar, false);
                S40 = new MSSQL.Field(this, "S40", "S40", SqlDbType.Float, false);
                S40Direction = new MSSQL.Field(this, "S40Direction", "S40Direction", SqlDbType.VarChar, false);
                S41 = new MSSQL.Field(this, "S41", "S41", SqlDbType.Float, false);
                S41Direction = new MSSQL.Field(this, "S41Direction", "S41Direction", SqlDbType.VarChar, false);
                S42 = new MSSQL.Field(this, "S42", "S42", SqlDbType.Float, false);
                S42Direction = new MSSQL.Field(this, "S42Direction", "S42Direction", SqlDbType.VarChar, false);
                S50 = new MSSQL.Field(this, "S50", "S50", SqlDbType.Float, false);
                S50Direction = new MSSQL.Field(this, "S50Direction", "S50Direction", SqlDbType.VarChar, false);
                S51 = new MSSQL.Field(this, "S51", "S51", SqlDbType.Float, false);
                S51Direction = new MSSQL.Field(this, "S51Direction", "S51Direction", SqlDbType.VarChar, false);
                S52 = new MSSQL.Field(this, "S52", "S52", SqlDbType.Float, false);
                S52Direction = new MSSQL.Field(this, "S52Direction", "S52Direction", SqlDbType.VarChar, false);
                Sother = new MSSQL.Field(this, "Sother", "Sother", SqlDbType.Float, false);
                SotherDirection = new MSSQL.Field(this, "SotherDirection", "SotherDirection", SqlDbType.VarChar, false);
                P00 = new MSSQL.Field(this, "P00", "P00", SqlDbType.Float, false);
                P00Direction = new MSSQL.Field(this, "P00Direction", "P00Direction", SqlDbType.VarChar, false);
                P11 = new MSSQL.Field(this, "P11", "P11", SqlDbType.Float, false);
                P11Direction = new MSSQL.Field(this, "P11Direction", "P11Direction", SqlDbType.VarChar, false);
                P22 = new MSSQL.Field(this, "P22", "P22", SqlDbType.Float, false);
                P22Direction = new MSSQL.Field(this, "P22Direction", "P22Direction", SqlDbType.VarChar, false);
                P33 = new MSSQL.Field(this, "P33", "P33", SqlDbType.Float, false);
                P33Direction = new MSSQL.Field(this, "P33Direction", "P33Direction", SqlDbType.VarChar, false);
                Pother = new MSSQL.Field(this, "Pother", "Pother", SqlDbType.Float, false);
                PotherDirection = new MSSQL.Field(this, "PotherDirection", "PotherDirection", SqlDbType.VarChar, false);
                F01 = new MSSQL.Field(this, "F01", "F01", SqlDbType.Float, false);
                F01Direction = new MSSQL.Field(this, "F01Direction", "F01Direction", SqlDbType.VarChar, false);
                F02 = new MSSQL.Field(this, "F02", "F02", SqlDbType.Float, false);
                F02Direction = new MSSQL.Field(this, "F02Direction", "F02Direction", SqlDbType.VarChar, false);
                F12 = new MSSQL.Field(this, "F12", "F12", SqlDbType.Float, false);
                F12Direction = new MSSQL.Field(this, "F12Direction", "F12Direction", SqlDbType.VarChar, false);
                F03 = new MSSQL.Field(this, "F03", "F03", SqlDbType.Float, false);
                F03Direction = new MSSQL.Field(this, "F03Direction", "F03Direction", SqlDbType.VarChar, false);
                F13 = new MSSQL.Field(this, "F13", "F13", SqlDbType.Float, false);
                F13Direction = new MSSQL.Field(this, "F13Direction", "F13Direction", SqlDbType.VarChar, false);
                F23 = new MSSQL.Field(this, "F23", "F23", SqlDbType.Float, false);
                F23Direction = new MSSQL.Field(this, "F23Direction", "F23Direction", SqlDbType.VarChar, false);
                F04 = new MSSQL.Field(this, "F04", "F04", SqlDbType.Float, false);
                F04Direction = new MSSQL.Field(this, "F04Direction", "F04Direction", SqlDbType.VarChar, false);
                F14 = new MSSQL.Field(this, "F14", "F14", SqlDbType.Float, false);
                F14Direction = new MSSQL.Field(this, "F14Direction", "F14Direction", SqlDbType.VarChar, false);
                F24 = new MSSQL.Field(this, "F24", "F24", SqlDbType.Float, false);
                F24Direction = new MSSQL.Field(this, "F24Direction", "F24Direction", SqlDbType.VarChar, false);
                F05 = new MSSQL.Field(this, "F05", "F05", SqlDbType.Float, false);
                F05Direction = new MSSQL.Field(this, "F05Direction", "F05Direction", SqlDbType.VarChar, false);
                F15 = new MSSQL.Field(this, "F15", "F15", SqlDbType.Float, false);
                F15Direction = new MSSQL.Field(this, "F15Direction", "F15Direction", SqlDbType.VarChar, false);
                F25 = new MSSQL.Field(this, "F25", "F25", SqlDbType.Float, false);
                F25Direction = new MSSQL.Field(this, "F25Direction", "F25Direction", SqlDbType.VarChar, false);
                Fother = new MSSQL.Field(this, "Fother", "Fother", SqlDbType.Float, false);
                FotherDirection = new MSSQL.Field(this, "FotherDirection", "FotherDirection", SqlDbType.VarChar, false);
                In0 = new MSSQL.Field(this, "In0", "In0", SqlDbType.Float, false);
                In0Direction = new MSSQL.Field(this, "In0Direction", "In0Direction", SqlDbType.VarChar, false);
                In1 = new MSSQL.Field(this, "In1", "In1", SqlDbType.Float, false);
                In1Direction = new MSSQL.Field(this, "In1Direction", "In1Direction", SqlDbType.VarChar, false);
                In2 = new MSSQL.Field(this, "In2", "In2", SqlDbType.Float, false);
                In2Direction = new MSSQL.Field(this, "In2Direction", "In2Direction", SqlDbType.VarChar, false);
                In3 = new MSSQL.Field(this, "In3", "In3", SqlDbType.Float, false);
                In3Direction = new MSSQL.Field(this, "In3Direction", "In3Direction", SqlDbType.VarChar, false);
                In4 = new MSSQL.Field(this, "In4", "In4", SqlDbType.Float, false);
                In4Direction = new MSSQL.Field(this, "In4Direction", "In4Direction", SqlDbType.VarChar, false);
                In5 = new MSSQL.Field(this, "In5", "In5", SqlDbType.Float, false);
                In5Direction = new MSSQL.Field(this, "In5Direction", "In5Direction", SqlDbType.VarChar, false);
                In6 = new MSSQL.Field(this, "In6", "In6", SqlDbType.Float, false);
                In6Direction = new MSSQL.Field(this, "In6Direction", "In6Direction", SqlDbType.VarChar, false);
                In7 = new MSSQL.Field(this, "In7", "In7", SqlDbType.Float, false);
                In7Direction = new MSSQL.Field(this, "In7Direction", "In7Direction", SqlDbType.VarChar, false);
                SS = new MSSQL.Field(this, "SS", "SS", SqlDbType.Float, false);
                SSDirection = new MSSQL.Field(this, "SSDirection", "SSDirection", SqlDbType.VarChar, false);
                SP = new MSSQL.Field(this, "SP", "SP", SqlDbType.Float, false);
                SPDirection = new MSSQL.Field(this, "SPDirection", "SPDirection", SqlDbType.VarChar, false);
                SF = new MSSQL.Field(this, "SF", "SF", SqlDbType.Float, false);
                SFDirection = new MSSQL.Field(this, "SFDirection", "SFDirection", SqlDbType.VarChar, false);
                PS = new MSSQL.Field(this, "PS", "PS", SqlDbType.Float, false);
                PSDirection = new MSSQL.Field(this, "PSDirection", "PSDirection", SqlDbType.VarChar, false);
                PP = new MSSQL.Field(this, "PP", "PP", SqlDbType.Float, false);
                PPDirection = new MSSQL.Field(this, "PPDirection", "PPDirection", SqlDbType.VarChar, false);
                PF = new MSSQL.Field(this, "PF", "PF", SqlDbType.Float, false);
                PFDirection = new MSSQL.Field(this, "PFDirection", "PFDirection", SqlDbType.VarChar, false);
                FS = new MSSQL.Field(this, "FS", "FS", SqlDbType.Float, false);
                FSDirection = new MSSQL.Field(this, "FSDirection", "FSDirection", SqlDbType.VarChar, false);
                FP = new MSSQL.Field(this, "FP", "FP", SqlDbType.Float, false);
                FPDirection = new MSSQL.Field(this, "FPDirection", "FPDirection", SqlDbType.VarChar, false);
                FF = new MSSQL.Field(this, "FF", "FF", SqlDbType.Float, false);
                FFDirection = new MSSQL.Field(this, "FFDirection", "FFDirection", SqlDbType.VarChar, false);
                MainLoseball = new MSSQL.Field(this, "MainLoseball", "MainLoseball", SqlDbType.Int, false);
                StopSellTime = new MSSQL.Field(this, "StopSellTime", "StopSellTime", SqlDbType.DateTime, false);
                MatchID = new MSSQL.Field(this, "MatchID", "MatchID", SqlDbType.BigInt, false);
                EuropeSSP = new MSSQL.Field(this, "EuropeSSP", "EuropeSSP", SqlDbType.VarChar, false);
                EuropePSP = new MSSQL.Field(this, "EuropePSP", "EuropePSP", SqlDbType.VarChar, false);
                EuropeFSP = new MSSQL.Field(this, "EuropeFSP", "EuropeFSP", SqlDbType.VarChar, false);
                InforMationID = new MSSQL.Field(this, "InforMationID", "InforMationID", SqlDbType.BigInt, false);
                InforMationMainTeamID = new MSSQL.Field(this, "InforMationMainTeamID", "InforMationMainTeamID", SqlDbType.BigInt, false);
                InforMationGuestTeamID = new MSSQL.Field(this, "InforMationGuestTeamID", "InforMationGuestTeamID", SqlDbType.BigInt, false);
                InforMationMatchTypeID = new MSSQL.Field(this, "InforMationMatchTypeID", "InforMationMatchTypeID", SqlDbType.BigInt, false);
                GameColor = new MSSQL.Field(this, "GameColor", "GameColor", SqlDbType.VarChar, false);
                SNumberCount = new MSSQL.Field(this, "SNumberCount", "SNumberCount", SqlDbType.Int, false);
                PNumberCount = new MSSQL.Field(this, "PNumberCount", "PNumberCount", SqlDbType.Int, false);
                FNumberCount = new MSSQL.Field(this, "FNumberCount", "FNumberCount", SqlDbType.Int, false);
                IsHhad = new MSSQL.Field(this, "IsHhad", "IsHhad", SqlDbType.Bit, false);
                IsCrs = new MSSQL.Field(this, "IsCrs", "IsCrs", SqlDbType.Bit, false);
                IsTtg = new MSSQL.Field(this, "IsTtg", "IsTtg", SqlDbType.Bit, false);
                IsHafu = new MSSQL.Field(this, "IsHafu", "IsHafu", SqlDbType.Bit, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.Bit, false);
                IsSPF = new MSSQL.Field(this, "IsSPF", "IsSPF", SqlDbType.Bit, false);
                SPFWin = new MSSQL.Field(this, "SPFWin", "SPFWin", SqlDbType.Float, false);
                SPFWinDirection = new MSSQL.Field(this, "SPFWinDirection", "SPFWinDirection", SqlDbType.VarChar, false);
                SPFFlat = new MSSQL.Field(this, "SPFFlat", "SPFFlat", SqlDbType.Float, false);
                SPFFlatDirection = new MSSQL.Field(this, "SPFFlatDirection", "SPFFlatDirection", SqlDbType.VarChar, false);
                SPFLose = new MSSQL.Field(this, "SPFLose", "SPFLose", SqlDbType.Float, false);
                SPFLoseDirection = new MSSQL.Field(this, "SPFLoseDirection", "SPFLoseDirection", SqlDbType.VarChar, false);
            }
        }

        public class T_SingleRateBasket : MSSQL.TableBase
        {
            public MSSQL.Field Id;
            public MSSQL.Field Day;
            public MSSQL.Field MatchID;
            public MSSQL.Field MatchNumber;
            public MSSQL.Field MatchDate;
            public MSSQL.Field Game;
            public MSSQL.Field MainTeam;
            public MSSQL.Field GuestTeam;
            public MSSQL.Field MainLose;
            public MSSQL.Field MainLoseDirection;
            public MSSQL.Field MainWin;
            public MSSQL.Field MainWinDirection;
            public MSSQL.Field LetMainLose;
            public MSSQL.Field LetMainLoseDirection;
            public MSSQL.Field LetMainWin;
            public MSSQL.Field LetMainWinDirection;
            public MSSQL.Field DifferGuest1_5;
            public MSSQL.Field Guest1_5Direction;
            public MSSQL.Field DifferGuest6_10;
            public MSSQL.Field Guest6_10Direction;
            public MSSQL.Field DifferGuest11_15;
            public MSSQL.Field Guest11_15Direction;
            public MSSQL.Field DifferGuest16_20;
            public MSSQL.Field Guest16_20Direction;
            public MSSQL.Field DifferGuest21_25;
            public MSSQL.Field Guest21_25Direction;
            public MSSQL.Field DifferGuest26;
            public MSSQL.Field Guest26Direction;
            public MSSQL.Field DifferMain1_5;
            public MSSQL.Field Main1_5Direction;
            public MSSQL.Field DifferMain6_10;
            public MSSQL.Field Main6_10Direction;
            public MSSQL.Field DifferMain11_15;
            public MSSQL.Field Main11_15Direction;
            public MSSQL.Field DifferMain16_20;
            public MSSQL.Field Main16_20Direction;
            public MSSQL.Field DifferMain21_25;
            public MSSQL.Field Main21_25Direction;
            public MSSQL.Field Main26Direction;
            public MSSQL.Field DifferMain26;
            public MSSQL.Field Big;
            public MSSQL.Field BigDirection;
            public MSSQL.Field Small;
            public MSSQL.Field SmallDirection;
            public MSSQL.Field StopSellTime;
            public MSSQL.Field LetScore;
            public MSSQL.Field BigSmallscore;
            public MSSQL.Field InforMationID;
            public MSSQL.Field IsWnm;
            public MSSQL.Field IsMnl;
            public MSSQL.Field IsHilo;
            public MSSQL.Field IsHdc;
            public MSSQL.Field State;
            public MSSQL.Field LetScoreMainLose;
            public MSSQL.Field LetScoreMainLoseDirection;
            public MSSQL.Field LetScoreMainWin;
            public MSSQL.Field LetScoreMainWinDirection;

            public T_SingleRateBasket()
            {
                TableName = "T_SingleRateBasket";

                Id = new MSSQL.Field(this, "Id", "Id", SqlDbType.Int, true);
                Day = new MSSQL.Field(this, "Day", "Day", SqlDbType.VarChar, false);
                MatchID = new MSSQL.Field(this, "MatchID", "MatchID", SqlDbType.BigInt, false);
                MatchNumber = new MSSQL.Field(this, "MatchNumber", "MatchNumber", SqlDbType.VarChar, false);
                MatchDate = new MSSQL.Field(this, "MatchDate", "MatchDate", SqlDbType.DateTime, false);
                Game = new MSSQL.Field(this, "Game", "Game", SqlDbType.VarChar, false);
                MainTeam = new MSSQL.Field(this, "MainTeam", "MainTeam", SqlDbType.VarChar, false);
                GuestTeam = new MSSQL.Field(this, "GuestTeam", "GuestTeam", SqlDbType.VarChar, false);
                MainLose = new MSSQL.Field(this, "MainLose", "MainLose", SqlDbType.Float, false);
                MainLoseDirection = new MSSQL.Field(this, "MainLoseDirection", "MainLoseDirection", SqlDbType.VarChar, false);
                MainWin = new MSSQL.Field(this, "MainWin", "MainWin", SqlDbType.Float, false);
                MainWinDirection = new MSSQL.Field(this, "MainWinDirection", "MainWinDirection", SqlDbType.VarChar, false);
                LetMainLose = new MSSQL.Field(this, "LetMainLose", "LetMainLose", SqlDbType.Float, false);
                LetMainLoseDirection = new MSSQL.Field(this, "LetMainLoseDirection", "LetMainLoseDirection", SqlDbType.VarChar, false);
                LetMainWin = new MSSQL.Field(this, "LetMainWin", "LetMainWin", SqlDbType.Float, false);
                LetMainWinDirection = new MSSQL.Field(this, "LetMainWinDirection", "LetMainWinDirection", SqlDbType.VarChar, false);
                DifferGuest1_5 = new MSSQL.Field(this, "DifferGuest1_5", "DifferGuest1_5", SqlDbType.Float, false);
                Guest1_5Direction = new MSSQL.Field(this, "Guest1_5Direction", "Guest1_5Direction", SqlDbType.VarChar, false);
                DifferGuest6_10 = new MSSQL.Field(this, "DifferGuest6_10", "DifferGuest6_10", SqlDbType.Float, false);
                Guest6_10Direction = new MSSQL.Field(this, "Guest6_10Direction", "Guest6_10Direction", SqlDbType.VarChar, false);
                DifferGuest11_15 = new MSSQL.Field(this, "DifferGuest11_15", "DifferGuest11_15", SqlDbType.Float, false);
                Guest11_15Direction = new MSSQL.Field(this, "Guest11_15Direction", "Guest11_15Direction", SqlDbType.VarChar, false);
                DifferGuest16_20 = new MSSQL.Field(this, "DifferGuest16_20", "DifferGuest16_20", SqlDbType.Float, false);
                Guest16_20Direction = new MSSQL.Field(this, "Guest16_20Direction", "Guest16_20Direction", SqlDbType.VarChar, false);
                DifferGuest21_25 = new MSSQL.Field(this, "DifferGuest21_25", "DifferGuest21_25", SqlDbType.Float, false);
                Guest21_25Direction = new MSSQL.Field(this, "Guest21_25Direction", "Guest21_25Direction", SqlDbType.VarChar, false);
                DifferGuest26 = new MSSQL.Field(this, "DifferGuest26", "DifferGuest26", SqlDbType.Float, false);
                Guest26Direction = new MSSQL.Field(this, "Guest26Direction", "Guest26Direction", SqlDbType.VarChar, false);
                DifferMain1_5 = new MSSQL.Field(this, "DifferMain1_5", "DifferMain1_5", SqlDbType.Float, false);
                Main1_5Direction = new MSSQL.Field(this, "Main1_5Direction", "Main1_5Direction", SqlDbType.VarChar, false);
                DifferMain6_10 = new MSSQL.Field(this, "DifferMain6_10", "DifferMain6_10", SqlDbType.Float, false);
                Main6_10Direction = new MSSQL.Field(this, "Main6_10Direction", "Main6_10Direction", SqlDbType.VarChar, false);
                DifferMain11_15 = new MSSQL.Field(this, "DifferMain11_15", "DifferMain11_15", SqlDbType.Float, false);
                Main11_15Direction = new MSSQL.Field(this, "Main11_15Direction", "Main11_15Direction", SqlDbType.VarChar, false);
                DifferMain16_20 = new MSSQL.Field(this, "DifferMain16_20", "DifferMain16_20", SqlDbType.Float, false);
                Main16_20Direction = new MSSQL.Field(this, "Main16_20Direction", "Main16_20Direction", SqlDbType.VarChar, false);
                DifferMain21_25 = new MSSQL.Field(this, "DifferMain21_25", "DifferMain21_25", SqlDbType.Float, false);
                Main21_25Direction = new MSSQL.Field(this, "Main21_25Direction", "Main21_25Direction", SqlDbType.VarChar, false);
                Main26Direction = new MSSQL.Field(this, "Main26Direction", "Main26Direction", SqlDbType.VarChar, false);
                DifferMain26 = new MSSQL.Field(this, "DifferMain26", "DifferMain26", SqlDbType.Float, false);
                Big = new MSSQL.Field(this, "Big", "Big", SqlDbType.Float, false);
                BigDirection = new MSSQL.Field(this, "BigDirection", "BigDirection", SqlDbType.VarChar, false);
                Small = new MSSQL.Field(this, "Small", "Small", SqlDbType.Float, false);
                SmallDirection = new MSSQL.Field(this, "SmallDirection", "SmallDirection", SqlDbType.VarChar, false);
                StopSellTime = new MSSQL.Field(this, "StopSellTime", "StopSellTime", SqlDbType.DateTime, false);
                LetScore = new MSSQL.Field(this, "LetScore", "LetScore", SqlDbType.Float, false);
                BigSmallscore = new MSSQL.Field(this, "BigSmallscore", "BigSmallscore", SqlDbType.Float, false);
                InforMationID = new MSSQL.Field(this, "InforMationID", "InforMationID", SqlDbType.BigInt, false);
                IsWnm = new MSSQL.Field(this, "IsWnm", "IsWnm", SqlDbType.Bit, false);
                IsMnl = new MSSQL.Field(this, "IsMnl", "IsMnl", SqlDbType.Bit, false);
                IsHilo = new MSSQL.Field(this, "IsHilo", "IsHilo", SqlDbType.Bit, false);
                IsHdc = new MSSQL.Field(this, "IsHdc", "IsHdc", SqlDbType.Bit, false);
                State = new MSSQL.Field(this, "State", "State", SqlDbType.Bit, false);
                LetScoreMainLose = new MSSQL.Field(this, "LetScoreMainLose", "LetScoreMainLose", SqlDbType.Float, false);
                LetScoreMainLoseDirection = new MSSQL.Field(this, "LetScoreMainLoseDirection", "LetScoreMainLoseDirection", SqlDbType.VarChar, false);
                LetScoreMainWin = new MSSQL.Field(this, "LetScoreMainWin", "LetScoreMainWin", SqlDbType.Float, false);
                LetScoreMainWinDirection = new MSSQL.Field(this, "LetScoreMainWinDirection", "LetScoreMainWinDirection", SqlDbType.VarChar, false);
            }
        }

        public class T_SiteAffiches : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Title;
            public MSSQL.Field isShow;
            public MSSQL.Field isCommend;
            public MSSQL.Field Content;
            public MSSQL.Field readCount;

            public T_SiteAffiches()
            {
                TableName = "T_SiteAffiches";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
                isCommend = new MSSQL.Field(this, "isCommend", "isCommend", SqlDbType.Bit, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                readCount = new MSSQL.Field(this, "readCount", "readCount", SqlDbType.BigInt, false);
            }
        }

        public class T_Sites : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field ParentID;
            public MSSQL.Field OwnerUserID;
            public MSSQL.Field Name;
            public MSSQL.Field LogoUrl;
            public MSSQL.Field Company;
            public MSSQL.Field Address;
            public MSSQL.Field PostCode;
            public MSSQL.Field ResponsiblePerson;
            public MSSQL.Field ContactPerson;
            public MSSQL.Field Telephone;
            public MSSQL.Field Fax;
            public MSSQL.Field Mobile;
            public MSSQL.Field Email;
            public MSSQL.Field QQ;
            public MSSQL.Field ServiceTelephone;
            public MSSQL.Field ICPCert;
            public MSSQL.Field Level;
            public MSSQL.Field ON;
            public MSSQL.Field BonusScale;
            public MSSQL.Field MaxSubSites;
            public MSSQL.Field UseLotteryListRestrictions;
            public MSSQL.Field UseLotteryList;
            public MSSQL.Field UseLotteryListQuickBuy;
            public MSSQL.Field Opt_BettingStationName;
            public MSSQL.Field Opt_BettingStationNumber;
            public MSSQL.Field Opt_BettingStationAddress;
            public MSSQL.Field Opt_BettingStationTelephone;
            public MSSQL.Field Opt_BettingStationContactPreson;
            public MSSQL.Field Opt_EmailServer_From;
            public MSSQL.Field Opt_EmailServer_EmailServer;
            public MSSQL.Field Opt_EmailServer_UserName;
            public MSSQL.Field Opt_EmailServer_Password;
            public MSSQL.Field Opt_ISP_HostName;
            public MSSQL.Field Opt_ISP_HostPort;
            public MSSQL.Field Opt_ISP_UserID;
            public MSSQL.Field Opt_ISP_UserPassword;
            public MSSQL.Field Opt_ISP_RegCode;
            public MSSQL.Field Opt_ISP_ServiceNumber;
            public MSSQL.Field Opt_ForumUrl;
            public MSSQL.Field Opt_MobileCheckCharset;
            public MSSQL.Field Opt_MobileCheckStringLength;
            public MSSQL.Field Opt_SMSPayType;
            public MSSQL.Field Opt_SMSPrice;
            public MSSQL.Field Opt_isUseCheckCode;
            public MSSQL.Field Opt_CheckCodeCharset;
            public MSSQL.Field Opt_isWriteLog;
            public MSSQL.Field Opt_InitiateSchemeBonusScale;
            public MSSQL.Field Opt_InitiateSchemeMinBuyScale;
            public MSSQL.Field Opt_InitiateSchemeMinBuyAndAssureScale;
            public MSSQL.Field Opt_InitiateSchemeMaxNum;
            public MSSQL.Field Opt_InitiateFollowSchemeMaxNum;
            public MSSQL.Field Opt_QuashSchemeMaxNum;
            public MSSQL.Field Opt_FullSchemeCanQuash;
            public MSSQL.Field Opt_SchemeMinMoney;
            public MSSQL.Field Opt_SchemeMaxMoney;
            public MSSQL.Field Opt_FirstPageUnionBuyMaxRows;
            public MSSQL.Field Opt_isFirstPageUnionBuyWithAll;
            public MSSQL.Field Opt_isBuyValidPasswordAdv;
            public MSSQL.Field Opt_MaxShowLotteryNumberRows;
            public MSSQL.Field Opt_LotteryCountOfMenuBarRow;
            public MSSQL.Field Opt_ScoringOfSelfBuy;
            public MSSQL.Field Opt_ScoringOfCommendBuy;
            public MSSQL.Field Opt_ScoringExchangeRate;
            public MSSQL.Field Opt_Scoring_Status_ON;
            public MSSQL.Field Opt_SchemeChatRoom_StopChatDaysAfterOpened;
            public MSSQL.Field Opt_SchemeChatRoom_MaxChatNumberOf;
            public MSSQL.Field Opt_isShowFloatAD;
            public MSSQL.Field Opt_MemberSharing_Alipay_Status_ON;
            public MSSQL.Field Opt_CpsBonusScale;
            public MSSQL.Field Opt_Cps_Status_ON;
            public MSSQL.Field Opt_Experts_Status_ON;
            public MSSQL.Field Opt_PageTitle;
            public MSSQL.Field Opt_PageKeywords;
            public MSSQL.Field Opt_DefaultFirstPageType;
            public MSSQL.Field Opt_DefaultLotteryFirstPageType;
            public MSSQL.Field Opt_LotteryChannelPage;
            public MSSQL.Field Opt_isShowSMSSubscriptionNavigate;
            public MSSQL.Field Opt_isShowChartNavigate;
            public MSSQL.Field Opt_RoomStyle;
            public MSSQL.Field Opt_RoomLogoUrl;
            public MSSQL.Field Opt_UpdateLotteryDateTime;
            public MSSQL.Field Opt_InitiateSchemeLimitLowerScaleMoney;
            public MSSQL.Field Opt_InitiateSchemeLimitLowerScale;
            public MSSQL.Field Opt_InitiateSchemeLimitUpperScaleMoney;
            public MSSQL.Field Opt_InitiateSchemeLimitUpperScale;
            public MSSQL.Field Opt_About;
            public MSSQL.Field Opt_RightFloatADContent;
            public MSSQL.Field Opt_ContactUS;
            public MSSQL.Field Opt_UserRegisterAgreement;
            public MSSQL.Field Opt_SurrogateFAQ;
            public MSSQL.Field Opt_OfficialAuthorization;
            public MSSQL.Field Opt_CompanyQualification;
            public MSSQL.Field Opt_ExpertsNote;
            public MSSQL.Field Opt_SMSSubscription;
            public MSSQL.Field Opt_LawAffirmsThat;
            public MSSQL.Field Opt_CpsPolicies;
            public MSSQL.Field TemplateEmail_Register;
            public MSSQL.Field TemplateEmail_RegisterAdv;
            public MSSQL.Field TemplateEmail_ForgetPassword;
            public MSSQL.Field TemplateEmail_UserEdit;
            public MSSQL.Field TemplateEmail_UserEditAdv;
            public MSSQL.Field TemplateEmail_InitiateScheme;
            public MSSQL.Field TemplateEmail_JoinScheme;
            public MSSQL.Field TemplateEmail_InitiateChaseTask;
            public MSSQL.Field TemplateEmail_ExecChaseTaskDetail;
            public MSSQL.Field TemplateEmail_TryDistill;
            public MSSQL.Field TemplateEmail_DistillAccept;
            public MSSQL.Field TemplateEmail_DistillNoAccept;
            public MSSQL.Field TemplateEmail_Quash;
            public MSSQL.Field TemplateEmail_QuashScheme;
            public MSSQL.Field TemplateEmail_QuashChaseTaskDetail;
            public MSSQL.Field TemplateEmail_QuashChaseTask;
            public MSSQL.Field TemplateEmail_Win;
            public MSSQL.Field TemplateEmail_MobileValid;
            public MSSQL.Field TemplateEmail_MobileValided;
            public MSSQL.Field TemplateStationSMS_Register;
            public MSSQL.Field TemplateStationSMS_RegisterAdv;
            public MSSQL.Field TemplateStationSMS_ForgetPassword;
            public MSSQL.Field TemplateStationSMS_UserEdit;
            public MSSQL.Field TemplateStationSMS_UserEditAdv;
            public MSSQL.Field TemplateStationSMS_InitiateScheme;
            public MSSQL.Field TemplateStationSMS_JoinScheme;
            public MSSQL.Field TemplateStationSMS_InitiateChaseTask;
            public MSSQL.Field TemplateStationSMS_ExecChaseTaskDetail;
            public MSSQL.Field TemplateStationSMS_TryDistill;
            public MSSQL.Field TemplateStationSMS_DistillAccept;
            public MSSQL.Field TemplateStationSMS_DistillNoAccept;
            public MSSQL.Field TemplateStationSMS_Quash;
            public MSSQL.Field TemplateStationSMS_QuashScheme;
            public MSSQL.Field TemplateStationSMS_QuashChaseTaskDetail;
            public MSSQL.Field TemplateStationSMS_QuashChaseTask;
            public MSSQL.Field TemplateStationSMS_Win;
            public MSSQL.Field TemplateStationSMS_MobileValid;
            public MSSQL.Field TemplateStationSMS_MobileValided;
            public MSSQL.Field TemplateSMS_Register;
            public MSSQL.Field TemplateSMS_RegisterAdv;
            public MSSQL.Field TemplateSMS_ForgetPassword;
            public MSSQL.Field TemplateSMS_UserEdit;
            public MSSQL.Field TemplateSMS_UserEditAdv;
            public MSSQL.Field TemplateSMS_InitiateScheme;
            public MSSQL.Field TemplateSMS_JoinScheme;
            public MSSQL.Field TemplateSMS_InitiateChaseTask;
            public MSSQL.Field TemplateSMS_ExecChaseTaskDetail;
            public MSSQL.Field TemplateSMS_TryDistill;
            public MSSQL.Field TemplateSMS_DistillAccept;
            public MSSQL.Field TemplateSMS_DistillNoAccept;
            public MSSQL.Field TemplateSMS_Quash;
            public MSSQL.Field TemplateSMS_QuashScheme;
            public MSSQL.Field TemplateSMS_QuashChaseTaskDetail;
            public MSSQL.Field TemplateSMS_QuashChaseTask;
            public MSSQL.Field TemplateSMS_Win;
            public MSSQL.Field TemplateSMS_MobileValid;
            public MSSQL.Field TemplateSMS_MobileValided;
            public MSSQL.Field Opt_CPSRegisterAgreement;
            public MSSQL.Field Opt_PromotionMemberBonusScale;
            public MSSQL.Field Opt_PromotionSiteBonusScale;
            public MSSQL.Field Opt_Promotion_Status_ON;
            public MSSQL.Field Opt_FloatNotifiesTime;
            public MSSQL.Field Opt_Score_Compendium;
            public MSSQL.Field Opt_Score_PrententType;
            public MSSQL.Field TemplateEmail_IntiateCustomChase;
            public MSSQL.Field TemplateStationSMS_IntiateCustomChase;
            public MSSQL.Field TemplateSMS_IntiateCustomChase;
            public MSSQL.Field TemplateEmail_CustomChaseWin;
            public MSSQL.Field TemplateStationSMS_CustomChaseWin;
            public MSSQL.Field TemplateSMS_CustomChaseWin;
            public MSSQL.Field TheTopScheduleOfInitiateCanQuashScheme;
            public MSSQL.Field ScheduleOfAllCanNotQuashScheme;
            public MSSQL.Field opt_BettingAgreement;
            public MSSQL.Field Opt_SpreadCommission;

            public T_Sites()
            {
                TableName = "T_Sites";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                ParentID = new MSSQL.Field(this, "ParentID", "ParentID", SqlDbType.BigInt, false);
                OwnerUserID = new MSSQL.Field(this, "OwnerUserID", "OwnerUserID", SqlDbType.BigInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                LogoUrl = new MSSQL.Field(this, "LogoUrl", "LogoUrl", SqlDbType.VarChar, false);
                Company = new MSSQL.Field(this, "Company", "Company", SqlDbType.VarChar, false);
                Address = new MSSQL.Field(this, "Address", "Address", SqlDbType.VarChar, false);
                PostCode = new MSSQL.Field(this, "PostCode", "PostCode", SqlDbType.VarChar, false);
                ResponsiblePerson = new MSSQL.Field(this, "ResponsiblePerson", "ResponsiblePerson", SqlDbType.VarChar, false);
                ContactPerson = new MSSQL.Field(this, "ContactPerson", "ContactPerson", SqlDbType.VarChar, false);
                Telephone = new MSSQL.Field(this, "Telephone", "Telephone", SqlDbType.VarChar, false);
                Fax = new MSSQL.Field(this, "Fax", "Fax", SqlDbType.VarChar, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.VarChar, false);
                QQ = new MSSQL.Field(this, "QQ", "QQ", SqlDbType.VarChar, false);
                ServiceTelephone = new MSSQL.Field(this, "ServiceTelephone", "ServiceTelephone", SqlDbType.VarChar, false);
                ICPCert = new MSSQL.Field(this, "ICPCert", "ICPCert", SqlDbType.VarChar, false);
                Level = new MSSQL.Field(this, "Level", "Level", SqlDbType.SmallInt, false);
                ON = new MSSQL.Field(this, "ON", "ON", SqlDbType.Bit, false);
                BonusScale = new MSSQL.Field(this, "BonusScale", "BonusScale", SqlDbType.Float, false);
                MaxSubSites = new MSSQL.Field(this, "MaxSubSites", "MaxSubSites", SqlDbType.Int, false);
                UseLotteryListRestrictions = new MSSQL.Field(this, "UseLotteryListRestrictions", "UseLotteryListRestrictions", SqlDbType.VarChar, false);
                UseLotteryList = new MSSQL.Field(this, "UseLotteryList", "UseLotteryList", SqlDbType.VarChar, false);
                UseLotteryListQuickBuy = new MSSQL.Field(this, "UseLotteryListQuickBuy", "UseLotteryListQuickBuy", SqlDbType.VarChar, false);
                Opt_BettingStationName = new MSSQL.Field(this, "Opt_BettingStationName", "Opt_BettingStationName", SqlDbType.VarChar, false);
                Opt_BettingStationNumber = new MSSQL.Field(this, "Opt_BettingStationNumber", "Opt_BettingStationNumber", SqlDbType.VarChar, false);
                Opt_BettingStationAddress = new MSSQL.Field(this, "Opt_BettingStationAddress", "Opt_BettingStationAddress", SqlDbType.VarChar, false);
                Opt_BettingStationTelephone = new MSSQL.Field(this, "Opt_BettingStationTelephone", "Opt_BettingStationTelephone", SqlDbType.VarChar, false);
                Opt_BettingStationContactPreson = new MSSQL.Field(this, "Opt_BettingStationContactPreson", "Opt_BettingStationContactPreson", SqlDbType.VarChar, false);
                Opt_EmailServer_From = new MSSQL.Field(this, "Opt_EmailServer_From", "Opt_EmailServer_From", SqlDbType.NVarChar, false);
                Opt_EmailServer_EmailServer = new MSSQL.Field(this, "Opt_EmailServer_EmailServer", "Opt_EmailServer_EmailServer", SqlDbType.NVarChar, false);
                Opt_EmailServer_UserName = new MSSQL.Field(this, "Opt_EmailServer_UserName", "Opt_EmailServer_UserName", SqlDbType.NVarChar, false);
                Opt_EmailServer_Password = new MSSQL.Field(this, "Opt_EmailServer_Password", "Opt_EmailServer_Password", SqlDbType.NVarChar, false);
                Opt_ISP_HostName = new MSSQL.Field(this, "Opt_ISP_HostName", "Opt_ISP_HostName", SqlDbType.VarChar, false);
                Opt_ISP_HostPort = new MSSQL.Field(this, "Opt_ISP_HostPort", "Opt_ISP_HostPort", SqlDbType.VarChar, false);
                Opt_ISP_UserID = new MSSQL.Field(this, "Opt_ISP_UserID", "Opt_ISP_UserID", SqlDbType.VarChar, false);
                Opt_ISP_UserPassword = new MSSQL.Field(this, "Opt_ISP_UserPassword", "Opt_ISP_UserPassword", SqlDbType.VarChar, false);
                Opt_ISP_RegCode = new MSSQL.Field(this, "Opt_ISP_RegCode", "Opt_ISP_RegCode", SqlDbType.VarChar, false);
                Opt_ISP_ServiceNumber = new MSSQL.Field(this, "Opt_ISP_ServiceNumber", "Opt_ISP_ServiceNumber", SqlDbType.VarChar, false);
                Opt_ForumUrl = new MSSQL.Field(this, "Opt_ForumUrl", "Opt_ForumUrl", SqlDbType.VarChar, false);
                Opt_MobileCheckCharset = new MSSQL.Field(this, "Opt_MobileCheckCharset", "Opt_MobileCheckCharset", SqlDbType.SmallInt, false);
                Opt_MobileCheckStringLength = new MSSQL.Field(this, "Opt_MobileCheckStringLength", "Opt_MobileCheckStringLength", SqlDbType.SmallInt, false);
                Opt_SMSPayType = new MSSQL.Field(this, "Opt_SMSPayType", "Opt_SMSPayType", SqlDbType.SmallInt, false);
                Opt_SMSPrice = new MSSQL.Field(this, "Opt_SMSPrice", "Opt_SMSPrice", SqlDbType.Money, false);
                Opt_isUseCheckCode = new MSSQL.Field(this, "Opt_isUseCheckCode", "Opt_isUseCheckCode", SqlDbType.Bit, false);
                Opt_CheckCodeCharset = new MSSQL.Field(this, "Opt_CheckCodeCharset", "Opt_CheckCodeCharset", SqlDbType.SmallInt, false);
                Opt_isWriteLog = new MSSQL.Field(this, "Opt_isWriteLog", "Opt_isWriteLog", SqlDbType.Bit, false);
                Opt_InitiateSchemeBonusScale = new MSSQL.Field(this, "Opt_InitiateSchemeBonusScale", "Opt_InitiateSchemeBonusScale", SqlDbType.Float, false);
                Opt_InitiateSchemeMinBuyScale = new MSSQL.Field(this, "Opt_InitiateSchemeMinBuyScale", "Opt_InitiateSchemeMinBuyScale", SqlDbType.Float, false);
                Opt_InitiateSchemeMinBuyAndAssureScale = new MSSQL.Field(this, "Opt_InitiateSchemeMinBuyAndAssureScale", "Opt_InitiateSchemeMinBuyAndAssureScale", SqlDbType.Float, false);
                Opt_InitiateSchemeMaxNum = new MSSQL.Field(this, "Opt_InitiateSchemeMaxNum", "Opt_InitiateSchemeMaxNum", SqlDbType.SmallInt, false);
                Opt_InitiateFollowSchemeMaxNum = new MSSQL.Field(this, "Opt_InitiateFollowSchemeMaxNum", "Opt_InitiateFollowSchemeMaxNum", SqlDbType.SmallInt, false);
                Opt_QuashSchemeMaxNum = new MSSQL.Field(this, "Opt_QuashSchemeMaxNum", "Opt_QuashSchemeMaxNum", SqlDbType.SmallInt, false);
                Opt_FullSchemeCanQuash = new MSSQL.Field(this, "Opt_FullSchemeCanQuash", "Opt_FullSchemeCanQuash", SqlDbType.Bit, false);
                Opt_SchemeMinMoney = new MSSQL.Field(this, "Opt_SchemeMinMoney", "Opt_SchemeMinMoney", SqlDbType.Money, false);
                Opt_SchemeMaxMoney = new MSSQL.Field(this, "Opt_SchemeMaxMoney", "Opt_SchemeMaxMoney", SqlDbType.Money, false);
                Opt_FirstPageUnionBuyMaxRows = new MSSQL.Field(this, "Opt_FirstPageUnionBuyMaxRows", "Opt_FirstPageUnionBuyMaxRows", SqlDbType.SmallInt, false);
                Opt_isFirstPageUnionBuyWithAll = new MSSQL.Field(this, "Opt_isFirstPageUnionBuyWithAll", "Opt_isFirstPageUnionBuyWithAll", SqlDbType.Bit, false);
                Opt_isBuyValidPasswordAdv = new MSSQL.Field(this, "Opt_isBuyValidPasswordAdv", "Opt_isBuyValidPasswordAdv", SqlDbType.Bit, false);
                Opt_MaxShowLotteryNumberRows = new MSSQL.Field(this, "Opt_MaxShowLotteryNumberRows", "Opt_MaxShowLotteryNumberRows", SqlDbType.SmallInt, false);
                Opt_LotteryCountOfMenuBarRow = new MSSQL.Field(this, "Opt_LotteryCountOfMenuBarRow", "Opt_LotteryCountOfMenuBarRow", SqlDbType.SmallInt, false);
                Opt_ScoringOfSelfBuy = new MSSQL.Field(this, "Opt_ScoringOfSelfBuy", "Opt_ScoringOfSelfBuy", SqlDbType.Float, false);
                Opt_ScoringOfCommendBuy = new MSSQL.Field(this, "Opt_ScoringOfCommendBuy", "Opt_ScoringOfCommendBuy", SqlDbType.Float, false);
                Opt_ScoringExchangeRate = new MSSQL.Field(this, "Opt_ScoringExchangeRate", "Opt_ScoringExchangeRate", SqlDbType.Float, false);
                Opt_Scoring_Status_ON = new MSSQL.Field(this, "Opt_Scoring_Status_ON", "Opt_Scoring_Status_ON", SqlDbType.Bit, false);
                Opt_SchemeChatRoom_StopChatDaysAfterOpened = new MSSQL.Field(this, "Opt_SchemeChatRoom_StopChatDaysAfterOpened", "Opt_SchemeChatRoom_StopChatDaysAfterOpened", SqlDbType.SmallInt, false);
                Opt_SchemeChatRoom_MaxChatNumberOf = new MSSQL.Field(this, "Opt_SchemeChatRoom_MaxChatNumberOf", "Opt_SchemeChatRoom_MaxChatNumberOf", SqlDbType.SmallInt, false);
                Opt_isShowFloatAD = new MSSQL.Field(this, "Opt_isShowFloatAD", "Opt_isShowFloatAD", SqlDbType.Bit, false);
                Opt_MemberSharing_Alipay_Status_ON = new MSSQL.Field(this, "Opt_MemberSharing_Alipay_Status_ON", "Opt_MemberSharing_Alipay_Status_ON", SqlDbType.Bit, false);
                Opt_CpsBonusScale = new MSSQL.Field(this, "Opt_CpsBonusScale", "Opt_CpsBonusScale", SqlDbType.Float, false);
                Opt_Cps_Status_ON = new MSSQL.Field(this, "Opt_Cps_Status_ON", "Opt_Cps_Status_ON", SqlDbType.Bit, false);
                Opt_Experts_Status_ON = new MSSQL.Field(this, "Opt_Experts_Status_ON", "Opt_Experts_Status_ON", SqlDbType.Bit, false);
                Opt_PageTitle = new MSSQL.Field(this, "Opt_PageTitle", "Opt_PageTitle", SqlDbType.VarChar, false);
                Opt_PageKeywords = new MSSQL.Field(this, "Opt_PageKeywords", "Opt_PageKeywords", SqlDbType.VarChar, false);
                Opt_DefaultFirstPageType = new MSSQL.Field(this, "Opt_DefaultFirstPageType", "Opt_DefaultFirstPageType", SqlDbType.SmallInt, false);
                Opt_DefaultLotteryFirstPageType = new MSSQL.Field(this, "Opt_DefaultLotteryFirstPageType", "Opt_DefaultLotteryFirstPageType", SqlDbType.SmallInt, false);
                Opt_LotteryChannelPage = new MSSQL.Field(this, "Opt_LotteryChannelPage", "Opt_LotteryChannelPage", SqlDbType.VarChar, false);
                Opt_isShowSMSSubscriptionNavigate = new MSSQL.Field(this, "Opt_isShowSMSSubscriptionNavigate", "Opt_isShowSMSSubscriptionNavigate", SqlDbType.Bit, false);
                Opt_isShowChartNavigate = new MSSQL.Field(this, "Opt_isShowChartNavigate", "Opt_isShowChartNavigate", SqlDbType.Bit, false);
                Opt_RoomStyle = new MSSQL.Field(this, "Opt_RoomStyle", "Opt_RoomStyle", SqlDbType.SmallInt, false);
                Opt_RoomLogoUrl = new MSSQL.Field(this, "Opt_RoomLogoUrl", "Opt_RoomLogoUrl", SqlDbType.VarChar, false);
                Opt_UpdateLotteryDateTime = new MSSQL.Field(this, "Opt_UpdateLotteryDateTime", "Opt_UpdateLotteryDateTime", SqlDbType.DateTime, false);
                Opt_InitiateSchemeLimitLowerScaleMoney = new MSSQL.Field(this, "Opt_InitiateSchemeLimitLowerScaleMoney", "Opt_InitiateSchemeLimitLowerScaleMoney", SqlDbType.Money, false);
                Opt_InitiateSchemeLimitLowerScale = new MSSQL.Field(this, "Opt_InitiateSchemeLimitLowerScale", "Opt_InitiateSchemeLimitLowerScale", SqlDbType.Float, false);
                Opt_InitiateSchemeLimitUpperScaleMoney = new MSSQL.Field(this, "Opt_InitiateSchemeLimitUpperScaleMoney", "Opt_InitiateSchemeLimitUpperScaleMoney", SqlDbType.Money, false);
                Opt_InitiateSchemeLimitUpperScale = new MSSQL.Field(this, "Opt_InitiateSchemeLimitUpperScale", "Opt_InitiateSchemeLimitUpperScale", SqlDbType.Float, false);
                Opt_About = new MSSQL.Field(this, "Opt_About", "Opt_About", SqlDbType.VarChar, false);
                Opt_RightFloatADContent = new MSSQL.Field(this, "Opt_RightFloatADContent", "Opt_RightFloatADContent", SqlDbType.VarChar, false);
                Opt_ContactUS = new MSSQL.Field(this, "Opt_ContactUS", "Opt_ContactUS", SqlDbType.VarChar, false);
                Opt_UserRegisterAgreement = new MSSQL.Field(this, "Opt_UserRegisterAgreement", "Opt_UserRegisterAgreement", SqlDbType.VarChar, false);
                Opt_SurrogateFAQ = new MSSQL.Field(this, "Opt_SurrogateFAQ", "Opt_SurrogateFAQ", SqlDbType.VarChar, false);
                Opt_OfficialAuthorization = new MSSQL.Field(this, "Opt_OfficialAuthorization", "Opt_OfficialAuthorization", SqlDbType.VarChar, false);
                Opt_CompanyQualification = new MSSQL.Field(this, "Opt_CompanyQualification", "Opt_CompanyQualification", SqlDbType.VarChar, false);
                Opt_ExpertsNote = new MSSQL.Field(this, "Opt_ExpertsNote", "Opt_ExpertsNote", SqlDbType.VarChar, false);
                Opt_SMSSubscription = new MSSQL.Field(this, "Opt_SMSSubscription", "Opt_SMSSubscription", SqlDbType.VarChar, false);
                Opt_LawAffirmsThat = new MSSQL.Field(this, "Opt_LawAffirmsThat", "Opt_LawAffirmsThat", SqlDbType.VarChar, false);
                Opt_CpsPolicies = new MSSQL.Field(this, "Opt_CpsPolicies", "Opt_CpsPolicies", SqlDbType.VarChar, false);
                TemplateEmail_Register = new MSSQL.Field(this, "TemplateEmail_Register", "TemplateEmail_Register", SqlDbType.VarChar, false);
                TemplateEmail_RegisterAdv = new MSSQL.Field(this, "TemplateEmail_RegisterAdv", "TemplateEmail_RegisterAdv", SqlDbType.VarChar, false);
                TemplateEmail_ForgetPassword = new MSSQL.Field(this, "TemplateEmail_ForgetPassword", "TemplateEmail_ForgetPassword", SqlDbType.VarChar, false);
                TemplateEmail_UserEdit = new MSSQL.Field(this, "TemplateEmail_UserEdit", "TemplateEmail_UserEdit", SqlDbType.VarChar, false);
                TemplateEmail_UserEditAdv = new MSSQL.Field(this, "TemplateEmail_UserEditAdv", "TemplateEmail_UserEditAdv", SqlDbType.VarChar, false);
                TemplateEmail_InitiateScheme = new MSSQL.Field(this, "TemplateEmail_InitiateScheme", "TemplateEmail_InitiateScheme", SqlDbType.VarChar, false);
                TemplateEmail_JoinScheme = new MSSQL.Field(this, "TemplateEmail_JoinScheme", "TemplateEmail_JoinScheme", SqlDbType.VarChar, false);
                TemplateEmail_InitiateChaseTask = new MSSQL.Field(this, "TemplateEmail_InitiateChaseTask", "TemplateEmail_InitiateChaseTask", SqlDbType.VarChar, false);
                TemplateEmail_ExecChaseTaskDetail = new MSSQL.Field(this, "TemplateEmail_ExecChaseTaskDetail", "TemplateEmail_ExecChaseTaskDetail", SqlDbType.VarChar, false);
                TemplateEmail_TryDistill = new MSSQL.Field(this, "TemplateEmail_TryDistill", "TemplateEmail_TryDistill", SqlDbType.VarChar, false);
                TemplateEmail_DistillAccept = new MSSQL.Field(this, "TemplateEmail_DistillAccept", "TemplateEmail_DistillAccept", SqlDbType.VarChar, false);
                TemplateEmail_DistillNoAccept = new MSSQL.Field(this, "TemplateEmail_DistillNoAccept", "TemplateEmail_DistillNoAccept", SqlDbType.VarChar, false);
                TemplateEmail_Quash = new MSSQL.Field(this, "TemplateEmail_Quash", "TemplateEmail_Quash", SqlDbType.VarChar, false);
                TemplateEmail_QuashScheme = new MSSQL.Field(this, "TemplateEmail_QuashScheme", "TemplateEmail_QuashScheme", SqlDbType.VarChar, false);
                TemplateEmail_QuashChaseTaskDetail = new MSSQL.Field(this, "TemplateEmail_QuashChaseTaskDetail", "TemplateEmail_QuashChaseTaskDetail", SqlDbType.VarChar, false);
                TemplateEmail_QuashChaseTask = new MSSQL.Field(this, "TemplateEmail_QuashChaseTask", "TemplateEmail_QuashChaseTask", SqlDbType.VarChar, false);
                TemplateEmail_Win = new MSSQL.Field(this, "TemplateEmail_Win", "TemplateEmail_Win", SqlDbType.VarChar, false);
                TemplateEmail_MobileValid = new MSSQL.Field(this, "TemplateEmail_MobileValid", "TemplateEmail_MobileValid", SqlDbType.VarChar, false);
                TemplateEmail_MobileValided = new MSSQL.Field(this, "TemplateEmail_MobileValided", "TemplateEmail_MobileValided", SqlDbType.VarChar, false);
                TemplateStationSMS_Register = new MSSQL.Field(this, "TemplateStationSMS_Register", "TemplateStationSMS_Register", SqlDbType.VarChar, false);
                TemplateStationSMS_RegisterAdv = new MSSQL.Field(this, "TemplateStationSMS_RegisterAdv", "TemplateStationSMS_RegisterAdv", SqlDbType.VarChar, false);
                TemplateStationSMS_ForgetPassword = new MSSQL.Field(this, "TemplateStationSMS_ForgetPassword", "TemplateStationSMS_ForgetPassword", SqlDbType.VarChar, false);
                TemplateStationSMS_UserEdit = new MSSQL.Field(this, "TemplateStationSMS_UserEdit", "TemplateStationSMS_UserEdit", SqlDbType.VarChar, false);
                TemplateStationSMS_UserEditAdv = new MSSQL.Field(this, "TemplateStationSMS_UserEditAdv", "TemplateStationSMS_UserEditAdv", SqlDbType.VarChar, false);
                TemplateStationSMS_InitiateScheme = new MSSQL.Field(this, "TemplateStationSMS_InitiateScheme", "TemplateStationSMS_InitiateScheme", SqlDbType.VarChar, false);
                TemplateStationSMS_JoinScheme = new MSSQL.Field(this, "TemplateStationSMS_JoinScheme", "TemplateStationSMS_JoinScheme", SqlDbType.VarChar, false);
                TemplateStationSMS_InitiateChaseTask = new MSSQL.Field(this, "TemplateStationSMS_InitiateChaseTask", "TemplateStationSMS_InitiateChaseTask", SqlDbType.VarChar, false);
                TemplateStationSMS_ExecChaseTaskDetail = new MSSQL.Field(this, "TemplateStationSMS_ExecChaseTaskDetail", "TemplateStationSMS_ExecChaseTaskDetail", SqlDbType.VarChar, false);
                TemplateStationSMS_TryDistill = new MSSQL.Field(this, "TemplateStationSMS_TryDistill", "TemplateStationSMS_TryDistill", SqlDbType.VarChar, false);
                TemplateStationSMS_DistillAccept = new MSSQL.Field(this, "TemplateStationSMS_DistillAccept", "TemplateStationSMS_DistillAccept", SqlDbType.VarChar, false);
                TemplateStationSMS_DistillNoAccept = new MSSQL.Field(this, "TemplateStationSMS_DistillNoAccept", "TemplateStationSMS_DistillNoAccept", SqlDbType.VarChar, false);
                TemplateStationSMS_Quash = new MSSQL.Field(this, "TemplateStationSMS_Quash", "TemplateStationSMS_Quash", SqlDbType.VarChar, false);
                TemplateStationSMS_QuashScheme = new MSSQL.Field(this, "TemplateStationSMS_QuashScheme", "TemplateStationSMS_QuashScheme", SqlDbType.VarChar, false);
                TemplateStationSMS_QuashChaseTaskDetail = new MSSQL.Field(this, "TemplateStationSMS_QuashChaseTaskDetail", "TemplateStationSMS_QuashChaseTaskDetail", SqlDbType.VarChar, false);
                TemplateStationSMS_QuashChaseTask = new MSSQL.Field(this, "TemplateStationSMS_QuashChaseTask", "TemplateStationSMS_QuashChaseTask", SqlDbType.VarChar, false);
                TemplateStationSMS_Win = new MSSQL.Field(this, "TemplateStationSMS_Win", "TemplateStationSMS_Win", SqlDbType.VarChar, false);
                TemplateStationSMS_MobileValid = new MSSQL.Field(this, "TemplateStationSMS_MobileValid", "TemplateStationSMS_MobileValid", SqlDbType.VarChar, false);
                TemplateStationSMS_MobileValided = new MSSQL.Field(this, "TemplateStationSMS_MobileValided", "TemplateStationSMS_MobileValided", SqlDbType.VarChar, false);
                TemplateSMS_Register = new MSSQL.Field(this, "TemplateSMS_Register", "TemplateSMS_Register", SqlDbType.VarChar, false);
                TemplateSMS_RegisterAdv = new MSSQL.Field(this, "TemplateSMS_RegisterAdv", "TemplateSMS_RegisterAdv", SqlDbType.VarChar, false);
                TemplateSMS_ForgetPassword = new MSSQL.Field(this, "TemplateSMS_ForgetPassword", "TemplateSMS_ForgetPassword", SqlDbType.VarChar, false);
                TemplateSMS_UserEdit = new MSSQL.Field(this, "TemplateSMS_UserEdit", "TemplateSMS_UserEdit", SqlDbType.VarChar, false);
                TemplateSMS_UserEditAdv = new MSSQL.Field(this, "TemplateSMS_UserEditAdv", "TemplateSMS_UserEditAdv", SqlDbType.VarChar, false);
                TemplateSMS_InitiateScheme = new MSSQL.Field(this, "TemplateSMS_InitiateScheme", "TemplateSMS_InitiateScheme", SqlDbType.VarChar, false);
                TemplateSMS_JoinScheme = new MSSQL.Field(this, "TemplateSMS_JoinScheme", "TemplateSMS_JoinScheme", SqlDbType.VarChar, false);
                TemplateSMS_InitiateChaseTask = new MSSQL.Field(this, "TemplateSMS_InitiateChaseTask", "TemplateSMS_InitiateChaseTask", SqlDbType.VarChar, false);
                TemplateSMS_ExecChaseTaskDetail = new MSSQL.Field(this, "TemplateSMS_ExecChaseTaskDetail", "TemplateSMS_ExecChaseTaskDetail", SqlDbType.VarChar, false);
                TemplateSMS_TryDistill = new MSSQL.Field(this, "TemplateSMS_TryDistill", "TemplateSMS_TryDistill", SqlDbType.VarChar, false);
                TemplateSMS_DistillAccept = new MSSQL.Field(this, "TemplateSMS_DistillAccept", "TemplateSMS_DistillAccept", SqlDbType.VarChar, false);
                TemplateSMS_DistillNoAccept = new MSSQL.Field(this, "TemplateSMS_DistillNoAccept", "TemplateSMS_DistillNoAccept", SqlDbType.VarChar, false);
                TemplateSMS_Quash = new MSSQL.Field(this, "TemplateSMS_Quash", "TemplateSMS_Quash", SqlDbType.VarChar, false);
                TemplateSMS_QuashScheme = new MSSQL.Field(this, "TemplateSMS_QuashScheme", "TemplateSMS_QuashScheme", SqlDbType.VarChar, false);
                TemplateSMS_QuashChaseTaskDetail = new MSSQL.Field(this, "TemplateSMS_QuashChaseTaskDetail", "TemplateSMS_QuashChaseTaskDetail", SqlDbType.VarChar, false);
                TemplateSMS_QuashChaseTask = new MSSQL.Field(this, "TemplateSMS_QuashChaseTask", "TemplateSMS_QuashChaseTask", SqlDbType.VarChar, false);
                TemplateSMS_Win = new MSSQL.Field(this, "TemplateSMS_Win", "TemplateSMS_Win", SqlDbType.VarChar, false);
                TemplateSMS_MobileValid = new MSSQL.Field(this, "TemplateSMS_MobileValid", "TemplateSMS_MobileValid", SqlDbType.VarChar, false);
                TemplateSMS_MobileValided = new MSSQL.Field(this, "TemplateSMS_MobileValided", "TemplateSMS_MobileValided", SqlDbType.VarChar, false);
                Opt_CPSRegisterAgreement = new MSSQL.Field(this, "Opt_CPSRegisterAgreement", "Opt_CPSRegisterAgreement", SqlDbType.VarChar, false);
                Opt_PromotionMemberBonusScale = new MSSQL.Field(this, "Opt_PromotionMemberBonusScale", "Opt_PromotionMemberBonusScale", SqlDbType.Float, false);
                Opt_PromotionSiteBonusScale = new MSSQL.Field(this, "Opt_PromotionSiteBonusScale", "Opt_PromotionSiteBonusScale", SqlDbType.Float, false);
                Opt_Promotion_Status_ON = new MSSQL.Field(this, "Opt_Promotion_Status_ON", "Opt_Promotion_Status_ON", SqlDbType.Bit, false);
                Opt_FloatNotifiesTime = new MSSQL.Field(this, "Opt_FloatNotifiesTime", "Opt_FloatNotifiesTime", SqlDbType.SmallInt, false);
                Opt_Score_Compendium = new MSSQL.Field(this, "Opt_Score_Compendium", "Opt_Score_Compendium", SqlDbType.Decimal, false);
                Opt_Score_PrententType = new MSSQL.Field(this, "Opt_Score_PrententType", "Opt_Score_PrententType", SqlDbType.SmallInt, false);
                TemplateEmail_IntiateCustomChase = new MSSQL.Field(this, "TemplateEmail_IntiateCustomChase", "TemplateEmail_IntiateCustomChase", SqlDbType.VarChar, false);
                TemplateStationSMS_IntiateCustomChase = new MSSQL.Field(this, "TemplateStationSMS_IntiateCustomChase", "TemplateStationSMS_IntiateCustomChase", SqlDbType.VarChar, false);
                TemplateSMS_IntiateCustomChase = new MSSQL.Field(this, "TemplateSMS_IntiateCustomChase", "TemplateSMS_IntiateCustomChase", SqlDbType.VarChar, false);
                TemplateEmail_CustomChaseWin = new MSSQL.Field(this, "TemplateEmail_CustomChaseWin", "TemplateEmail_CustomChaseWin", SqlDbType.VarChar, false);
                TemplateStationSMS_CustomChaseWin = new MSSQL.Field(this, "TemplateStationSMS_CustomChaseWin", "TemplateStationSMS_CustomChaseWin", SqlDbType.VarChar, false);
                TemplateSMS_CustomChaseWin = new MSSQL.Field(this, "TemplateSMS_CustomChaseWin", "TemplateSMS_CustomChaseWin", SqlDbType.VarChar, false);
                TheTopScheduleOfInitiateCanQuashScheme = new MSSQL.Field(this, "TheTopScheduleOfInitiateCanQuashScheme", "TheTopScheduleOfInitiateCanQuashScheme", SqlDbType.Float, false);
                ScheduleOfAllCanNotQuashScheme = new MSSQL.Field(this, "ScheduleOfAllCanNotQuashScheme", "ScheduleOfAllCanNotQuashScheme", SqlDbType.Float, false);
                opt_BettingAgreement = new MSSQL.Field(this, "opt_BettingAgreement", "opt_BettingAgreement", SqlDbType.Text, false);
                Opt_SpreadCommission = new MSSQL.Field(this, "Opt_SpreadCommission", "Opt_SpreadCommission", SqlDbType.VarChar, false);
            }
        }

        public class T_SiteSendNotificationTypes : MSSQL.TableBase
        {
            public MSSQL.Field SiteID;
            public MSSQL.Field Manner;
            public MSSQL.Field NotificationTypeID;

            public T_SiteSendNotificationTypes()
            {
                TableName = "T_SiteSendNotificationTypes";

                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                Manner = new MSSQL.Field(this, "Manner", "Manner", SqlDbType.SmallInt, false);
                NotificationTypeID = new MSSQL.Field(this, "NotificationTypeID", "NotificationTypeID", SqlDbType.SmallInt, false);
            }
        }

        public class T_SiteUrls : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field Url;

            public T_SiteUrls()
            {
                TableName = "T_SiteUrls";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                Url = new MSSQL.Field(this, "Url", "Url", SqlDbType.VarChar, false);
            }
        }

        public class T_SMS : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field SMSID;
            public MSSQL.Field From;
            public MSSQL.Field To;
            public MSSQL.Field DateTime;
            public MSSQL.Field Content;
            public MSSQL.Field IsSent;

            public T_SMS()
            {
                TableName = "T_SMS";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                SMSID = new MSSQL.Field(this, "SMSID", "SMSID", SqlDbType.BigInt, false);
                From = new MSSQL.Field(this, "From", "From", SqlDbType.VarChar, false);
                To = new MSSQL.Field(this, "To", "To", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                IsSent = new MSSQL.Field(this, "IsSent", "IsSent", SqlDbType.Bit, false);
            }
        }

        public class T_SmsBettings : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field SMSID;
            public MSSQL.Field From;
            public MSSQL.Field DateTime;
            public MSSQL.Field Content;
            public MSSQL.Field SchemeID;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandleDescription;

            public T_SmsBettings()
            {
                TableName = "T_SmsBettings";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                SMSID = new MSSQL.Field(this, "SMSID", "SMSID", SqlDbType.BigInt, false);
                From = new MSSQL.Field(this, "From", "From", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.Bit, false);
                HandleDescription = new MSSQL.Field(this, "HandleDescription", "HandleDescription", SqlDbType.VarChar, false);
            }
        }

        public class T_StationSMS : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field SourceID;
            public MSSQL.Field AimID;
            public MSSQL.Field Type;
            public MSSQL.Field DateTime;
            public MSSQL.Field isShow;
            public MSSQL.Field Content;
            public MSSQL.Field isRead;
            public MSSQL.Field title;

            public T_StationSMS()
            {
                TableName = "T_StationSMS";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                SourceID = new MSSQL.Field(this, "SourceID", "SourceID", SqlDbType.BigInt, false);
                AimID = new MSSQL.Field(this, "AimID", "AimID", SqlDbType.BigInt, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.SmallInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
                isRead = new MSSQL.Field(this, "isRead", "isRead", SqlDbType.Bit, false);
                title = new MSSQL.Field(this, "title", "title", SqlDbType.NVarChar, false);
            }
        }

        public class T_SurrogateNotifications : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Title;
            public MSSQL.Field isShow;
            public MSSQL.Field Content;

            public T_SurrogateNotifications()
            {
                TableName = "T_SurrogateNotifications";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.VarChar, false);
                isShow = new MSSQL.Field(this, "isShow", "isShow", SqlDbType.Bit, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
            }
        }

        public class T_SurrogateTrys : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandlelDateTime;
            public MSSQL.Field Name;
            public MSSQL.Field LogoUrl;
            public MSSQL.Field Company;
            public MSSQL.Field Address;
            public MSSQL.Field PostCode;
            public MSSQL.Field ResponsiblePerson;
            public MSSQL.Field ContactPerson;
            public MSSQL.Field Telephone;
            public MSSQL.Field Fax;
            public MSSQL.Field Mobile;
            public MSSQL.Field Email;
            public MSSQL.Field QQ;
            public MSSQL.Field ServiceTelephone;
            public MSSQL.Field UseLotteryList;
            public MSSQL.Field Urls;
            public MSSQL.Field Content;

            public T_SurrogateTrys()
            {
                TableName = "T_SurrogateTrys";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                HandlelDateTime = new MSSQL.Field(this, "HandlelDateTime", "HandlelDateTime", SqlDbType.DateTime, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                LogoUrl = new MSSQL.Field(this, "LogoUrl", "LogoUrl", SqlDbType.VarChar, false);
                Company = new MSSQL.Field(this, "Company", "Company", SqlDbType.VarChar, false);
                Address = new MSSQL.Field(this, "Address", "Address", SqlDbType.VarChar, false);
                PostCode = new MSSQL.Field(this, "PostCode", "PostCode", SqlDbType.VarChar, false);
                ResponsiblePerson = new MSSQL.Field(this, "ResponsiblePerson", "ResponsiblePerson", SqlDbType.VarChar, false);
                ContactPerson = new MSSQL.Field(this, "ContactPerson", "ContactPerson", SqlDbType.VarChar, false);
                Telephone = new MSSQL.Field(this, "Telephone", "Telephone", SqlDbType.VarChar, false);
                Fax = new MSSQL.Field(this, "Fax", "Fax", SqlDbType.VarChar, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.VarChar, false);
                QQ = new MSSQL.Field(this, "QQ", "QQ", SqlDbType.VarChar, false);
                ServiceTelephone = new MSSQL.Field(this, "ServiceTelephone", "ServiceTelephone", SqlDbType.VarChar, false);
                UseLotteryList = new MSSQL.Field(this, "UseLotteryList", "UseLotteryList", SqlDbType.VarChar, false);
                Urls = new MSSQL.Field(this, "Urls", "Urls", SqlDbType.VarChar, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
            }
        }

        public class T_SystemLog : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field IPAddress;
            public MSSQL.Field Description;

            public T_SystemLog()
            {
                TableName = "T_SystemLog";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                IPAddress = new MSSQL.Field(this, "IPAddress", "IPAddress", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.SmallInt, false);
            }
        }

        public class T_TestNumber : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field TestNumber;

            public T_TestNumber()
            {
                TableName = "T_TestNumber";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                TestNumber = new MSSQL.Field(this, "TestNumber", "TestNumber", SqlDbType.VarChar, false);
            }
        }

        public class T_TotalMoney : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field TotalMoney;
            public MSSQL.Field Sales;

            public T_TotalMoney()
            {
                TableName = "T_TotalMoney";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                TotalMoney = new MSSQL.Field(this, "TotalMoney", "TotalMoney", SqlDbType.VarChar, false);
                Sales = new MSSQL.Field(this, "Sales", "Sales", SqlDbType.VarChar, false);
            }
        }

        public class T_TrendCharts : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field TrendChartName;
            public MSSQL.Field TrendChartUrl;
            public MSSQL.Field Order;

            public T_TrendCharts()
            {
                TableName = "T_TrendCharts";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                TrendChartName = new MSSQL.Field(this, "TrendChartName", "TrendChartName", SqlDbType.VarChar, false);
                TrendChartUrl = new MSSQL.Field(this, "TrendChartUrl", "TrendChartUrl", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
            }
        }

        public class T_UnionLinkScale : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UnionID;
            public MSSQL.Field SiteLinkPID;
            public MSSQL.Field BonusScale;

            public T_UnionLinkScale()
            {
                TableName = "T_UnionLinkScale";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UnionID = new MSSQL.Field(this, "UnionID", "UnionID", SqlDbType.BigInt, false);
                SiteLinkPID = new MSSQL.Field(this, "SiteLinkPID", "SiteLinkPID", SqlDbType.VarChar, false);
                BonusScale = new MSSQL.Field(this, "BonusScale", "BonusScale", SqlDbType.Decimal, false);
            }
        }

        public class T_UserBankBindDetails : MSSQL.TableBase
        {
            public MSSQL.Field UserID;
            public MSSQL.Field BankType;
            public MSSQL.Field BankName;
            public MSSQL.Field BankCardNumber;
            public MSSQL.Field BankInProvinceName;
            public MSSQL.Field BankInCityName;
            public MSSQL.Field BankUserName;
            public MSSQL.Field BankTypeName;
            public MSSQL.Field bankId;
            public MSSQL.Field bankInProvinceId;
            public MSSQL.Field bankInCityId;
            public MSSQL.Field bankTypeId;

            public T_UserBankBindDetails()
            {
                TableName = "T_UserBankBindDetails";

                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                BankType = new MSSQL.Field(this, "BankType", "BankType", SqlDbType.BigInt, false);
                BankName = new MSSQL.Field(this, "BankName", "BankName", SqlDbType.VarChar, false);
                BankCardNumber = new MSSQL.Field(this, "BankCardNumber", "BankCardNumber", SqlDbType.VarChar, false);
                BankInProvinceName = new MSSQL.Field(this, "BankInProvinceName", "BankInProvinceName", SqlDbType.VarChar, false);
                BankInCityName = new MSSQL.Field(this, "BankInCityName", "BankInCityName", SqlDbType.VarChar, false);
                BankUserName = new MSSQL.Field(this, "BankUserName", "BankUserName", SqlDbType.VarChar, false);
                BankTypeName = new MSSQL.Field(this, "BankTypeName", "BankTypeName", SqlDbType.VarChar, false);
                bankId = new MSSQL.Field(this, "bankId", "bankId", SqlDbType.BigInt, false);
                bankInProvinceId = new MSSQL.Field(this, "bankInProvinceId", "bankInProvinceId", SqlDbType.Int, false);
                bankInCityId = new MSSQL.Field(this, "bankInCityId", "bankInCityId", SqlDbType.BigInt, false);
                bankTypeId = new MSSQL.Field(this, "bankTypeId", "bankTypeId", SqlDbType.BigInt, false);
            }
        }

        public class T_UserDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field OperatorType;
            public MSSQL.Field Money;
            public MSSQL.Field FormalitiesFees;
            public MSSQL.Field SchemeID;
            public MSSQL.Field RelatedUserID;
            public MSSQL.Field PayNumber;
            public MSSQL.Field PayBank;
            public MSSQL.Field Memo;
            public MSSQL.Field OperatorID;
            public MSSQL.Field AlipayID;
            public MSSQL.Field AlipayName;

            public T_UserDetails()
            {
                TableName = "T_UserDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                OperatorType = new MSSQL.Field(this, "OperatorType", "OperatorType", SqlDbType.SmallInt, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                FormalitiesFees = new MSSQL.Field(this, "FormalitiesFees", "FormalitiesFees", SqlDbType.Money, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                RelatedUserID = new MSSQL.Field(this, "RelatedUserID", "RelatedUserID", SqlDbType.BigInt, false);
                PayNumber = new MSSQL.Field(this, "PayNumber", "PayNumber", SqlDbType.VarChar, false);
                PayBank = new MSSQL.Field(this, "PayBank", "PayBank", SqlDbType.VarChar, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
                OperatorID = new MSSQL.Field(this, "OperatorID", "OperatorID", SqlDbType.BigInt, false);
                AlipayID = new MSSQL.Field(this, "AlipayID", "AlipayID", SqlDbType.VarChar, false);
                AlipayName = new MSSQL.Field(this, "AlipayName", "AlipayName", SqlDbType.VarChar, false);
            }
        }

        public class T_UserDistillPayByAlipayLog : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Content;

            public T_UserDistillPayByAlipayLog()
            {
                TableName = "T_UserDistillPayByAlipayLog";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.SmallDateTime, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.VarChar, false);
            }
        }

        public class T_UserDistillPaymentFileDetaills : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field PaymentFileID;
            public MSSQL.Field SequenceNumber;
            public MSSQL.Field DistillID;

            public T_UserDistillPaymentFileDetaills()
            {
                TableName = "T_UserDistillPaymentFileDetaills";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                PaymentFileID = new MSSQL.Field(this, "PaymentFileID", "PaymentFileID", SqlDbType.BigInt, false);
                SequenceNumber = new MSSQL.Field(this, "SequenceNumber", "SequenceNumber", SqlDbType.BigInt, false);
                DistillID = new MSSQL.Field(this, "DistillID", "DistillID", SqlDbType.BigInt, false);
            }
        }

        public class T_UserDistillPaymentFiles : MSSQL.TableBase
        {
            public MSSQL.Field id;
            public MSSQL.Field FileName;
            public MSSQL.Field DateTime;
            public MSSQL.Field Result;
            public MSSQL.Field HandleOperatorID;
            public MSSQL.Field Type;

            public T_UserDistillPaymentFiles()
            {
                TableName = "T_UserDistillPaymentFiles";

                id = new MSSQL.Field(this, "id", "id", SqlDbType.BigInt, true);
                FileName = new MSSQL.Field(this, "FileName", "FileName", SqlDbType.VarChar, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Result = new MSSQL.Field(this, "Result", "Result", SqlDbType.Int, false);
                HandleOperatorID = new MSSQL.Field(this, "HandleOperatorID", "HandleOperatorID", SqlDbType.BigInt, false);
                Type = new MSSQL.Field(this, "Type", "Type", SqlDbType.Int, false);
            }
        }

        public class T_UserDistills : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field Money;
            public MSSQL.Field FormalitiesFees;
            public MSSQL.Field Result;
            public MSSQL.Field HandleDateTime;
            public MSSQL.Field BankName;
            public MSSQL.Field BankCardNumber;
            public MSSQL.Field Memo;
            public MSSQL.Field HandleOperatorID;
            public MSSQL.Field BankUserName;
            public MSSQL.Field AlipayID;
            public MSSQL.Field AlipayName;
            public MSSQL.Field DistillType;
            public MSSQL.Field BankTypeName;
            public MSSQL.Field BankInProvince;
            public MSSQL.Field BankInCity;
            public MSSQL.Field IsCps;

            public T_UserDistills()
            {
                TableName = "T_UserDistills";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                FormalitiesFees = new MSSQL.Field(this, "FormalitiesFees", "FormalitiesFees", SqlDbType.Money, false);
                Result = new MSSQL.Field(this, "Result", "Result", SqlDbType.SmallInt, false);
                HandleDateTime = new MSSQL.Field(this, "HandleDateTime", "HandleDateTime", SqlDbType.DateTime, false);
                BankName = new MSSQL.Field(this, "BankName", "BankName", SqlDbType.VarChar, false);
                BankCardNumber = new MSSQL.Field(this, "BankCardNumber", "BankCardNumber", SqlDbType.VarChar, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
                HandleOperatorID = new MSSQL.Field(this, "HandleOperatorID", "HandleOperatorID", SqlDbType.BigInt, false);
                BankUserName = new MSSQL.Field(this, "BankUserName", "BankUserName", SqlDbType.VarChar, false);
                AlipayID = new MSSQL.Field(this, "AlipayID", "AlipayID", SqlDbType.VarChar, false);
                AlipayName = new MSSQL.Field(this, "AlipayName", "AlipayName", SqlDbType.VarChar, false);
                DistillType = new MSSQL.Field(this, "DistillType", "DistillType", SqlDbType.Int, false);
                BankTypeName = new MSSQL.Field(this, "BankTypeName", "BankTypeName", SqlDbType.VarChar, false);
                BankInProvince = new MSSQL.Field(this, "BankInProvince", "BankInProvince", SqlDbType.VarChar, false);
                BankInCity = new MSSQL.Field(this, "BankInCity", "BankInCity", SqlDbType.VarChar, false);
                IsCps = new MSSQL.Field(this, "IsCps", "IsCps", SqlDbType.Bit, false);
            }
        }

        public class T_UserEditQuestionAnswer : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field QuestionAnswerState;
            public MSSQL.Field ValidedCount;
            public MSSQL.Field DateTime;

            public T_UserEditQuestionAnswer()
            {
                TableName = "T_UserEditQuestionAnswer";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.Int, false);
                QuestionAnswerState = new MSSQL.Field(this, "QuestionAnswerState", "QuestionAnswerState", SqlDbType.Int, false);
                ValidedCount = new MSSQL.Field(this, "ValidedCount", "ValidedCount", SqlDbType.Int, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_UserFeedback : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field Tel;
            public MSSQL.Field Email;
            public MSSQL.Field SubmitDateTime;
            public MSSQL.Field Title;
            public MSSQL.Field Content;
            public MSSQL.Field isRead;
            public MSSQL.Field isDel;

            public T_UserFeedback()
            {
                TableName = "T_UserFeedback";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                Tel = new MSSQL.Field(this, "Tel", "Tel", SqlDbType.NVarChar, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.NVarChar, false);
                SubmitDateTime = new MSSQL.Field(this, "SubmitDateTime", "SubmitDateTime", SqlDbType.DateTime, false);
                Title = new MSSQL.Field(this, "Title", "Title", SqlDbType.NVarChar, false);
                Content = new MSSQL.Field(this, "Content", "Content", SqlDbType.NVarChar, false);
                isRead = new MSSQL.Field(this, "isRead", "isRead", SqlDbType.Bit, false);
                isDel = new MSSQL.Field(this, "isDel", "isDel", SqlDbType.Bit, false);
            }
        }

        public class T_UserForInitiateFollowSchemeTrys : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Description;
            public MSSQL.Field HandleResult;
            public MSSQL.Field HandleDateTime;

            public T_UserForInitiateFollowSchemeTrys()
            {
                TableName = "T_UserForInitiateFollowSchemeTrys";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                HandleResult = new MSSQL.Field(this, "HandleResult", "HandleResult", SqlDbType.SmallInt, false);
                HandleDateTime = new MSSQL.Field(this, "HandleDateTime", "HandleDateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_UserGroups : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Name;
            public MSSQL.Field Description;

            public T_UserGroups()
            {
                TableName = "T_UserGroups";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.SmallInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
            }
        }

        public class T_UserHongbaoPromotion : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field CreateDate;
            public MSSQL.Field Money;
            public MSSQL.Field AcceptUserID;
            public MSSQL.Field UseDate;
            public MSSQL.Field ExpiryDate;
            public MSSQL.Field URL;

            public T_UserHongbaoPromotion()
            {
                TableName = "T_UserHongbaoPromotion";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                CreateDate = new MSSQL.Field(this, "CreateDate", "CreateDate", SqlDbType.DateTime, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                AcceptUserID = new MSSQL.Field(this, "AcceptUserID", "AcceptUserID", SqlDbType.BigInt, false);
                UseDate = new MSSQL.Field(this, "UseDate", "UseDate", SqlDbType.DateTime, false);
                ExpiryDate = new MSSQL.Field(this, "ExpiryDate", "ExpiryDate", SqlDbType.DateTime, false);
                URL = new MSSQL.Field(this, "URL", "URL", SqlDbType.NVarChar, false);
            }
        }

        public class T_UserHongbaoPromotionUsed : MSSQL.TableBase
        {
            public MSSQL.Field PromotionID;

            public T_UserHongbaoPromotionUsed()
            {
                TableName = "T_UserHongbaoPromotionUsed";

                PromotionID = new MSSQL.Field(this, "PromotionID", "PromotionID", SqlDbType.BigInt, false);
            }
        }

        public class T_UserInGroups : MSSQL.TableBase
        {
            public MSSQL.Field UserID;
            public MSSQL.Field GroupID;

            public T_UserInGroups()
            {
                TableName = "T_UserInGroups";

                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                GroupID = new MSSQL.Field(this, "GroupID", "GroupID", SqlDbType.SmallInt, false);
            }
        }

        public class T_UserInSchemeChatRooms : MSSQL.TableBase
        {
            public MSSQL.Field UserID;
            public MSSQL.Field SchemeID;
            public MSSQL.Field LastAccessTime;

            public T_UserInSchemeChatRooms()
            {
                TableName = "T_UserInSchemeChatRooms";

                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                LastAccessTime = new MSSQL.Field(this, "LastAccessTime", "LastAccessTime", SqlDbType.DateTime, false);
            }
        }

        public class T_UserPayDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field PayType;
            public MSSQL.Field Money;
            public MSSQL.Field FormalitiesFees;
            public MSSQL.Field Result;
            public MSSQL.Field AlipayNo;

            public T_UserPayDetails()
            {
                TableName = "T_UserPayDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                PayType = new MSSQL.Field(this, "PayType", "PayType", SqlDbType.VarChar, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                FormalitiesFees = new MSSQL.Field(this, "FormalitiesFees", "FormalitiesFees", SqlDbType.Money, false);
                Result = new MSSQL.Field(this, "Result", "Result", SqlDbType.SmallInt, false);
                AlipayNo = new MSSQL.Field(this, "AlipayNo", "AlipayNo", SqlDbType.VarChar, false);
            }
        }

        public class T_UserPayNumberList : MSSQL.TableBase
        {
            public MSSQL.Field PayNumber;
            public MSSQL.Field Money;

            public T_UserPayNumberList()
            {
                TableName = "T_UserPayNumberList";

                PayNumber = new MSSQL.Field(this, "PayNumber", "PayNumber", SqlDbType.BigInt, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
            }
        }

        public class T_UserPayOutDetails_99Bill : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field DistillID;
            public MSSQL.Field DealCharge;
            public MSSQL.Field DebitCharge;
            public MSSQL.Field CreditCharge;
            public MSSQL.Field DealID;
            public MSSQL.Field ResultFlag;
            public MSSQL.Field FailureCause;

            public T_UserPayOutDetails_99Bill()
            {
                TableName = "T_UserPayOutDetails_99Bill";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                DistillID = new MSSQL.Field(this, "DistillID", "DistillID", SqlDbType.BigInt, false);
                DealCharge = new MSSQL.Field(this, "DealCharge", "DealCharge", SqlDbType.Money, false);
                DebitCharge = new MSSQL.Field(this, "DebitCharge", "DebitCharge", SqlDbType.Money, false);
                CreditCharge = new MSSQL.Field(this, "CreditCharge", "CreditCharge", SqlDbType.Money, false);
                DealID = new MSSQL.Field(this, "DealID", "DealID", SqlDbType.VarChar, false);
                ResultFlag = new MSSQL.Field(this, "ResultFlag", "ResultFlag", SqlDbType.Bit, false);
                FailureCause = new MSSQL.Field(this, "FailureCause", "FailureCause", SqlDbType.VarChar, false);
            }
        }

        public class T_Users : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field Name;
            public MSSQL.Field RealityName;
            public MSSQL.Field Password;
            public MSSQL.Field PasswordAdv;
            public MSSQL.Field CityID;
            public MSSQL.Field Sex;
            public MSSQL.Field BirthDay;
            public MSSQL.Field IDCardNumber;
            public MSSQL.Field Address;
            public MSSQL.Field Email;
            public MSSQL.Field isEmailValided;
            public MSSQL.Field QQ;
            public MSSQL.Field Telephone;
            public MSSQL.Field Mobile;
            public MSSQL.Field isMobileValided;
            public MSSQL.Field isPrivacy;
            public MSSQL.Field isCanLogin;
            public MSSQL.Field RegisterTime;
            public MSSQL.Field LastLoginTime;
            public MSSQL.Field LastLoginIP;
            public MSSQL.Field LoginCount;
            public MSSQL.Field UserType;
            public MSSQL.Field BankType;
            public MSSQL.Field BankName;
            public MSSQL.Field BankCardNumber;
            public MSSQL.Field Balance;
            public MSSQL.Field Freeze;
            public MSSQL.Field ScoringOfSelfBuy;
            public MSSQL.Field ScoringOfCommendBuy;
            public MSSQL.Field Scoring;
            public MSSQL.Field Level;
            public MSSQL.Field CommenderID;
            public MSSQL.Field CpsID;
            public MSSQL.Field AlipayID;
            public MSSQL.Field Bonus;
            public MSSQL.Field Reward;
            public MSSQL.Field AlipayName;
            public MSSQL.Field isAlipayNameValided;
            public MSSQL.Field isAlipayCps;
            public MSSQL.Field IsCrossLogin;
            public MSSQL.Field ComeFrom;
            public MSSQL.Field Memo;
            public MSSQL.Field BonusThisMonth;
            public MSSQL.Field BonusAllow;
            public MSSQL.Field BonusUse;
            public MSSQL.Field PromotionMemberBonusScale;
            public MSSQL.Field PromotionSiteBonusScale;
            public MSSQL.Field MaxFollowNumber;
            public MSSQL.Field VisitSource;
            public MSSQL.Field Key;
            public MSSQL.Field HeadUrl;
            public MSSQL.Field FriendList;
            public MSSQL.Field NickName;
            public MSSQL.Field SecurityQuestion;
            public MSSQL.Field SecurityAnswer;
            public MSSQL.Field Reason;
            public MSSQL.Field IsQQValided;
            public MSSQL.Field AlipayNameComeFrom;
            public MSSQL.Field accessToken;
            public MSSQL.Field AttentionerList;
            public MSSQL.Field Winnings;

            public T_Users()
            {
                TableName = "T_Users";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, false);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                RealityName = new MSSQL.Field(this, "RealityName", "RealityName", SqlDbType.VarChar, false);
                Password = new MSSQL.Field(this, "Password", "Password", SqlDbType.VarChar, false);
                PasswordAdv = new MSSQL.Field(this, "PasswordAdv", "PasswordAdv", SqlDbType.VarChar, false);
                CityID = new MSSQL.Field(this, "CityID", "CityID", SqlDbType.Int, false);
                Sex = new MSSQL.Field(this, "Sex", "Sex", SqlDbType.VarChar, false);
                BirthDay = new MSSQL.Field(this, "BirthDay", "BirthDay", SqlDbType.DateTime, false);
                IDCardNumber = new MSSQL.Field(this, "IDCardNumber", "IDCardNumber", SqlDbType.VarChar, false);
                Address = new MSSQL.Field(this, "Address", "Address", SqlDbType.VarChar, false);
                Email = new MSSQL.Field(this, "Email", "Email", SqlDbType.VarChar, false);
                isEmailValided = new MSSQL.Field(this, "isEmailValided", "isEmailValided", SqlDbType.Bit, false);
                QQ = new MSSQL.Field(this, "QQ", "QQ", SqlDbType.VarChar, false);
                Telephone = new MSSQL.Field(this, "Telephone", "Telephone", SqlDbType.VarChar, false);
                Mobile = new MSSQL.Field(this, "Mobile", "Mobile", SqlDbType.VarChar, false);
                isMobileValided = new MSSQL.Field(this, "isMobileValided", "isMobileValided", SqlDbType.Bit, false);
                isPrivacy = new MSSQL.Field(this, "isPrivacy", "isPrivacy", SqlDbType.Bit, false);
                isCanLogin = new MSSQL.Field(this, "isCanLogin", "isCanLogin", SqlDbType.Bit, false);
                RegisterTime = new MSSQL.Field(this, "RegisterTime", "RegisterTime", SqlDbType.DateTime, false);
                LastLoginTime = new MSSQL.Field(this, "LastLoginTime", "LastLoginTime", SqlDbType.DateTime, false);
                LastLoginIP = new MSSQL.Field(this, "LastLoginIP", "LastLoginIP", SqlDbType.VarChar, false);
                LoginCount = new MSSQL.Field(this, "LoginCount", "LoginCount", SqlDbType.Int, false);
                UserType = new MSSQL.Field(this, "UserType", "UserType", SqlDbType.SmallInt, false);
                BankType = new MSSQL.Field(this, "BankType", "BankType", SqlDbType.SmallInt, false);
                BankName = new MSSQL.Field(this, "BankName", "BankName", SqlDbType.VarChar, false);
                BankCardNumber = new MSSQL.Field(this, "BankCardNumber", "BankCardNumber", SqlDbType.VarChar, false);
                Balance = new MSSQL.Field(this, "Balance", "Balance", SqlDbType.Money, false);
                Freeze = new MSSQL.Field(this, "Freeze", "Freeze", SqlDbType.Money, false);
                ScoringOfSelfBuy = new MSSQL.Field(this, "ScoringOfSelfBuy", "ScoringOfSelfBuy", SqlDbType.Float, false);
                ScoringOfCommendBuy = new MSSQL.Field(this, "ScoringOfCommendBuy", "ScoringOfCommendBuy", SqlDbType.Float, false);
                Scoring = new MSSQL.Field(this, "Scoring", "Scoring", SqlDbType.Float, false);
                Level = new MSSQL.Field(this, "Level", "Level", SqlDbType.SmallInt, false);
                CommenderID = new MSSQL.Field(this, "CommenderID", "CommenderID", SqlDbType.BigInt, false);
                CpsID = new MSSQL.Field(this, "CpsID", "CpsID", SqlDbType.BigInt, false);
                AlipayID = new MSSQL.Field(this, "AlipayID", "AlipayID", SqlDbType.VarChar, false);
                Bonus = new MSSQL.Field(this, "Bonus", "Bonus", SqlDbType.Money, false);
                Reward = new MSSQL.Field(this, "Reward", "Reward", SqlDbType.Money, false);
                AlipayName = new MSSQL.Field(this, "AlipayName", "AlipayName", SqlDbType.VarChar, false);
                isAlipayNameValided = new MSSQL.Field(this, "isAlipayNameValided", "isAlipayNameValided", SqlDbType.Bit, false);
                isAlipayCps = new MSSQL.Field(this, "isAlipayCps", "isAlipayCps", SqlDbType.Bit, false);
                IsCrossLogin = new MSSQL.Field(this, "IsCrossLogin", "IsCrossLogin", SqlDbType.Bit, false);
                ComeFrom = new MSSQL.Field(this, "ComeFrom", "ComeFrom", SqlDbType.Int, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
                BonusThisMonth = new MSSQL.Field(this, "BonusThisMonth", "BonusThisMonth", SqlDbType.Money, false);
                BonusAllow = new MSSQL.Field(this, "BonusAllow", "BonusAllow", SqlDbType.Money, false);
                BonusUse = new MSSQL.Field(this, "BonusUse", "BonusUse", SqlDbType.Money, false);
                PromotionMemberBonusScale = new MSSQL.Field(this, "PromotionMemberBonusScale", "PromotionMemberBonusScale", SqlDbType.Float, false);
                PromotionSiteBonusScale = new MSSQL.Field(this, "PromotionSiteBonusScale", "PromotionSiteBonusScale", SqlDbType.Float, false);
                MaxFollowNumber = new MSSQL.Field(this, "MaxFollowNumber", "MaxFollowNumber", SqlDbType.Int, false);
                VisitSource = new MSSQL.Field(this, "VisitSource", "VisitSource", SqlDbType.VarChar, false);
                Key = new MSSQL.Field(this, "Key", "Key", SqlDbType.VarChar, false);
                HeadUrl = new MSSQL.Field(this, "HeadUrl", "HeadUrl", SqlDbType.VarChar, false);
                FriendList = new MSSQL.Field(this, "FriendList", "FriendList", SqlDbType.VarChar, false);
                NickName = new MSSQL.Field(this, "NickName", "NickName", SqlDbType.VarChar, false);
                SecurityQuestion = new MSSQL.Field(this, "SecurityQuestion", "SecurityQuestion", SqlDbType.VarChar, false);
                SecurityAnswer = new MSSQL.Field(this, "SecurityAnswer", "SecurityAnswer", SqlDbType.NVarChar, false);
                Reason = new MSSQL.Field(this, "Reason", "Reason", SqlDbType.VarChar, false);
                IsQQValided = new MSSQL.Field(this, "IsQQValided", "IsQQValided", SqlDbType.Bit, false);
                AlipayNameComeFrom = new MSSQL.Field(this, "AlipayNameComeFrom", "AlipayNameComeFrom", SqlDbType.Int, false);
                accessToken = new MSSQL.Field(this, "accessToken", "accessToken", SqlDbType.NVarChar, false);
                AttentionerList = new MSSQL.Field(this, "AttentionerList", "AttentionerList", SqlDbType.VarChar, false);
                Winnings = new MSSQL.Field(this, "Winnings", "Winnings", SqlDbType.Money, false);
            }
        }

        public class T_UserScoringDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field OperatorType;
            public MSSQL.Field Scoring;
            public MSSQL.Field SchemeID;
            public MSSQL.Field RelatedUserID;
            public MSSQL.Field Memo;

            public T_UserScoringDetails()
            {
                TableName = "T_UserScoringDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                OperatorType = new MSSQL.Field(this, "OperatorType", "OperatorType", SqlDbType.SmallInt, false);
                Scoring = new MSSQL.Field(this, "Scoring", "Scoring", SqlDbType.Float, false);
                SchemeID = new MSSQL.Field(this, "SchemeID", "SchemeID", SqlDbType.BigInt, false);
                RelatedUserID = new MSSQL.Field(this, "RelatedUserID", "RelatedUserID", SqlDbType.BigInt, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
            }
        }

        public class T_UsersForInitiateFollowScheme : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field Description;
            public MSSQL.Field MaxNumberOf;

            public T_UsersForInitiateFollowScheme()
            {
                TableName = "T_UsersForInitiateFollowScheme";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                Description = new MSSQL.Field(this, "Description", "Description", SqlDbType.VarChar, false);
                MaxNumberOf = new MSSQL.Field(this, "MaxNumberOf", "MaxNumberOf", SqlDbType.Int, false);
            }
        }

        public class T_UserToCpsUId : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field Uid;
            public MSSQL.Field CpsID;
            public MSSQL.Field PID;

            public T_UserToCpsUId()
            {
                TableName = "T_UserToCpsUId";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                Uid = new MSSQL.Field(this, "Uid", "Uid", SqlDbType.Int, false);
                CpsID = new MSSQL.Field(this, "CpsID", "CpsID", SqlDbType.Int, false);
                PID = new MSSQL.Field(this, "PID", "PID", SqlDbType.Int, false);
            }
        }

        public class T_WapBuyTemp : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field SiteID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field LotteryID;
            public MSSQL.Field LotteryName;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field PlayTypeName;
            public MSSQL.Field IsuseID;
            public MSSQL.Field IsuseName;
            public MSSQL.Field Multiple;
            public MSSQL.Field TaskMoney;
            public MSSQL.Field AssureMoney;
            public MSSQL.Field Share;
            public MSSQL.Field BuyShare;
            public MSSQL.Field IsuseCount;
            public MSSQL.Field LotteryNumber;
            public MSSQL.Field SchemeBonusSale;

            public T_WapBuyTemp()
            {
                TableName = "T_WapBuyTemp";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                SiteID = new MSSQL.Field(this, "SiteID", "SiteID", SqlDbType.BigInt, false);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                LotteryName = new MSSQL.Field(this, "LotteryName", "LotteryName", SqlDbType.VarChar, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                PlayTypeName = new MSSQL.Field(this, "PlayTypeName", "PlayTypeName", SqlDbType.VarChar, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                IsuseName = new MSSQL.Field(this, "IsuseName", "IsuseName", SqlDbType.NVarChar, false);
                Multiple = new MSSQL.Field(this, "Multiple", "Multiple", SqlDbType.Int, false);
                TaskMoney = new MSSQL.Field(this, "TaskMoney", "TaskMoney", SqlDbType.Money, false);
                AssureMoney = new MSSQL.Field(this, "AssureMoney", "AssureMoney", SqlDbType.Money, false);
                Share = new MSSQL.Field(this, "Share", "Share", SqlDbType.Int, false);
                BuyShare = new MSSQL.Field(this, "BuyShare", "BuyShare", SqlDbType.Int, false);
                IsuseCount = new MSSQL.Field(this, "IsuseCount", "IsuseCount", SqlDbType.Int, false);
                LotteryNumber = new MSSQL.Field(this, "LotteryNumber", "LotteryNumber", SqlDbType.VarChar, false);
                SchemeBonusSale = new MSSQL.Field(this, "SchemeBonusSale", "SchemeBonusSale", SqlDbType.Float, false);
            }
        }

        public class T_WinningsDetails : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field UserID;
            public MSSQL.Field DateTime;
            public MSSQL.Field UserDetailsID;
            public MSSQL.Field OperatorType;
            public MSSQL.Field Money;
            public MSSQL.Field Memo;
            public MSSQL.Field Balance;

            public T_WinningsDetails()
            {
                TableName = "T_WinningsDetails";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                UserID = new MSSQL.Field(this, "UserID", "UserID", SqlDbType.BigInt, false);
                DateTime = new MSSQL.Field(this, "DateTime", "DateTime", SqlDbType.DateTime, false);
                UserDetailsID = new MSSQL.Field(this, "UserDetailsID", "UserDetailsID", SqlDbType.BigInt, false);
                OperatorType = new MSSQL.Field(this, "OperatorType", "OperatorType", SqlDbType.SmallInt, false);
                Money = new MSSQL.Field(this, "Money", "Money", SqlDbType.Money, false);
                Memo = new MSSQL.Field(this, "Memo", "Memo", SqlDbType.VarChar, false);
                Balance = new MSSQL.Field(this, "Balance", "Balance", SqlDbType.Money, false);
            }
        }

        public class T_WinScoreScale : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field WinMoney;
            public MSSQL.Field ScoreScale;
            public MSSQL.Field LotteryID;

            public T_WinScoreScale()
            {
                TableName = "T_WinScoreScale";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, true);
                WinMoney = new MSSQL.Field(this, "WinMoney", "WinMoney", SqlDbType.Money, false);
                ScoreScale = new MSSQL.Field(this, "ScoreScale", "ScoreScale", SqlDbType.Float, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
            }
        }

        public class T_WinTypeForHNXYSC : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field IsuseID;
            public MSSQL.Field PlayTypeID;
            public MSSQL.Field WinMoneyIndex;
            public MSSQL.Field FirstWin;
            public MSSQL.Field SecondWin;
            public MSSQL.Field ThirdWin;
            public MSSQL.Field DefaultMoney;
            public MSSQL.Field DefaultMoneyNoWithTax;
            public MSSQL.Field GenerateDateTime;

            public T_WinTypeForHNXYSC()
            {
                TableName = "T_WinTypeForHNXYSC";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.BigInt, true);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                IsuseID = new MSSQL.Field(this, "IsuseID", "IsuseID", SqlDbType.BigInt, false);
                PlayTypeID = new MSSQL.Field(this, "PlayTypeID", "PlayTypeID", SqlDbType.Int, false);
                WinMoneyIndex = new MSSQL.Field(this, "WinMoneyIndex", "WinMoneyIndex", SqlDbType.VarChar, false);
                FirstWin = new MSSQL.Field(this, "FirstWin", "FirstWin", SqlDbType.NVarChar, false);
                SecondWin = new MSSQL.Field(this, "SecondWin", "SecondWin", SqlDbType.NVarChar, false);
                ThirdWin = new MSSQL.Field(this, "ThirdWin", "ThirdWin", SqlDbType.NVarChar, false);
                DefaultMoney = new MSSQL.Field(this, "DefaultMoney", "DefaultMoney", SqlDbType.Money, false);
                DefaultMoneyNoWithTax = new MSSQL.Field(this, "DefaultMoneyNoWithTax", "DefaultMoneyNoWithTax", SqlDbType.Money, false);
                GenerateDateTime = new MSSQL.Field(this, "GenerateDateTime", "GenerateDateTime", SqlDbType.DateTime, false);
            }
        }

        public class T_WinTypes : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Name;
            public MSSQL.Field Order;
            public MSSQL.Field DefaultMoney;
            public MSSQL.Field DefaultMoneyNoWithTax;

            public T_WinTypes()
            {
                TableName = "T_WinTypes";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                DefaultMoney = new MSSQL.Field(this, "DefaultMoney", "DefaultMoney", SqlDbType.Money, false);
                DefaultMoneyNoWithTax = new MSSQL.Field(this, "DefaultMoneyNoWithTax", "DefaultMoneyNoWithTax", SqlDbType.Money, false);
            }
        }

        public class T_WinTypesTJ : MSSQL.TableBase
        {
            public MSSQL.Field ID;
            public MSSQL.Field LotteryID;
            public MSSQL.Field Name;
            public MSSQL.Field Order;
            public MSSQL.Field DefaultMoney;
            public MSSQL.Field DefaultMoneyNoWithTax;
            public MSSQL.Field IssueID;

            public T_WinTypesTJ()
            {
                TableName = "T_WinTypesTJ";

                ID = new MSSQL.Field(this, "ID", "ID", SqlDbType.Int, false);
                LotteryID = new MSSQL.Field(this, "LotteryID", "LotteryID", SqlDbType.Int, false);
                Name = new MSSQL.Field(this, "Name", "Name", SqlDbType.VarChar, false);
                Order = new MSSQL.Field(this, "Order", "Order", SqlDbType.Int, false);
                DefaultMoney = new MSSQL.Field(this, "DefaultMoney", "DefaultMoney", SqlDbType.Money, false);
                DefaultMoneyNoWithTax = new MSSQL.Field(this, "DefaultMoneyNoWithTax", "DefaultMoneyNoWithTax", SqlDbType.Money, false);
                IssueID = new MSSQL.Field(this, "IssueID", "IssueID", SqlDbType.BigInt, false);
            }
        }
    }

    public class Views
    {
        public class V_BuyDetails : MSSQL.ViewBase
        {
            public V_BuyDetails()
            {
                ViewName = "V_BuyDetails";
            }
        }

        public class V_BuyDetailsGroupScheme : MSSQL.ViewBase
        {
            public V_BuyDetailsGroupScheme()
            {
                ViewName = "V_BuyDetailsGroupScheme";
            }
        }

        public class V_BuyDetailsWithQuashed : MSSQL.ViewBase
        {
            public V_BuyDetailsWithQuashed()
            {
                ViewName = "V_BuyDetailsWithQuashed";
            }
        }

        public class V_BuyDetailsWithQuashedAll : MSSQL.ViewBase
        {
            public V_BuyDetailsWithQuashedAll()
            {
                ViewName = "V_BuyDetailsWithQuashedAll";
            }
        }

        public class V_CardPasswordDetails : MSSQL.ViewBase
        {
            public V_CardPasswordDetails()
            {
                ViewName = "V_CardPasswordDetails";
            }
        }

        public class V_ChaseLists : MSSQL.ViewBase
        {
            public V_ChaseLists()
            {
                ViewName = "V_ChaseLists";
            }
        }

        public class V_ChaseTaskDetails : MSSQL.ViewBase
        {
            public V_ChaseTaskDetails()
            {
                ViewName = "V_ChaseTaskDetails";
            }
        }

        public class V_ChaseTasks : MSSQL.ViewBase
        {
            public V_ChaseTasks()
            {
                ViewName = "V_ChaseTasks";
            }
        }

        public class V_ChaseTasksTotal : MSSQL.ViewBase
        {
            public V_ChaseTasksTotal()
            {
                ViewName = "V_ChaseTasksTotal";
            }
        }

        public class V_Citys : MSSQL.ViewBase
        {
            public V_Citys()
            {
                ViewName = "V_Citys";
            }
        }

        public class V_Cps : MSSQL.ViewBase
        {
            public V_Cps()
            {
                ViewName = "V_Cps";
            }
        }

        public class V_CpsTrys : MSSQL.ViewBase
        {
            public V_CpsTrys()
            {
                ViewName = "V_CpsTrys";
            }
        }

        public class V_CpsWithTransactionMoney : MSSQL.ViewBase
        {
            public V_CpsWithTransactionMoney()
            {
                ViewName = "V_CpsWithTransactionMoney";
            }
        }

        public class V_CustomFollowSchemes : MSSQL.ViewBase
        {
            public V_CustomFollowSchemes()
            {
                ViewName = "V_CustomFollowSchemes";
            }
        }

        public class V_ElectronTicketAgentSchemes : MSSQL.ViewBase
        {
            public V_ElectronTicketAgentSchemes()
            {
                ViewName = "V_ElectronTicketAgentSchemes";
            }
        }

        public class V_ElectronTicketAgentSchemesElectronTickets : MSSQL.ViewBase
        {
            public V_ElectronTicketAgentSchemesElectronTickets()
            {
                ViewName = "V_ElectronTicketAgentSchemesElectronTickets";
            }
        }

        public class V_ElectronTicketAgentSchemesSendToCenter : MSSQL.ViewBase
        {
            public V_ElectronTicketAgentSchemesSendToCenter()
            {
                ViewName = "V_ElectronTicketAgentSchemesSendToCenter";
            }
        }

        public class V_Experts : MSSQL.ViewBase
        {
            public V_Experts()
            {
                ViewName = "V_Experts";
            }
        }

        public class V_ExpertsCommends : MSSQL.ViewBase
        {
            public V_ExpertsCommends()
            {
                ViewName = "V_ExpertsCommends";
            }
        }

        public class V_GetDate : MSSQL.ViewBase
        {
            public V_GetDate()
            {
                ViewName = "V_GetDate";
            }
        }

        public class V_IsuseForZCDC : MSSQL.ViewBase
        {
            public V_IsuseForZCDC()
            {
                ViewName = "V_IsuseForZCDC";
            }
        }

        public class V_Isuses : MSSQL.ViewBase
        {
            public V_Isuses()
            {
                ViewName = "V_Isuses";
            }
        }

        public class v_Isuses_JXSSC : MSSQL.ViewBase
        {
            public v_Isuses_JXSSC()
            {
                ViewName = "v_Isuses_JXSSC";
            }
        }

        public class v_Isuses_SYYDJ : MSSQL.ViewBase
        {
            public v_Isuses_SYYDJ()
            {
                ViewName = "v_Isuses_SYYDJ";
            }
        }

        public class V_MatchBasketRate : MSSQL.ViewBase
        {
            public V_MatchBasketRate()
            {
                ViewName = "V_MatchBasketRate";
            }
        }

        public class V_MatchRate : MSSQL.ViewBase
        {
            public V_MatchRate()
            {
                ViewName = "V_MatchRate";
            }
        }

        public class V_News : MSSQL.ViewBase
        {
            public V_News()
            {
                ViewName = "V_News";
            }
        }

        public class V_PlayTypes : MSSQL.ViewBase
        {
            public V_PlayTypes()
            {
                ViewName = "V_PlayTypes";
            }
        }

        public class V_Questions : MSSQL.ViewBase
        {
            public V_Questions()
            {
                ViewName = "V_Questions";
            }
        }

        public class V_SchemeCount : MSSQL.ViewBase
        {
            public V_SchemeCount()
            {
                ViewName = "V_SchemeCount";
            }
        }

        public class V_SchemeEndTime : MSSQL.ViewBase
        {
            public V_SchemeEndTime()
            {
                ViewName = "V_SchemeEndTime";
            }
        }

        public class V_SchemeForZCDC : MSSQL.ViewBase
        {
            public V_SchemeForZCDC()
            {
                ViewName = "V_SchemeForZCDC";
            }
        }

        public class V_Schemes : MSSQL.ViewBase
        {
            public V_Schemes()
            {
                ViewName = "V_Schemes";
            }
        }

        public class V_SchemeSchedules : MSSQL.ViewBase
        {
            public V_SchemeSchedules()
            {
                ViewName = "V_SchemeSchedules";
            }
        }

        public class V_SchemeSchedulesWithQuashed : MSSQL.ViewBase
        {
            public V_SchemeSchedulesWithQuashed()
            {
                ViewName = "V_SchemeSchedulesWithQuashed";
            }
        }

        public class V_SchemesSendToCenter : MSSQL.ViewBase
        {
            public V_SchemesSendToCenter()
            {
                ViewName = "V_SchemesSendToCenter";
            }
        }

        public class V_SchemeStatistics : MSSQL.ViewBase
        {
            public V_SchemeStatistics()
            {
                ViewName = "V_SchemeStatistics";
            }
        }

        public class V_StationSMS : MSSQL.ViewBase
        {
            public V_StationSMS()
            {
                ViewName = "V_StationSMS";
            }
        }

        public class V_SurrogateTrys : MSSQL.ViewBase
        {
            public V_SurrogateTrys()
            {
                ViewName = "V_SurrogateTrys";
            }
        }

        public class V_SystemLog : MSSQL.ViewBase
        {
            public V_SystemLog()
            {
                ViewName = "V_SystemLog";
            }
        }

        public class V_UserBankBindDetails : MSSQL.ViewBase
        {
            public V_UserBankBindDetails()
            {
                ViewName = "V_UserBankBindDetails";
            }
        }

        public class V_UserDetails : MSSQL.ViewBase
        {
            public V_UserDetails()
            {
                ViewName = "V_UserDetails";
            }
        }

        public class V_UserDetailsWithSchemes : MSSQL.ViewBase
        {
            public V_UserDetailsWithSchemes()
            {
                ViewName = "V_UserDetailsWithSchemes";
            }
        }

        public class V_UserDistills : MSSQL.ViewBase
        {
            public V_UserDistills()
            {
                ViewName = "V_UserDistills";
            }
        }

        public class V_UserForInitiateFollowSchemeTrys : MSSQL.ViewBase
        {
            public V_UserForInitiateFollowSchemeTrys()
            {
                ViewName = "V_UserForInitiateFollowSchemeTrys";
            }
        }

        public class V_UserInGroups : MSSQL.ViewBase
        {
            public V_UserInGroups()
            {
                ViewName = "V_UserInGroups";
            }
        }

        public class V_UserPayDetails : MSSQL.ViewBase
        {
            public V_UserPayDetails()
            {
                ViewName = "V_UserPayDetails";
            }
        }

        public class V_Users : MSSQL.ViewBase
        {
            public V_Users()
            {
                ViewName = "V_Users";
            }
        }

        public class V_UserScoringDetails : MSSQL.ViewBase
        {
            public V_UserScoringDetails()
            {
                ViewName = "V_UserScoringDetails";
            }
        }

        public class V_UsersForInitiateFollowScheme : MSSQL.ViewBase
        {
            public V_UsersForInitiateFollowScheme()
            {
                ViewName = "V_UsersForInitiateFollowScheme";
            }
        }

        public class V_UsersWithSumWinMoney : MSSQL.ViewBase
        {
            public V_UsersWithSumWinMoney()
            {
                ViewName = "V_UsersWithSumWinMoney";
            }
        }

        public class V_UsersWithSumWinMoneyThisWeek : MSSQL.ViewBase
        {
            public V_UsersWithSumWinMoneyThisWeek()
            {
                ViewName = "V_UsersWithSumWinMoneyThisWeek";
            }
        }

        public class V_UsersWithSumWinMoneyToday : MSSQL.ViewBase
        {
            public V_UsersWithSumWinMoneyToday()
            {
                ViewName = "V_UsersWithSumWinMoneyToday";
            }
        }
    }

    public class Functions
    {
        public static int F_AccumulateMember(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_AccumulateMember",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToInt32(Result);
        }

        public static double F_CalculationFollowSchemesMoney(string ConnectionString, double RemainingMoney, int RemainingShare, double FollowSchemesMoney)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CalculationFollowSchemesMoney",
                new MSSQL.Parameter("RemainingMoney", SqlDbType.Money, 0, ParameterDirection.Input, RemainingMoney),
                new MSSQL.Parameter("RemainingShare", SqlDbType.Int, 0, ParameterDirection.Input, RemainingShare),
                new MSSQL.Parameter("FollowSchemesMoney", SqlDbType.Money, 0, ParameterDirection.Input, FollowSchemesMoney)
                );

            return System.Convert.ToDouble(Result);
        }

        public static bool F_ComparisonLotteryList(string ConnectionString, string ParentLotteryList, string SubLotteryList)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_ComparisonLotteryList",
                new MSSQL.Parameter("ParentLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, ParentLotteryList),
                new MSSQL.Parameter("SubLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, SubLotteryList)
                );

            return System.Convert.ToBoolean(Result);
        }

        public static double F_CpsGetCommenderPromoteCpsBonusScale(string ConnectionString, long OwnerUserID, long LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CpsGetCommenderPromoteCpsBonusScale",
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CpsGetCommenderPromoteMemberBonusScale(string ConnectionString, long OwnerUserID, long LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CpsGetCommenderPromoteMemberBonusScale",
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CpsGetCpsBonusScale(string ConnectionString, long CpsID, long LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CpsGetCpsBonusScale",
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToDouble(Result);
        }

        public static int F_CpsMemberAccumulateBuyerMember(string ConnectionString, long SiteID, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CpsMemberAccumulateBuyerMember",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToInt32(Result);
        }

        public static int F_CpsMemberAccumulateWebSite(string ConnectionString, long SiteID, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CpsMemberAccumulateWebSite",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToInt32(Result);
        }

        public static int F_CurrentDateRegMember(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMember",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToInt32(Result);
        }

        public static double F_CurrentDateRegMemberPayMoney(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMemberPayMoney",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CurrentDateRegMemberPayMoneyBonusScale(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMemberPayMoneyBonusScale",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CurrentDateRegMemberPayMoneyBonusScale_all(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMemberPayMoneyBonusScale_all",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CurrentDateRegMemberPayMoneyBonusScale_today(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMemberPayMoneyBonusScale_today",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CurrentDateRegMemberPayMoneyBonusScaleSite(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMemberPayMoneyBonusScaleSite",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CurrentDateRegMemberPayMoneyBonusScaleSite_all(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMemberPayMoneyBonusScaleSite_all",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_CurrentDateRegMemberPayMoneyBonusScaleSite_today(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegMemberPayMoneyBonusScaleSite_today",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate)
                );

            return System.Convert.ToDouble(Result);
        }

        public static int F_CurrentDateRegPayMember(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentDateRegPayMember",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToInt32(Result);
        }

        public static double F_CurrentMonthMemberRecWebSitePayMoney(string ConnectionString, long SiteID, long UserID, DateTime CurrentDate, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_CurrentMonthMemberRecWebSitePayMoney",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CurrentDate", SqlDbType.DateTime, 0, ParameterDirection.Input, CurrentDate),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToDouble(Result);
        }

        public static string F_DateTimeToYYMMDD(string ConnectionString, DateTime Dt)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_DateTimeToYYMMDD",
                new MSSQL.Parameter("Dt", SqlDbType.DateTime, 0, ParameterDirection.Input, Dt)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_DateTimeToYYMMDDHHMMSS(string ConnectionString, DateTime Dt)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_DateTimeToYYMMDDHHMMSS",
                new MSSQL.Parameter("Dt", SqlDbType.DateTime, 0, ParameterDirection.Input, Dt)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetBankTypeName(string ConnectionString, short BankTypeID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetBankTypeName",
                new MSSQL.Parameter("BankTypeID", SqlDbType.SmallInt, 0, ParameterDirection.Input, BankTypeID)
                );

            return System.Convert.ToString(Result);
        }

        public static double F_GetBonusScaleByCommenderID(string ConnectionString, long CommenderID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetBonusScaleByCommenderID",
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID)
                );

            return System.Convert.ToDouble(Result);
        }

        public static int F_GetDayByDateTime(string ConnectionString, string rq, DateTime dt)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetDayByDateTime",
                new MSSQL.Parameter("rq", SqlDbType.VarChar, 0, ParameterDirection.Input, rq),
                new MSSQL.Parameter("dt", SqlDbType.DateTime, 0, ParameterDirection.Input, dt)
                );

            return System.Convert.ToInt32(Result);
        }

        public static short F_GetDetailsOperatorType(string ConnectionString, string OperatorType)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetDetailsOperatorType",
                new MSSQL.Parameter("OperatorType", SqlDbType.VarChar, 0, ParameterDirection.Input, OperatorType)
                );

            return System.Convert.ToInt16(Result);
        }

        public static string F_GetExpertsLotteryList(string ConnectionString, long SiteID, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetExpertsLotteryList",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToString(Result);
        }

        public static bool F_GetIsAdministrator(string ConnectionString, long SiteID, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetIsAdministrator",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToBoolean(Result);
        }

        public static bool F_GetIsSendNotification(string ConnectionString, long SiteID, short Manner, string NotificationCode, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetIsSendNotification",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("NotificationCode", SqlDbType.VarChar, 0, ParameterDirection.Input, NotificationCode),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToBoolean(Result);
        }

        public static DateTime F_GetIsuseChaseExecuteTime(string ConnectionString, long IsuseID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetIsuseChaseExecuteTime",
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID)
                );

            return System.Convert.ToDateTime(Result);
        }

        public static string F_GetIsuseCount(string ConnectionString, int LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetIsuseCount",
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToString(Result);
        }

        public static DateTime F_GetIsuseEndTime(string ConnectionString, long IsuseID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetIsuseEndTime",
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID)
                );

            return System.Convert.ToDateTime(Result);
        }

        public static DateTime F_GetIsuseStartTime(string ConnectionString, long IsuseID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetIsuseStartTime",
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID)
                );

            return System.Convert.ToDateTime(Result);
        }

        public static DateTime F_GetIsuseSystemEndTime(string ConnectionString, long IsuseID, int PlayTypeID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetIsuseSystemEndTime",
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID)
                );

            return System.Convert.ToDateTime(Result);
        }

        public static DataTable F_GetLotteryCanChaseIsuses(string ConnectionString, int LotteryID, int PlayType)
        {
            return MSSQL.Select(ConnectionString, "select * from " + MSSQL.GetObjectFullName("F_GetLotteryCanChaseIsuses") + "(@LotteryID, @PlayType)",
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayType", SqlDbType.Int, 0, ParameterDirection.Input, PlayType)
                );
        }

        public static string F_GetLotteryCode(string ConnectionString, int LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetLotteryCode",
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetLotteryIntervalType(string ConnectionString, int LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetLotteryIntervalType",
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToString(Result);
        }

        public static bool F_GetLotteryIsUsed(string ConnectionString, long SiteID, int LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetLotteryIsUsed",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToBoolean(Result);
        }

        public static string F_GetLotteryName(string ConnectionString, int LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetLotteryName",
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToString(Result);
        }

        public static short F_GetLotteryPrintOutType(string ConnectionString, int LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetLotteryPrintOutType",
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToInt16(Result);
        }

        public static string F_GetLotteryType2Name(string ConnectionString, short Type2)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetLotteryType2Name",
                new MSSQL.Parameter("Type2", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type2)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetLotteryWinNumberExemple(string ConnectionString, int LotteryID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetLotteryWinNumberExemple",
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return System.Convert.ToString(Result);
        }

        public static DataTable F_GetManagers(string ConnectionString, long SiteID)
        {
            return MSSQL.Select(ConnectionString, "select * from " + MSSQL.GetObjectFullName("F_GetManagers") + "(@SiteID)",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );
        }

        public static long F_GetMasterSiteID(string ConnectionString)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetMasterSiteID");

            return System.Convert.ToInt64(Result);
        }

        public static int F_GetMaxMultiple(string ConnectionString, long IsuseID, int PlayTypeID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetMaxMultiple",
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID)
                );

            return System.Convert.ToInt32(Result);
        }

        public static string F_GetOptions(string ConnectionString, string Key)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetOptions",
                new MSSQL.Parameter("Key", SqlDbType.VarChar, 0, ParameterDirection.Input, Key)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetPlaceFromIPAddress(string ConnectionString, string IPAddress)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetPlaceFromIPAddress",
                new MSSQL.Parameter("IPAddress", SqlDbType.VarChar, 0, ParameterDirection.Input, IPAddress)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetPlayTypeName(string ConnectionString, int PlayTypeID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetPlayTypeName",
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetProvinceCity(string ConnectionString, int CityID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetProvinceCity",
                new MSSQL.Parameter("CityID", SqlDbType.Int, 0, ParameterDirection.Input, CityID)
                );

            return System.Convert.ToString(Result);
        }

        public static long F_GetSchemeInitiateUserID(string ConnectionString, long SiteID, long SchemeID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetSchemeInitiateUserID",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID)
                );

            return System.Convert.ToInt64(Result);
        }

        public static string F_GetSchemeOpenUsers(string ConnectionString, long SchemeID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetSchemeOpenUsers",
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID)
                );

            return System.Convert.ToString(Result);
        }

        public static short F_GetScoringDetailsOperatorType(string ConnectionString, string OperatorType)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetScoringDetailsOperatorType",
                new MSSQL.Parameter("OperatorType", SqlDbType.VarChar, 0, ParameterDirection.Input, OperatorType)
                );

            return System.Convert.ToInt16(Result);
        }

        public static DataTable F_GetSiteAdministrator(string ConnectionString, long SiteID)
        {
            return MSSQL.Select(ConnectionString, "select * from " + MSSQL.GetObjectFullName("F_GetSiteAdministrator") + "(@SiteID)",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );
        }

        public static DataTable F_GetSiteAdministrators(string ConnectionString, long SiteID)
        {
            return MSSQL.Select(ConnectionString, "select * from " + MSSQL.GetObjectFullName("F_GetSiteAdministrators") + "(@SiteID)",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );
        }

        public static long F_GetSiteOwnerUserID(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetSiteOwnerUserID",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToInt64(Result);
        }

        public static long F_GetSiteParentID(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetSiteParentID",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToInt64(Result);
        }

        public static string F_GetSiteSendNotificationTypes(string ConnectionString, long SiteID, short Manner)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetSiteSendNotificationTypes",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetSiteUrls(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetSiteUrls",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToString(Result);
        }

        public static int F_GetSystemEndAheadMinute(string ConnectionString, int PlayTypeID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetSystemEndAheadMinute",
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID)
                );

            return System.Convert.ToInt32(Result);
        }

        public static string F_GetUsedLotteryList(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUsedLotteryList",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetUsedLotteryListQuickBuy(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUsedLotteryListQuickBuy",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetUsedLotteryListRestrictions(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUsedLotteryListRestrictions",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetUsedLotteryNameList(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUsedLotteryNameList",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetUsedLotteryNameListQuickBuy(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUsedLotteryNameListQuickBuy",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetUsedLotteryNameListRestrictions(string ConnectionString, long SiteID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUsedLotteryNameListRestrictions",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetUserAcceptNotificationTypes(string ConnectionString, long UserID, short Manner)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUserAcceptNotificationTypes",
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner)
                );

            return System.Convert.ToString(Result);
        }

        public static long F_GetUserCommenderID(string ConnectionString, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUserCommenderID",
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToInt64(Result);
        }

        public static string F_GetUserCompetencesList(string ConnectionString, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUserCompetencesList",
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToString(Result);
        }

        public static long F_GetUserIDByName(string ConnectionString, long SiteID, string Name)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUserIDByName",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name)
                );

            return System.Convert.ToInt64(Result);
        }

        public static bool F_GetUserIsAttention(string ConnectionString, int UserID, int AttentionUserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUserIsAttention",
                new MSSQL.Parameter("UserID", SqlDbType.Int, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("AttentionUserID", SqlDbType.Int, 0, ParameterDirection.Input, AttentionUserID)
                );

            return System.Convert.ToBoolean(Result);
        }

        public static string F_GetUserNameByID(string ConnectionString, long SiteID, long ID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUserNameByID",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID)
                );

            return System.Convert.ToString(Result);
        }

        public static string F_GetUserOwnerSitesList(string ConnectionString, long UserID)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_GetUserOwnerSitesList",
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return System.Convert.ToString(Result);
        }

        public static DataTable F_GetWinLotteryNumber(string ConnectionString, long SiteID, int LotteryID)
        {
            return MSSQL.Select(ConnectionString, "select * from " + MSSQL.GetObjectFullName("F_GetWinLotteryNumber") + "(@SiteID, @LotteryID)",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );
        }

        public static long F_IPAddressToInt64(string ConnectionString, string IPAddress)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_IPAddressToInt64",
                new MSSQL.Parameter("IPAddress", SqlDbType.VarChar, 0, ParameterDirection.Input, IPAddress)
                );

            return System.Convert.ToInt64(Result);
        }

        public static bool F_IsDivisibility(string ConnectionString, double Dividend, double Divisor)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_IsDivisibility",
                new MSSQL.Parameter("Dividend", SqlDbType.Float, 0, ParameterDirection.Input, Dividend),
                new MSSQL.Parameter("Divisor", SqlDbType.Float, 0, ParameterDirection.Input, Divisor)
                );

            return System.Convert.ToBoolean(Result);
        }

        public static double F_MonthPayMoneyShopBonusScale(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_MonthPayMoneyShopBonusScale",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_MonthShopPayMoney(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_MonthShopPayMoney",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToDouble(Result);
        }

        public static string F_PadLeft(string ConnectionString, string str, string FillChar, int Len)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_PadLeft",
                new MSSQL.Parameter("str", SqlDbType.VarChar, 0, ParameterDirection.Input, str),
                new MSSQL.Parameter("FillChar", SqlDbType.Char, 0, ParameterDirection.Input, FillChar),
                new MSSQL.Parameter("Len", SqlDbType.Int, 0, ParameterDirection.Input, Len)
                );

            return System.Convert.ToString(Result);
        }

        public static DataTable F_Split(string ConnectionString, string c, string split)
        {
            return MSSQL.Select(ConnectionString, "select * from " + MSSQL.GetObjectFullName("F_Split") + "(@c, @split)",
                new MSSQL.Parameter("c", SqlDbType.VarChar, 0, ParameterDirection.Input, c),
                new MSSQL.Parameter("split", SqlDbType.VarChar, 0, ParameterDirection.Input, split)
                );
        }

        public static DataTable F_SplitString(string ConnectionString, string SplitString, string Separator)
        {
            return MSSQL.Select(ConnectionString, "select * from " + MSSQL.GetObjectFullName("F_SplitString") + "(@SplitString, @Separator)",
                new MSSQL.Parameter("SplitString", SqlDbType.VarChar, 0, ParameterDirection.Input, SplitString),
                new MSSQL.Parameter("Separator", SqlDbType.VarChar, 0, ParameterDirection.Input, Separator)
                );
        }

        public static double F_UnionSitePayMoney(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_UnionSitePayMoney",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime)
                );

            return System.Convert.ToDouble(Result);
        }

        public static double F_WebSitePayMoney(string ConnectionString, long SiteID, long UserID, DateTime StartDate, DateTime EndDate, int type)
        {
            object Result = MSSQL.ExecuteFunction(ConnectionString, "F_WebSitePayMoney",
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartDate", SqlDbType.DateTime, 0, ParameterDirection.Input, StartDate),
                new MSSQL.Parameter("EndDate", SqlDbType.DateTime, 0, ParameterDirection.Input, EndDate),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type)
                );

            return System.Convert.ToDouble(Result);
        }
    }

    public class Procedures
    {
        public static int P_AcceptUserHongbaoPromotion(string ConnectionString, long FromUserID, long ToUserID, long UserHongbaoPromotionID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AcceptUserHongbaoPromotion", ref Outputs,
                new MSSQL.Parameter("FromUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, FromUserID),
                new MSSQL.Parameter("ToUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, ToUserID),
                new MSSQL.Parameter("UserHongbaoPromotionID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserHongbaoPromotionID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AcceptUserHongbaoPromotion(string ConnectionString, ref DataSet ds, long FromUserID, long ToUserID, long UserHongbaoPromotionID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AcceptUserHongbaoPromotion", ref ds, ref Outputs,
                new MSSQL.Parameter("FromUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, FromUserID),
                new MSSQL.Parameter("ToUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, ToUserID),
                new MSSQL.Parameter("UserHongbaoPromotionID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserHongbaoPromotionID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AccountTransfer(string ConnectionString, long SiteID, long UserID, double Money, long RelatedUserID, string SecurityAnswer, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AccountTransfer", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("RelatedUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, RelatedUserID),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 0, ParameterDirection.Input, SecurityAnswer),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AccountTransfer(string ConnectionString, ref DataSet ds, long SiteID, long UserID, double Money, long RelatedUserID, string SecurityAnswer, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AccountTransfer", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("RelatedUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, RelatedUserID),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 0, ParameterDirection.Input, SecurityAnswer),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AccountTransferAccept(string ConnectionString, long SiteID, long UserID, long TransferID, long RelatedUserID, string SecurityAnswer, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AccountTransferAccept", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("TransferID", SqlDbType.BigInt, 0, ParameterDirection.Input, TransferID),
                new MSSQL.Parameter("RelatedUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, RelatedUserID),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 0, ParameterDirection.Input, SecurityAnswer),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AccountTransferAccept(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long TransferID, long RelatedUserID, string SecurityAnswer, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AccountTransferAccept", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("TransferID", SqlDbType.BigInt, 0, ParameterDirection.Input, TransferID),
                new MSSQL.Parameter("RelatedUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, RelatedUserID),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 0, ParameterDirection.Input, SecurityAnswer),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AccountTransferQuash(string ConnectionString, long SiteID, long UserID, long TransferID, long RelatedUserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AccountTransferQuash", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("TransferID", SqlDbType.BigInt, 0, ParameterDirection.Input, TransferID),
                new MSSQL.Parameter("RelatedUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, RelatedUserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AccountTransferQuash(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long TransferID, long RelatedUserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AccountTransferQuash", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("TransferID", SqlDbType.BigInt, 0, ParameterDirection.Input, TransferID),
                new MSSQL.Parameter("RelatedUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, RelatedUserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AddSFCNumberStatistics(string ConnectionString, long SchemeID, long IssueID, int Multiple, int AllTrueNumber, int ErrorOneNumber, int CorrectDate, string ShowLotteryNumber, int LotteryID, string LotteryNumber, int PlayTypeID, int NumberCount, int Win1, int Win2, double SumWin1, double SumWin2, double Money, string WinDescription, double WinMoney, DateTime Datetime, string OldDistribution, string WinDistribution, int Number3Count, int Number1Count, int Number0Count, string WinLotteryNumber, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AddSFCNumberStatistics", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("IssueID", SqlDbType.BigInt, 0, ParameterDirection.Input, IssueID),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("AllTrueNumber", SqlDbType.Int, 0, ParameterDirection.Input, AllTrueNumber),
                new MSSQL.Parameter("ErrorOneNumber", SqlDbType.Int, 0, ParameterDirection.Input, ErrorOneNumber),
                new MSSQL.Parameter("CorrectDate", SqlDbType.Int, 0, ParameterDirection.Input, CorrectDate),
                new MSSQL.Parameter("ShowLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, ShowLotteryNumber),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("NumberCount", SqlDbType.Int, 0, ParameterDirection.Input, NumberCount),
                new MSSQL.Parameter("Win1", SqlDbType.Int, 0, ParameterDirection.Input, Win1),
                new MSSQL.Parameter("Win2", SqlDbType.Int, 0, ParameterDirection.Input, Win2),
                new MSSQL.Parameter("SumWin1", SqlDbType.Money, 0, ParameterDirection.Input, SumWin1),
                new MSSQL.Parameter("SumWin2", SqlDbType.Money, 0, ParameterDirection.Input, SumWin2),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("WinDescription", SqlDbType.VarChar, 0, ParameterDirection.Input, WinDescription),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("Datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, Datetime),
                new MSSQL.Parameter("OldDistribution", SqlDbType.VarChar, 0, ParameterDirection.Input, OldDistribution),
                new MSSQL.Parameter("WinDistribution", SqlDbType.VarChar, 0, ParameterDirection.Input, WinDistribution),
                new MSSQL.Parameter("Number3Count", SqlDbType.Int, 0, ParameterDirection.Input, Number3Count),
                new MSSQL.Parameter("Number1Count", SqlDbType.Int, 0, ParameterDirection.Input, Number1Count),
                new MSSQL.Parameter("Number0Count", SqlDbType.Int, 0, ParameterDirection.Input, Number0Count),
                new MSSQL.Parameter("WinLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, WinLotteryNumber),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AddSFCNumberStatistics(string ConnectionString, ref DataSet ds, long SchemeID, long IssueID, int Multiple, int AllTrueNumber, int ErrorOneNumber, int CorrectDate, string ShowLotteryNumber, int LotteryID, string LotteryNumber, int PlayTypeID, int NumberCount, int Win1, int Win2, double SumWin1, double SumWin2, double Money, string WinDescription, double WinMoney, DateTime Datetime, string OldDistribution, string WinDistribution, int Number3Count, int Number1Count, int Number0Count, string WinLotteryNumber, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AddSFCNumberStatistics", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("IssueID", SqlDbType.BigInt, 0, ParameterDirection.Input, IssueID),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("AllTrueNumber", SqlDbType.Int, 0, ParameterDirection.Input, AllTrueNumber),
                new MSSQL.Parameter("ErrorOneNumber", SqlDbType.Int, 0, ParameterDirection.Input, ErrorOneNumber),
                new MSSQL.Parameter("CorrectDate", SqlDbType.Int, 0, ParameterDirection.Input, CorrectDate),
                new MSSQL.Parameter("ShowLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, ShowLotteryNumber),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("NumberCount", SqlDbType.Int, 0, ParameterDirection.Input, NumberCount),
                new MSSQL.Parameter("Win1", SqlDbType.Int, 0, ParameterDirection.Input, Win1),
                new MSSQL.Parameter("Win2", SqlDbType.Int, 0, ParameterDirection.Input, Win2),
                new MSSQL.Parameter("SumWin1", SqlDbType.Money, 0, ParameterDirection.Input, SumWin1),
                new MSSQL.Parameter("SumWin2", SqlDbType.Money, 0, ParameterDirection.Input, SumWin2),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("WinDescription", SqlDbType.VarChar, 0, ParameterDirection.Input, WinDescription),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("Datetime", SqlDbType.DateTime, 0, ParameterDirection.Input, Datetime),
                new MSSQL.Parameter("OldDistribution", SqlDbType.VarChar, 0, ParameterDirection.Input, OldDistribution),
                new MSSQL.Parameter("WinDistribution", SqlDbType.VarChar, 0, ParameterDirection.Input, WinDistribution),
                new MSSQL.Parameter("Number3Count", SqlDbType.Int, 0, ParameterDirection.Input, Number3Count),
                new MSSQL.Parameter("Number1Count", SqlDbType.Int, 0, ParameterDirection.Input, Number1Count),
                new MSSQL.Parameter("Number0Count", SqlDbType.Int, 0, ParameterDirection.Input, Number0Count),
                new MSSQL.Parameter("WinLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, WinLotteryNumber),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AddUserAttention(string ConnectionString, int UserID, int AttentionUserID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AddUserAttention", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.Int, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("AttentionUserID", SqlDbType.Int, 0, ParameterDirection.Input, AttentionUserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AddUserAttention(string ConnectionString, ref DataSet ds, int UserID, int AttentionUserID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AddUserAttention", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.Int, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("AttentionUserID", SqlDbType.Int, 0, ParameterDirection.Input, AttentionUserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AddUserToCpsUId(string ConnectionString, int ID, int Uid, int CpsID, int PID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AddUserToCpsUId", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.Int, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Uid", SqlDbType.Int, 0, ParameterDirection.Input, Uid),
                new MSSQL.Parameter("CpsID", SqlDbType.Int, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("PID", SqlDbType.Int, 0, ParameterDirection.Input, PID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AddUserToCpsUId(string ConnectionString, ref DataSet ds, int ID, int Uid, int CpsID, int PID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AddUserToCpsUId", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.Int, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Uid", SqlDbType.Int, 0, ParameterDirection.Input, Uid),
                new MSSQL.Parameter("CpsID", SqlDbType.Int, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("PID", SqlDbType.Int, 0, ParameterDirection.Input, PID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AdvertisementsEdit(string ConnectionString, int ID, string Title, string Url, int Order, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AdvertisementsEdit", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.Int, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AdvertisementsEdit(string ConnectionString, ref DataSet ds, int ID, string Title, string Url, int Order, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AdvertisementsEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.Int, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_AlterIsuseIDForHNXYSC(string ConnectionString, long schemeID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_AlterIsuseIDForHNXYSC", ref Outputs,
                new MSSQL.Parameter("schemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, schemeID)
                );

            return CallResult;
        }

        public static int P_AlterIsuseIDForHNXYSC(string ConnectionString, ref DataSet ds, long schemeID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_AlterIsuseIDForHNXYSC", ref ds, ref Outputs,
                new MSSQL.Parameter("schemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, schemeID)
                );

            return CallResult;
        }

        public static int P_Analysis_3D_Miss(string ConnectionString, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Analysis_3D_Miss", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Analysis_3D_Miss(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Analysis_3D_Miss", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Analysis_SHSSL_HotAndCoolAndMiss(string ConnectionString, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Analysis_SHSSL_HotAndCoolAndMiss", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Analysis_SHSSL_HotAndCoolAndMiss(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Analysis_SHSSL_HotAndCoolAndMiss", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Analysis_SHSSL_WinUsersList(string ConnectionString, int LotteryID, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Analysis_SHSSL_WinUsersList", ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Analysis_SHSSL_WinUsersList(string ConnectionString, ref DataSet ds, int LotteryID, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Analysis_SHSSL_WinUsersList", ref ds, ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketDXFdg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double Big, double Small, double BigSmallscore, ref int RetrunValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketDXFdg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("Big", SqlDbType.Float, 0, ParameterDirection.Input, Big),
                new MSSQL.Parameter("Small", SqlDbType.Float, 0, ParameterDirection.Input, Small),
                new MSSQL.Parameter("BigSmallscore", SqlDbType.Float, 0, ParameterDirection.Input, BigSmallscore),
                new MSSQL.Parameter("RetrunValue", SqlDbType.Int, 4, ParameterDirection.Output, RetrunValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                RetrunValue = System.Convert.ToInt32(Outputs["RetrunValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketDXFdg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double Big, double Small, double BigSmallscore, ref int RetrunValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketDXFdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("Big", SqlDbType.Float, 0, ParameterDirection.Input, Big),
                new MSSQL.Parameter("Small", SqlDbType.Float, 0, ParameterDirection.Input, Small),
                new MSSQL.Parameter("BigSmallscore", SqlDbType.Float, 0, ParameterDirection.Input, BigSmallscore),
                new MSSQL.Parameter("RetrunValue", SqlDbType.Int, 4, ParameterDirection.Output, RetrunValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                RetrunValue = System.Convert.ToInt32(Outputs["RetrunValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketDXFgg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double Big, double Small, double BigSmallscore, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketDXFgg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("Big", SqlDbType.Float, 0, ParameterDirection.Input, Big),
                new MSSQL.Parameter("Small", SqlDbType.Float, 0, ParameterDirection.Input, Small),
                new MSSQL.Parameter("BigSmallscore", SqlDbType.Float, 0, ParameterDirection.Input, BigSmallscore),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketDXFgg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double Big, double Small, double BigSmallscore, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketDXFgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("Big", SqlDbType.Float, 0, ParameterDirection.Input, Big),
                new MSSQL.Parameter("Small", SqlDbType.Float, 0, ParameterDirection.Input, Small),
                new MSSQL.Parameter("BigSmallscore", SqlDbType.Float, 0, ParameterDirection.Input, BigSmallscore),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketRfSfdg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double LetMainLose, double LetMainWin, double LetScoreMainLose, double LetScoreMainWin, double letscore, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketRfSfdg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("LetMainLose", SqlDbType.Float, 0, ParameterDirection.Input, LetMainLose),
                new MSSQL.Parameter("LetMainWin", SqlDbType.Float, 0, ParameterDirection.Input, LetMainWin),
                new MSSQL.Parameter("LetScoreMainLose", SqlDbType.Float, 0, ParameterDirection.Input, LetScoreMainLose),
                new MSSQL.Parameter("LetScoreMainWin", SqlDbType.Float, 0, ParameterDirection.Input, LetScoreMainWin),
                new MSSQL.Parameter("letscore", SqlDbType.Float, 0, ParameterDirection.Input, letscore),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketRfSfdg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double LetMainLose, double LetMainWin, double LetScoreMainLose, double LetScoreMainWin, double letscore, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketRfSfdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("LetMainLose", SqlDbType.Float, 0, ParameterDirection.Input, LetMainLose),
                new MSSQL.Parameter("LetMainWin", SqlDbType.Float, 0, ParameterDirection.Input, LetMainWin),
                new MSSQL.Parameter("LetScoreMainLose", SqlDbType.Float, 0, ParameterDirection.Input, LetScoreMainLose),
                new MSSQL.Parameter("LetScoreMainWin", SqlDbType.Float, 0, ParameterDirection.Input, LetScoreMainWin),
                new MSSQL.Parameter("letscore", SqlDbType.Float, 0, ParameterDirection.Input, letscore),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketRfSfgg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double LetMainLose, double LetMainWin, double letscore, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketRfSfgg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("LetMainLose", SqlDbType.Float, 0, ParameterDirection.Input, LetMainLose),
                new MSSQL.Parameter("LetMainWin", SqlDbType.Float, 0, ParameterDirection.Input, LetMainWin),
                new MSSQL.Parameter("letscore", SqlDbType.Float, 0, ParameterDirection.Input, letscore),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketRfSfgg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double LetMainLose, double LetMainWin, double letscore, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketRfSfgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("LetMainLose", SqlDbType.Float, 0, ParameterDirection.Input, LetMainLose),
                new MSSQL.Parameter("LetMainWin", SqlDbType.Float, 0, ParameterDirection.Input, LetMainWin),
                new MSSQL.Parameter("letscore", SqlDbType.Float, 0, ParameterDirection.Input, letscore),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfcdg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double DifferGuest1_5, double DifferGuest6_10, double DifferGuest11_15, double DifferGuest16_20, double DifferGuest21_25, double DifferGuest26, double DifferMain1_5, double DifferMain6_10, double DifferMain11_15, double DifferMain16_20, double DifferMain21_25, double DifferMain26, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketSfcdg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("DifferGuest1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest1_5),
                new MSSQL.Parameter("DifferGuest6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest6_10),
                new MSSQL.Parameter("DifferGuest11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest11_15),
                new MSSQL.Parameter("DifferGuest16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest16_20),
                new MSSQL.Parameter("DifferGuest21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest21_25),
                new MSSQL.Parameter("DifferGuest26", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest26),
                new MSSQL.Parameter("DifferMain1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain1_5),
                new MSSQL.Parameter("DifferMain6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain6_10),
                new MSSQL.Parameter("DifferMain11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain11_15),
                new MSSQL.Parameter("DifferMain16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain16_20),
                new MSSQL.Parameter("DifferMain21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain21_25),
                new MSSQL.Parameter("DifferMain26", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain26),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfcdg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double DifferGuest1_5, double DifferGuest6_10, double DifferGuest11_15, double DifferGuest16_20, double DifferGuest21_25, double DifferGuest26, double DifferMain1_5, double DifferMain6_10, double DifferMain11_15, double DifferMain16_20, double DifferMain21_25, double DifferMain26, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketSfcdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("DifferGuest1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest1_5),
                new MSSQL.Parameter("DifferGuest6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest6_10),
                new MSSQL.Parameter("DifferGuest11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest11_15),
                new MSSQL.Parameter("DifferGuest16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest16_20),
                new MSSQL.Parameter("DifferGuest21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest21_25),
                new MSSQL.Parameter("DifferGuest26", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest26),
                new MSSQL.Parameter("DifferMain1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain1_5),
                new MSSQL.Parameter("DifferMain6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain6_10),
                new MSSQL.Parameter("DifferMain11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain11_15),
                new MSSQL.Parameter("DifferMain16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain16_20),
                new MSSQL.Parameter("DifferMain21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain21_25),
                new MSSQL.Parameter("DifferMain26", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain26),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfcgg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double DifferGuest1_5, double DifferGuest6_10, double DifferGuest11_15, double DifferGuest16_20, double DifferGuest21_25, double DifferGuest26, double DifferMain1_5, double DifferMain6_10, double DifferMain11_15, double DifferMain16_20, double DifferMain21_25, double DifferMain26, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketSfcgg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("DifferGuest1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest1_5),
                new MSSQL.Parameter("DifferGuest6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest6_10),
                new MSSQL.Parameter("DifferGuest11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest11_15),
                new MSSQL.Parameter("DifferGuest16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest16_20),
                new MSSQL.Parameter("DifferGuest21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest21_25),
                new MSSQL.Parameter("DifferGuest26", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest26),
                new MSSQL.Parameter("DifferMain1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain1_5),
                new MSSQL.Parameter("DifferMain6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain6_10),
                new MSSQL.Parameter("DifferMain11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain11_15),
                new MSSQL.Parameter("DifferMain16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain16_20),
                new MSSQL.Parameter("DifferMain21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain21_25),
                new MSSQL.Parameter("DifferMain26", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain26),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfcgg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double DifferGuest1_5, double DifferGuest6_10, double DifferGuest11_15, double DifferGuest16_20, double DifferGuest21_25, double DifferGuest26, double DifferMain1_5, double DifferMain6_10, double DifferMain11_15, double DifferMain16_20, double DifferMain21_25, double DifferMain26, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketSfcgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("DifferGuest1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest1_5),
                new MSSQL.Parameter("DifferGuest6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest6_10),
                new MSSQL.Parameter("DifferGuest11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest11_15),
                new MSSQL.Parameter("DifferGuest16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest16_20),
                new MSSQL.Parameter("DifferGuest21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest21_25),
                new MSSQL.Parameter("DifferGuest26", SqlDbType.Float, 0, ParameterDirection.Input, DifferGuest26),
                new MSSQL.Parameter("DifferMain1_5", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain1_5),
                new MSSQL.Parameter("DifferMain6_10", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain6_10),
                new MSSQL.Parameter("DifferMain11_15", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain11_15),
                new MSSQL.Parameter("DifferMain16_20", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain16_20),
                new MSSQL.Parameter("DifferMain21_25", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain21_25),
                new MSSQL.Parameter("DifferMain26", SqlDbType.Float, 0, ParameterDirection.Input, DifferMain26),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfdg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double MainWin, double Mainlose, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketSfdg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("MainWin", SqlDbType.Float, 0, ParameterDirection.Input, MainWin),
                new MSSQL.Parameter("Mainlose", SqlDbType.Float, 0, ParameterDirection.Input, Mainlose),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfdg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double MainWin, double Mainlose, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketSfdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("MainWin", SqlDbType.Float, 0, ParameterDirection.Input, MainWin),
                new MSSQL.Parameter("Mainlose", SqlDbType.Float, 0, ParameterDirection.Input, Mainlose),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfgg(string ConnectionString, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double MainWin, double Mainlose, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_BasketSfgg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("MainWin", SqlDbType.Float, 0, ParameterDirection.Input, MainWin),
                new MSSQL.Parameter("Mainlose", SqlDbType.Float, 0, ParameterDirection.Input, Mainlose),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_BasketSfgg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellTime, double MainWin, double Mainlose, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_BasketSfgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellTime),
                new MSSQL.Parameter("MainWin", SqlDbType.Float, 0, ParameterDirection.Input, MainWin),
                new MSSQL.Parameter("Mainlose", SqlDbType.Float, 0, ParameterDirection.Input, Mainlose),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bfdg(string ConnectionString, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double S1_0, double S2_0, double S2_1, double S3_0, double S3_1, double S3_2, double S4_0, double S4_1, double S4_2, double S5_0, double S5_1, double S5_2, double SOther, double P0_0, double P1_1, double P2_2, double P3_3, double POther, double F0_1, double F0_2, double F1_2, double F0_3, double F1_3, double F2_3, double F0_4, double F1_4, double F2_4, double F0_5, double F1_5, double F2_5, double FOther, ref int ReurnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Bfdg", ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("S1_0", SqlDbType.Float, 0, ParameterDirection.Input, S1_0),
                new MSSQL.Parameter("S2_0", SqlDbType.Float, 0, ParameterDirection.Input, S2_0),
                new MSSQL.Parameter("S2_1", SqlDbType.Float, 0, ParameterDirection.Input, S2_1),
                new MSSQL.Parameter("S3_0", SqlDbType.Float, 0, ParameterDirection.Input, S3_0),
                new MSSQL.Parameter("S3_1", SqlDbType.Float, 0, ParameterDirection.Input, S3_1),
                new MSSQL.Parameter("S3_2", SqlDbType.Float, 0, ParameterDirection.Input, S3_2),
                new MSSQL.Parameter("S4_0", SqlDbType.Float, 0, ParameterDirection.Input, S4_0),
                new MSSQL.Parameter("S4_1", SqlDbType.Float, 0, ParameterDirection.Input, S4_1),
                new MSSQL.Parameter("S4_2", SqlDbType.Float, 0, ParameterDirection.Input, S4_2),
                new MSSQL.Parameter("S5_0", SqlDbType.Float, 0, ParameterDirection.Input, S5_0),
                new MSSQL.Parameter("S5_1", SqlDbType.Float, 0, ParameterDirection.Input, S5_1),
                new MSSQL.Parameter("S5_2", SqlDbType.Float, 0, ParameterDirection.Input, S5_2),
                new MSSQL.Parameter("SOther", SqlDbType.Float, 0, ParameterDirection.Input, SOther),
                new MSSQL.Parameter("P0_0", SqlDbType.Float, 0, ParameterDirection.Input, P0_0),
                new MSSQL.Parameter("P1_1", SqlDbType.Float, 0, ParameterDirection.Input, P1_1),
                new MSSQL.Parameter("P2_2", SqlDbType.Float, 0, ParameterDirection.Input, P2_2),
                new MSSQL.Parameter("P3_3", SqlDbType.Float, 0, ParameterDirection.Input, P3_3),
                new MSSQL.Parameter("POther", SqlDbType.Float, 0, ParameterDirection.Input, POther),
                new MSSQL.Parameter("F0_1", SqlDbType.Float, 0, ParameterDirection.Input, F0_1),
                new MSSQL.Parameter("F0_2", SqlDbType.Float, 0, ParameterDirection.Input, F0_2),
                new MSSQL.Parameter("F1_2", SqlDbType.Float, 0, ParameterDirection.Input, F1_2),
                new MSSQL.Parameter("F0_3", SqlDbType.Float, 0, ParameterDirection.Input, F0_3),
                new MSSQL.Parameter("F1_3", SqlDbType.Float, 0, ParameterDirection.Input, F1_3),
                new MSSQL.Parameter("F2_3", SqlDbType.Float, 0, ParameterDirection.Input, F2_3),
                new MSSQL.Parameter("F0_4", SqlDbType.Float, 0, ParameterDirection.Input, F0_4),
                new MSSQL.Parameter("F1_4", SqlDbType.Float, 0, ParameterDirection.Input, F1_4),
                new MSSQL.Parameter("F2_4", SqlDbType.Float, 0, ParameterDirection.Input, F2_4),
                new MSSQL.Parameter("F0_5", SqlDbType.Float, 0, ParameterDirection.Input, F0_5),
                new MSSQL.Parameter("F1_5", SqlDbType.Float, 0, ParameterDirection.Input, F1_5),
                new MSSQL.Parameter("F2_5", SqlDbType.Float, 0, ParameterDirection.Input, F2_5),
                new MSSQL.Parameter("FOther", SqlDbType.Float, 0, ParameterDirection.Input, FOther),
                new MSSQL.Parameter("ReurnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReurnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReurnValue = System.Convert.ToInt32(Outputs["ReurnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bfdg(string ConnectionString, ref DataSet ds, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double S1_0, double S2_0, double S2_1, double S3_0, double S3_1, double S3_2, double S4_0, double S4_1, double S4_2, double S5_0, double S5_1, double S5_2, double SOther, double P0_0, double P1_1, double P2_2, double P3_3, double POther, double F0_1, double F0_2, double F1_2, double F0_3, double F1_3, double F2_3, double F0_4, double F1_4, double F2_4, double F0_5, double F1_5, double F2_5, double FOther, ref int ReurnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Bfdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("S1_0", SqlDbType.Float, 0, ParameterDirection.Input, S1_0),
                new MSSQL.Parameter("S2_0", SqlDbType.Float, 0, ParameterDirection.Input, S2_0),
                new MSSQL.Parameter("S2_1", SqlDbType.Float, 0, ParameterDirection.Input, S2_1),
                new MSSQL.Parameter("S3_0", SqlDbType.Float, 0, ParameterDirection.Input, S3_0),
                new MSSQL.Parameter("S3_1", SqlDbType.Float, 0, ParameterDirection.Input, S3_1),
                new MSSQL.Parameter("S3_2", SqlDbType.Float, 0, ParameterDirection.Input, S3_2),
                new MSSQL.Parameter("S4_0", SqlDbType.Float, 0, ParameterDirection.Input, S4_0),
                new MSSQL.Parameter("S4_1", SqlDbType.Float, 0, ParameterDirection.Input, S4_1),
                new MSSQL.Parameter("S4_2", SqlDbType.Float, 0, ParameterDirection.Input, S4_2),
                new MSSQL.Parameter("S5_0", SqlDbType.Float, 0, ParameterDirection.Input, S5_0),
                new MSSQL.Parameter("S5_1", SqlDbType.Float, 0, ParameterDirection.Input, S5_1),
                new MSSQL.Parameter("S5_2", SqlDbType.Float, 0, ParameterDirection.Input, S5_2),
                new MSSQL.Parameter("SOther", SqlDbType.Float, 0, ParameterDirection.Input, SOther),
                new MSSQL.Parameter("P0_0", SqlDbType.Float, 0, ParameterDirection.Input, P0_0),
                new MSSQL.Parameter("P1_1", SqlDbType.Float, 0, ParameterDirection.Input, P1_1),
                new MSSQL.Parameter("P2_2", SqlDbType.Float, 0, ParameterDirection.Input, P2_2),
                new MSSQL.Parameter("P3_3", SqlDbType.Float, 0, ParameterDirection.Input, P3_3),
                new MSSQL.Parameter("POther", SqlDbType.Float, 0, ParameterDirection.Input, POther),
                new MSSQL.Parameter("F0_1", SqlDbType.Float, 0, ParameterDirection.Input, F0_1),
                new MSSQL.Parameter("F0_2", SqlDbType.Float, 0, ParameterDirection.Input, F0_2),
                new MSSQL.Parameter("F1_2", SqlDbType.Float, 0, ParameterDirection.Input, F1_2),
                new MSSQL.Parameter("F0_3", SqlDbType.Float, 0, ParameterDirection.Input, F0_3),
                new MSSQL.Parameter("F1_3", SqlDbType.Float, 0, ParameterDirection.Input, F1_3),
                new MSSQL.Parameter("F2_3", SqlDbType.Float, 0, ParameterDirection.Input, F2_3),
                new MSSQL.Parameter("F0_4", SqlDbType.Float, 0, ParameterDirection.Input, F0_4),
                new MSSQL.Parameter("F1_4", SqlDbType.Float, 0, ParameterDirection.Input, F1_4),
                new MSSQL.Parameter("F2_4", SqlDbType.Float, 0, ParameterDirection.Input, F2_4),
                new MSSQL.Parameter("F0_5", SqlDbType.Float, 0, ParameterDirection.Input, F0_5),
                new MSSQL.Parameter("F1_5", SqlDbType.Float, 0, ParameterDirection.Input, F1_5),
                new MSSQL.Parameter("F2_5", SqlDbType.Float, 0, ParameterDirection.Input, F2_5),
                new MSSQL.Parameter("FOther", SqlDbType.Float, 0, ParameterDirection.Input, FOther),
                new MSSQL.Parameter("ReurnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReurnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReurnValue = System.Convert.ToInt32(Outputs["ReurnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bfgg(string ConnectionString, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double S1_0, double S2_0, double S2_1, double S3_0, double S3_1, double S3_2, double S4_0, double S4_1, double S4_2, double S5_0, double S5_1, double S5_2, double SOther, double P0_0, double P1_1, double P2_2, double P3_3, double POther, double F0_1, double F0_2, double F1_2, double F0_3, double F1_3, double F2_3, double F0_4, double F1_4, double F2_4, double F0_5, double F1_5, double F2_5, double FOther, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Bfgg", ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("S1_0", SqlDbType.Float, 0, ParameterDirection.Input, S1_0),
                new MSSQL.Parameter("S2_0", SqlDbType.Float, 0, ParameterDirection.Input, S2_0),
                new MSSQL.Parameter("S2_1", SqlDbType.Float, 0, ParameterDirection.Input, S2_1),
                new MSSQL.Parameter("S3_0", SqlDbType.Float, 0, ParameterDirection.Input, S3_0),
                new MSSQL.Parameter("S3_1", SqlDbType.Float, 0, ParameterDirection.Input, S3_1),
                new MSSQL.Parameter("S3_2", SqlDbType.Float, 0, ParameterDirection.Input, S3_2),
                new MSSQL.Parameter("S4_0", SqlDbType.Float, 0, ParameterDirection.Input, S4_0),
                new MSSQL.Parameter("S4_1", SqlDbType.Float, 0, ParameterDirection.Input, S4_1),
                new MSSQL.Parameter("S4_2", SqlDbType.Float, 0, ParameterDirection.Input, S4_2),
                new MSSQL.Parameter("S5_0", SqlDbType.Float, 0, ParameterDirection.Input, S5_0),
                new MSSQL.Parameter("S5_1", SqlDbType.Float, 0, ParameterDirection.Input, S5_1),
                new MSSQL.Parameter("S5_2", SqlDbType.Float, 0, ParameterDirection.Input, S5_2),
                new MSSQL.Parameter("SOther", SqlDbType.Float, 0, ParameterDirection.Input, SOther),
                new MSSQL.Parameter("P0_0", SqlDbType.Float, 0, ParameterDirection.Input, P0_0),
                new MSSQL.Parameter("P1_1", SqlDbType.Float, 0, ParameterDirection.Input, P1_1),
                new MSSQL.Parameter("P2_2", SqlDbType.Float, 0, ParameterDirection.Input, P2_2),
                new MSSQL.Parameter("P3_3", SqlDbType.Float, 0, ParameterDirection.Input, P3_3),
                new MSSQL.Parameter("POther", SqlDbType.Float, 0, ParameterDirection.Input, POther),
                new MSSQL.Parameter("F0_1", SqlDbType.Float, 0, ParameterDirection.Input, F0_1),
                new MSSQL.Parameter("F0_2", SqlDbType.Float, 0, ParameterDirection.Input, F0_2),
                new MSSQL.Parameter("F1_2", SqlDbType.Float, 0, ParameterDirection.Input, F1_2),
                new MSSQL.Parameter("F0_3", SqlDbType.Float, 0, ParameterDirection.Input, F0_3),
                new MSSQL.Parameter("F1_3", SqlDbType.Float, 0, ParameterDirection.Input, F1_3),
                new MSSQL.Parameter("F2_3", SqlDbType.Float, 0, ParameterDirection.Input, F2_3),
                new MSSQL.Parameter("F0_4", SqlDbType.Float, 0, ParameterDirection.Input, F0_4),
                new MSSQL.Parameter("F1_4", SqlDbType.Float, 0, ParameterDirection.Input, F1_4),
                new MSSQL.Parameter("F2_4", SqlDbType.Float, 0, ParameterDirection.Input, F2_4),
                new MSSQL.Parameter("F0_5", SqlDbType.Float, 0, ParameterDirection.Input, F0_5),
                new MSSQL.Parameter("F1_5", SqlDbType.Float, 0, ParameterDirection.Input, F1_5),
                new MSSQL.Parameter("F2_5", SqlDbType.Float, 0, ParameterDirection.Input, F2_5),
                new MSSQL.Parameter("FOther", SqlDbType.Float, 0, ParameterDirection.Input, FOther),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bfgg(string ConnectionString, ref DataSet ds, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double S1_0, double S2_0, double S2_1, double S3_0, double S3_1, double S3_2, double S4_0, double S4_1, double S4_2, double S5_0, double S5_1, double S5_2, double SOther, double P0_0, double P1_1, double P2_2, double P3_3, double POther, double F0_1, double F0_2, double F1_2, double F0_3, double F1_3, double F2_3, double F0_4, double F1_4, double F2_4, double F0_5, double F1_5, double F2_5, double FOther, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Bfgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("S1_0", SqlDbType.Float, 0, ParameterDirection.Input, S1_0),
                new MSSQL.Parameter("S2_0", SqlDbType.Float, 0, ParameterDirection.Input, S2_0),
                new MSSQL.Parameter("S2_1", SqlDbType.Float, 0, ParameterDirection.Input, S2_1),
                new MSSQL.Parameter("S3_0", SqlDbType.Float, 0, ParameterDirection.Input, S3_0),
                new MSSQL.Parameter("S3_1", SqlDbType.Float, 0, ParameterDirection.Input, S3_1),
                new MSSQL.Parameter("S3_2", SqlDbType.Float, 0, ParameterDirection.Input, S3_2),
                new MSSQL.Parameter("S4_0", SqlDbType.Float, 0, ParameterDirection.Input, S4_0),
                new MSSQL.Parameter("S4_1", SqlDbType.Float, 0, ParameterDirection.Input, S4_1),
                new MSSQL.Parameter("S4_2", SqlDbType.Float, 0, ParameterDirection.Input, S4_2),
                new MSSQL.Parameter("S5_0", SqlDbType.Float, 0, ParameterDirection.Input, S5_0),
                new MSSQL.Parameter("S5_1", SqlDbType.Float, 0, ParameterDirection.Input, S5_1),
                new MSSQL.Parameter("S5_2", SqlDbType.Float, 0, ParameterDirection.Input, S5_2),
                new MSSQL.Parameter("SOther", SqlDbType.Float, 0, ParameterDirection.Input, SOther),
                new MSSQL.Parameter("P0_0", SqlDbType.Float, 0, ParameterDirection.Input, P0_0),
                new MSSQL.Parameter("P1_1", SqlDbType.Float, 0, ParameterDirection.Input, P1_1),
                new MSSQL.Parameter("P2_2", SqlDbType.Float, 0, ParameterDirection.Input, P2_2),
                new MSSQL.Parameter("P3_3", SqlDbType.Float, 0, ParameterDirection.Input, P3_3),
                new MSSQL.Parameter("POther", SqlDbType.Float, 0, ParameterDirection.Input, POther),
                new MSSQL.Parameter("F0_1", SqlDbType.Float, 0, ParameterDirection.Input, F0_1),
                new MSSQL.Parameter("F0_2", SqlDbType.Float, 0, ParameterDirection.Input, F0_2),
                new MSSQL.Parameter("F1_2", SqlDbType.Float, 0, ParameterDirection.Input, F1_2),
                new MSSQL.Parameter("F0_3", SqlDbType.Float, 0, ParameterDirection.Input, F0_3),
                new MSSQL.Parameter("F1_3", SqlDbType.Float, 0, ParameterDirection.Input, F1_3),
                new MSSQL.Parameter("F2_3", SqlDbType.Float, 0, ParameterDirection.Input, F2_3),
                new MSSQL.Parameter("F0_4", SqlDbType.Float, 0, ParameterDirection.Input, F0_4),
                new MSSQL.Parameter("F1_4", SqlDbType.Float, 0, ParameterDirection.Input, F1_4),
                new MSSQL.Parameter("F2_4", SqlDbType.Float, 0, ParameterDirection.Input, F2_4),
                new MSSQL.Parameter("F0_5", SqlDbType.Float, 0, ParameterDirection.Input, F0_5),
                new MSSQL.Parameter("F1_5", SqlDbType.Float, 0, ParameterDirection.Input, F1_5),
                new MSSQL.Parameter("F2_5", SqlDbType.Float, 0, ParameterDirection.Input, F2_5),
                new MSSQL.Parameter("FOther", SqlDbType.Float, 0, ParameterDirection.Input, FOther),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bqcdg(string ConnectionString, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double SS, double SP, double SF, double PS, double PP, double PF, double FS, double FP, double FF, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Bqcdg", ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("SS", SqlDbType.Float, 0, ParameterDirection.Input, SS),
                new MSSQL.Parameter("SP", SqlDbType.Float, 0, ParameterDirection.Input, SP),
                new MSSQL.Parameter("SF", SqlDbType.Float, 0, ParameterDirection.Input, SF),
                new MSSQL.Parameter("PS", SqlDbType.Float, 0, ParameterDirection.Input, PS),
                new MSSQL.Parameter("PP", SqlDbType.Float, 0, ParameterDirection.Input, PP),
                new MSSQL.Parameter("PF", SqlDbType.Float, 0, ParameterDirection.Input, PF),
                new MSSQL.Parameter("FS", SqlDbType.Float, 0, ParameterDirection.Input, FS),
                new MSSQL.Parameter("FP", SqlDbType.Float, 0, ParameterDirection.Input, FP),
                new MSSQL.Parameter("FF", SqlDbType.Float, 0, ParameterDirection.Input, FF),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bqcdg(string ConnectionString, ref DataSet ds, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double SS, double SP, double SF, double PS, double PP, double PF, double FS, double FP, double FF, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Bqcdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("SS", SqlDbType.Float, 0, ParameterDirection.Input, SS),
                new MSSQL.Parameter("SP", SqlDbType.Float, 0, ParameterDirection.Input, SP),
                new MSSQL.Parameter("SF", SqlDbType.Float, 0, ParameterDirection.Input, SF),
                new MSSQL.Parameter("PS", SqlDbType.Float, 0, ParameterDirection.Input, PS),
                new MSSQL.Parameter("PP", SqlDbType.Float, 0, ParameterDirection.Input, PP),
                new MSSQL.Parameter("PF", SqlDbType.Float, 0, ParameterDirection.Input, PF),
                new MSSQL.Parameter("FS", SqlDbType.Float, 0, ParameterDirection.Input, FS),
                new MSSQL.Parameter("FP", SqlDbType.Float, 0, ParameterDirection.Input, FP),
                new MSSQL.Parameter("FF", SqlDbType.Float, 0, ParameterDirection.Input, FF),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bqcgg(string ConnectionString, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double SS, double SP, double SF, double PS, double PP, double PF, double FS, double FP, double FF, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Bqcgg", ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("SS", SqlDbType.Float, 0, ParameterDirection.Input, SS),
                new MSSQL.Parameter("SP", SqlDbType.Float, 0, ParameterDirection.Input, SP),
                new MSSQL.Parameter("SF", SqlDbType.Float, 0, ParameterDirection.Input, SF),
                new MSSQL.Parameter("PS", SqlDbType.Float, 0, ParameterDirection.Input, PS),
                new MSSQL.Parameter("PP", SqlDbType.Float, 0, ParameterDirection.Input, PP),
                new MSSQL.Parameter("PF", SqlDbType.Float, 0, ParameterDirection.Input, PF),
                new MSSQL.Parameter("FS", SqlDbType.Float, 0, ParameterDirection.Input, FS),
                new MSSQL.Parameter("FP", SqlDbType.Float, 0, ParameterDirection.Input, FP),
                new MSSQL.Parameter("FF", SqlDbType.Float, 0, ParameterDirection.Input, FF),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Bqcgg(string ConnectionString, ref DataSet ds, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double SS, double SP, double SF, double PS, double PP, double PF, double FS, double FP, double FF, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Bqcgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("SS", SqlDbType.Float, 0, ParameterDirection.Input, SS),
                new MSSQL.Parameter("SP", SqlDbType.Float, 0, ParameterDirection.Input, SP),
                new MSSQL.Parameter("SF", SqlDbType.Float, 0, ParameterDirection.Input, SF),
                new MSSQL.Parameter("PS", SqlDbType.Float, 0, ParameterDirection.Input, PS),
                new MSSQL.Parameter("PP", SqlDbType.Float, 0, ParameterDirection.Input, PP),
                new MSSQL.Parameter("PF", SqlDbType.Float, 0, ParameterDirection.Input, PF),
                new MSSQL.Parameter("FS", SqlDbType.Float, 0, ParameterDirection.Input, FS),
                new MSSQL.Parameter("FP", SqlDbType.Float, 0, ParameterDirection.Input, FP),
                new MSSQL.Parameter("FF", SqlDbType.Float, 0, ParameterDirection.Input, FF),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CalculateScore(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CalculateScore", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CalculateScore(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CalculateScore", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CalculateUserLevel(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CalculateUserLevel", ref Outputs);

            return CallResult;
        }

        public static int P_CalculateUserLevel(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CalculateUserLevel", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_CanExpenseBonus(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CanExpenseBonus", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CanExpenseBonus(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CanExpenseBonus", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordAdd(string ConnectionString, int AgentID, int Period, double Money, int Count, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordAdd", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("Period", SqlDbType.Int, 0, ParameterDirection.Input, Period),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Count", SqlDbType.Int, 0, ParameterDirection.Input, Count),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordAdd(string ConnectionString, ref DataSet ds, int AgentID, int Period, double Money, int Count, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("Period", SqlDbType.Int, 0, ParameterDirection.Input, Period),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Count", SqlDbType.Int, 0, ParameterDirection.Input, Count),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordAgentAddMoney(string ConnectionString, long AgentID, double Amount, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordAgentAddMoney", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.BigInt, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("Amount", SqlDbType.Money, 0, ParameterDirection.Input, Amount),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordAgentAddMoney(string ConnectionString, ref DataSet ds, long AgentID, double Amount, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordAgentAddMoney", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.BigInt, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("Amount", SqlDbType.Money, 0, ParameterDirection.Input, Amount),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordExchange(string ConnectionString, int AgentID, string CardsXml, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordExchange", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardsXml", SqlDbType.NText, 0, ParameterDirection.Input, CardsXml),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordExchange(string ConnectionString, ref DataSet ds, int AgentID, string CardsXml, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordExchange", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardsXml", SqlDbType.NText, 0, ParameterDirection.Input, CardsXml),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordGet(string ConnectionString, int AgentID, long CardPasswordID, ref DateTime DateTime, ref DateTime Period, ref double Money, ref short State, ref long UserID, ref DateTime UseDateTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordGet", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardPasswordID", SqlDbType.BigInt, 0, ParameterDirection.Input, CardPasswordID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 8, ParameterDirection.Output, DateTime),
                new MSSQL.Parameter("Period", SqlDbType.DateTime, 8, ParameterDirection.Output, Period),
                new MSSQL.Parameter("Money", SqlDbType.Money, 8, ParameterDirection.Output, Money),
                new MSSQL.Parameter("State", SqlDbType.SmallInt, 2, ParameterDirection.Output, State),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("UseDateTime", SqlDbType.DateTime, 8, ParameterDirection.Output, UseDateTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                DateTime = System.Convert.ToDateTime(Outputs["DateTime"]);
            }
            catch { }

            try
            {
                Period = System.Convert.ToDateTime(Outputs["Period"]);
            }
            catch { }

            try
            {
                Money = System.Convert.ToDouble(Outputs["Money"]);
            }
            catch { }

            try
            {
                State = System.Convert.ToInt16(Outputs["State"]);
            }
            catch { }

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                UseDateTime = System.Convert.ToDateTime(Outputs["UseDateTime"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordGet(string ConnectionString, ref DataSet ds, int AgentID, long CardPasswordID, ref DateTime DateTime, ref DateTime Period, ref double Money, ref short State, ref long UserID, ref DateTime UseDateTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordGet", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardPasswordID", SqlDbType.BigInt, 0, ParameterDirection.Input, CardPasswordID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 8, ParameterDirection.Output, DateTime),
                new MSSQL.Parameter("Period", SqlDbType.DateTime, 8, ParameterDirection.Output, Period),
                new MSSQL.Parameter("Money", SqlDbType.Money, 8, ParameterDirection.Output, Money),
                new MSSQL.Parameter("State", SqlDbType.SmallInt, 2, ParameterDirection.Output, State),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("UseDateTime", SqlDbType.DateTime, 8, ParameterDirection.Output, UseDateTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                DateTime = System.Convert.ToDateTime(Outputs["DateTime"]);
            }
            catch { }

            try
            {
                Period = System.Convert.ToDateTime(Outputs["Period"]);
            }
            catch { }

            try
            {
                Money = System.Convert.ToDouble(Outputs["Money"]);
            }
            catch { }

            try
            {
                State = System.Convert.ToInt16(Outputs["State"]);
            }
            catch { }

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                UseDateTime = System.Convert.ToDateTime(Outputs["UseDateTime"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordSetPeriod(string ConnectionString, int AgentID, long CardPasswordID, DateTime Period, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordSetPeriod", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardPasswordID", SqlDbType.BigInt, 0, ParameterDirection.Input, CardPasswordID),
                new MSSQL.Parameter("Period", SqlDbType.DateTime, 0, ParameterDirection.Input, Period),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordSetPeriod(string ConnectionString, ref DataSet ds, int AgentID, long CardPasswordID, DateTime Period, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordSetPeriod", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardPasswordID", SqlDbType.BigInt, 0, ParameterDirection.Input, CardPasswordID),
                new MSSQL.Parameter("Period", SqlDbType.DateTime, 0, ParameterDirection.Input, Period),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordTryErrorAdd(string ConnectionString, long UserID, string Number, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordTryErrorAdd", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordTryErrorAdd(string ConnectionString, ref DataSet ds, long UserID, string Number, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordTryErrorAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordTryErrorFreeze(string ConnectionString, long SiteID, long UserID, ref int Freeze, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordTryErrorFreeze", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Freeze", SqlDbType.Int, 4, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                Freeze = System.Convert.ToInt32(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordTryErrorFreeze(string ConnectionString, ref DataSet ds, long SiteID, long UserID, ref int Freeze, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordTryErrorFreeze", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Freeze", SqlDbType.Int, 4, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                Freeze = System.Convert.ToInt32(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordUse(string ConnectionString, int AgentID, long CardPasswordID, string Number, long SiteID, long UserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CardPasswordUse", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardPasswordID", SqlDbType.BigInt, 0, ParameterDirection.Input, CardPasswordID),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CardPasswordUse(string ConnectionString, ref DataSet ds, int AgentID, long CardPasswordID, string Number, long SiteID, long UserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CardPasswordUse", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.Int, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("CardPasswordID", SqlDbType.BigInt, 0, ParameterDirection.Input, CardPasswordID),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CelebDelete(string ConnectionString, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CelebDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CelebDelete(string ConnectionString, ref DataSet ds, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CelebDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CelebEdit(string ConnectionString, long SiteID, long ID, string Title, string Intro, string Say, string Comment, string Score, long Order, bool isRecommended, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CelebEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Intro", SqlDbType.VarChar, 0, ParameterDirection.Input, Intro),
                new MSSQL.Parameter("Say", SqlDbType.VarChar, 0, ParameterDirection.Input, Say),
                new MSSQL.Parameter("Comment", SqlDbType.VarChar, 0, ParameterDirection.Input, Comment),
                new MSSQL.Parameter("Score", SqlDbType.VarChar, 0, ParameterDirection.Input, Score),
                new MSSQL.Parameter("Order", SqlDbType.BigInt, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isRecommended", SqlDbType.Bit, 0, ParameterDirection.Input, isRecommended),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CelebEdit(string ConnectionString, ref DataSet ds, long SiteID, long ID, string Title, string Intro, string Say, string Comment, string Score, long Order, bool isRecommended, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CelebEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Intro", SqlDbType.VarChar, 0, ParameterDirection.Input, Intro),
                new MSSQL.Parameter("Say", SqlDbType.VarChar, 0, ParameterDirection.Input, Say),
                new MSSQL.Parameter("Comment", SqlDbType.VarChar, 0, ParameterDirection.Input, Comment),
                new MSSQL.Parameter("Score", SqlDbType.VarChar, 0, ParameterDirection.Input, Score),
                new MSSQL.Parameter("Order", SqlDbType.BigInt, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isRecommended", SqlDbType.Bit, 0, ParameterDirection.Input, isRecommended),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ChallengeBetRedAdd(string ConnectionString, long UserID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ChallengeBetRedAdd", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return CallResult;
        }

        public static int P_ChallengeBetRedAdd(string ConnectionString, ref DataSet ds, long UserID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ChallengeBetRedAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID)
                );

            return CallResult;
        }

        public static int P_ChallengeHotBetAdd(string ConnectionString, long MatchID, long WinCount, long DrawCount, long LostCount)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ChallengeHotBetAdd", ref Outputs,
                new MSSQL.Parameter("MatchID", SqlDbType.BigInt, 0, ParameterDirection.Input, MatchID),
                new MSSQL.Parameter("WinCount", SqlDbType.BigInt, 0, ParameterDirection.Input, WinCount),
                new MSSQL.Parameter("DrawCount", SqlDbType.BigInt, 0, ParameterDirection.Input, DrawCount),
                new MSSQL.Parameter("LostCount", SqlDbType.BigInt, 0, ParameterDirection.Input, LostCount)
                );

            return CallResult;
        }

        public static int P_ChallengeHotBetAdd(string ConnectionString, ref DataSet ds, long MatchID, long WinCount, long DrawCount, long LostCount)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ChallengeHotBetAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchID", SqlDbType.BigInt, 0, ParameterDirection.Input, MatchID),
                new MSSQL.Parameter("WinCount", SqlDbType.BigInt, 0, ParameterDirection.Input, WinCount),
                new MSSQL.Parameter("DrawCount", SqlDbType.BigInt, 0, ParameterDirection.Input, DrawCount),
                new MSSQL.Parameter("LostCount", SqlDbType.BigInt, 0, ParameterDirection.Input, LostCount)
                );

            return CallResult;
        }

        public static int P_ChasesAdd(string ConnectionString, long UserID, int LotteryID, int PlayTypeID, int Price, short Type, DateTime StartTime, DateTime EndTime, int IsuseCount, int Multiple, int Nums, short BetType, string LotteryNumber, short StopTypeWhenWin, double StopTypeWhenMoney, double Money, string Title, string ChaseXML, ref int ChaseID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ChasesAdd", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Price", SqlDbType.Int, 0, ParameterDirection.Input, Price),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("IsuseCount", SqlDbType.Int, 0, ParameterDirection.Input, IsuseCount),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Nums", SqlDbType.Int, 0, ParameterDirection.Input, Nums),
                new MSSQL.Parameter("BetType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BetType),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("StopTypeWhenWin", SqlDbType.SmallInt, 0, ParameterDirection.Input, StopTypeWhenWin),
                new MSSQL.Parameter("StopTypeWhenMoney", SqlDbType.Money, 0, ParameterDirection.Input, StopTypeWhenMoney),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("ChaseXML", SqlDbType.VarChar, 0, ParameterDirection.Input, ChaseXML),
                new MSSQL.Parameter("ChaseID", SqlDbType.Int, 4, ParameterDirection.Output, ChaseID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 50, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ChaseID = System.Convert.ToInt32(Outputs["ChaseID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ChasesAdd(string ConnectionString, ref DataSet ds, long UserID, int LotteryID, int PlayTypeID, int Price, short Type, DateTime StartTime, DateTime EndTime, int IsuseCount, int Multiple, int Nums, short BetType, string LotteryNumber, short StopTypeWhenWin, double StopTypeWhenMoney, double Money, string Title, string ChaseXML, ref int ChaseID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ChasesAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Price", SqlDbType.Int, 0, ParameterDirection.Input, Price),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("IsuseCount", SqlDbType.Int, 0, ParameterDirection.Input, IsuseCount),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Nums", SqlDbType.Int, 0, ParameterDirection.Input, Nums),
                new MSSQL.Parameter("BetType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BetType),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("StopTypeWhenWin", SqlDbType.SmallInt, 0, ParameterDirection.Input, StopTypeWhenWin),
                new MSSQL.Parameter("StopTypeWhenMoney", SqlDbType.Money, 0, ParameterDirection.Input, StopTypeWhenMoney),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("ChaseXML", SqlDbType.VarChar, 0, ParameterDirection.Input, ChaseXML),
                new MSSQL.Parameter("ChaseID", SqlDbType.Int, 4, ParameterDirection.Output, ChaseID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 50, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ChaseID = System.Convert.ToInt32(Outputs["ChaseID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ChaseStopWhenWin(string ConnectionString, long SchemeID, double WinMoney, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ChaseStopWhenWin", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ChaseStopWhenWin(string ConnectionString, ref DataSet ds, long SchemeID, double WinMoney, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ChaseStopWhenWin", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ChaseTaskStopWhenWin(string ConnectionString, long SiteID, long SchemeID, double WinMoney, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ChaseTaskStopWhenWin", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ChaseTaskStopWhenWin(string ConnectionString, ref DataSet ds, long SiteID, long SchemeID, double WinMoney, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ChaseTaskStopWhenWin", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CheckChaseTasks(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CheckChaseTasks", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CheckChaseTasks(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CheckChaseTasks", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ClearSystemLog(string ConnectionString, long SiteID, long UserID, string IPAddress, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ClearSystemLog", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("IPAddress", SqlDbType.VarChar, 0, ParameterDirection.Input, IPAddress),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ClearSystemLog(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string IPAddress, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ClearSystemLog", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("IPAddress", SqlDbType.VarChar, 0, ParameterDirection.Input, IPAddress),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CompensationRateAdd(string ConnectionString, long OkoooMatchID, string Day, string MatchNumber, ref int RetrunValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CompensationRateAdd", ref Outputs,
                new MSSQL.Parameter("OkoooMatchID", SqlDbType.BigInt, 0, ParameterDirection.Input, OkoooMatchID),
                new MSSQL.Parameter("Day", SqlDbType.VarChar, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("RetrunValue", SqlDbType.Int, 4, ParameterDirection.Output, RetrunValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                RetrunValue = System.Convert.ToInt32(Outputs["RetrunValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CompensationRateAdd(string ConnectionString, ref DataSet ds, long OkoooMatchID, string Day, string MatchNumber, ref int RetrunValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CompensationRateAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("OkoooMatchID", SqlDbType.BigInt, 0, ParameterDirection.Input, OkoooMatchID),
                new MSSQL.Parameter("Day", SqlDbType.VarChar, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("RetrunValue", SqlDbType.Int, 4, ParameterDirection.Output, RetrunValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                RetrunValue = System.Convert.ToInt32(Outputs["RetrunValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CompensationRateEdit(string ConnectionString, long OkoooMatchID, string Day, string MatchNumber, double Average99_S, double Average99_P, double Average99_F, double Willhill_S, double Willhill_P, double Willhill_F, double Lad_S, double Lad_P, double Lad_F, double Bet365_S, double Bet365_P, double Bet365_F, double Macau_S, double Macau_P, double Macau_F, ref int RetrunValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CompensationRateEdit", ref Outputs,
                new MSSQL.Parameter("OkoooMatchID", SqlDbType.BigInt, 0, ParameterDirection.Input, OkoooMatchID),
                new MSSQL.Parameter("Day", SqlDbType.VarChar, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Average99_S", SqlDbType.Float, 0, ParameterDirection.Input, Average99_S),
                new MSSQL.Parameter("Average99_P", SqlDbType.Float, 0, ParameterDirection.Input, Average99_P),
                new MSSQL.Parameter("Average99_F", SqlDbType.Float, 0, ParameterDirection.Input, Average99_F),
                new MSSQL.Parameter("Willhill_S", SqlDbType.Float, 0, ParameterDirection.Input, Willhill_S),
                new MSSQL.Parameter("Willhill_P", SqlDbType.Float, 0, ParameterDirection.Input, Willhill_P),
                new MSSQL.Parameter("Willhill_F", SqlDbType.Float, 0, ParameterDirection.Input, Willhill_F),
                new MSSQL.Parameter("Lad_S", SqlDbType.Float, 0, ParameterDirection.Input, Lad_S),
                new MSSQL.Parameter("Lad_P", SqlDbType.Float, 0, ParameterDirection.Input, Lad_P),
                new MSSQL.Parameter("Lad_F", SqlDbType.Float, 0, ParameterDirection.Input, Lad_F),
                new MSSQL.Parameter("Bet365_S", SqlDbType.Float, 0, ParameterDirection.Input, Bet365_S),
                new MSSQL.Parameter("Bet365_P", SqlDbType.Float, 0, ParameterDirection.Input, Bet365_P),
                new MSSQL.Parameter("Bet365_F", SqlDbType.Float, 0, ParameterDirection.Input, Bet365_F),
                new MSSQL.Parameter("Macau_S", SqlDbType.Float, 0, ParameterDirection.Input, Macau_S),
                new MSSQL.Parameter("Macau_P", SqlDbType.Float, 0, ParameterDirection.Input, Macau_P),
                new MSSQL.Parameter("Macau_F", SqlDbType.Float, 0, ParameterDirection.Input, Macau_F),
                new MSSQL.Parameter("RetrunValue", SqlDbType.Int, 4, ParameterDirection.Output, RetrunValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                RetrunValue = System.Convert.ToInt32(Outputs["RetrunValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CompensationRateEdit(string ConnectionString, ref DataSet ds, long OkoooMatchID, string Day, string MatchNumber, double Average99_S, double Average99_P, double Average99_F, double Willhill_S, double Willhill_P, double Willhill_F, double Lad_S, double Lad_P, double Lad_F, double Bet365_S, double Bet365_P, double Bet365_F, double Macau_S, double Macau_P, double Macau_F, ref int RetrunValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CompensationRateEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("OkoooMatchID", SqlDbType.BigInt, 0, ParameterDirection.Input, OkoooMatchID),
                new MSSQL.Parameter("Day", SqlDbType.VarChar, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Average99_S", SqlDbType.Float, 0, ParameterDirection.Input, Average99_S),
                new MSSQL.Parameter("Average99_P", SqlDbType.Float, 0, ParameterDirection.Input, Average99_P),
                new MSSQL.Parameter("Average99_F", SqlDbType.Float, 0, ParameterDirection.Input, Average99_F),
                new MSSQL.Parameter("Willhill_S", SqlDbType.Float, 0, ParameterDirection.Input, Willhill_S),
                new MSSQL.Parameter("Willhill_P", SqlDbType.Float, 0, ParameterDirection.Input, Willhill_P),
                new MSSQL.Parameter("Willhill_F", SqlDbType.Float, 0, ParameterDirection.Input, Willhill_F),
                new MSSQL.Parameter("Lad_S", SqlDbType.Float, 0, ParameterDirection.Input, Lad_S),
                new MSSQL.Parameter("Lad_P", SqlDbType.Float, 0, ParameterDirection.Input, Lad_P),
                new MSSQL.Parameter("Lad_F", SqlDbType.Float, 0, ParameterDirection.Input, Lad_F),
                new MSSQL.Parameter("Bet365_S", SqlDbType.Float, 0, ParameterDirection.Input, Bet365_S),
                new MSSQL.Parameter("Bet365_P", SqlDbType.Float, 0, ParameterDirection.Input, Bet365_P),
                new MSSQL.Parameter("Bet365_F", SqlDbType.Float, 0, ParameterDirection.Input, Bet365_F),
                new MSSQL.Parameter("Macau_S", SqlDbType.Float, 0, ParameterDirection.Input, Macau_S),
                new MSSQL.Parameter("Macau_P", SqlDbType.Float, 0, ParameterDirection.Input, Macau_P),
                new MSSQL.Parameter("Macau_F", SqlDbType.Float, 0, ParameterDirection.Input, Macau_F),
                new MSSQL.Parameter("RetrunValue", SqlDbType.Int, 4, ParameterDirection.Output, RetrunValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                RetrunValue = System.Convert.ToInt32(Outputs["RetrunValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsAdd(string ConnectionString, long SiteID, long OwnerUserID, string Name, string Url, string LogoUrl, double BonusScale, bool ON, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string MD5Key, short Type, long ParentID, string DomainName, long OperatorID, long CommendID, ref long ID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 0, ParameterDirection.Input, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 0, ParameterDirection.Input, ParentID),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 0, ParameterDirection.Input, DomainName),
                new MSSQL.Parameter("OperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OperatorID),
                new MSSQL.Parameter("CommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommendID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 8, ParameterDirection.Output, ID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ID = System.Convert.ToInt64(Outputs["ID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsAdd(string ConnectionString, ref DataSet ds, long SiteID, long OwnerUserID, string Name, string Url, string LogoUrl, double BonusScale, bool ON, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string MD5Key, short Type, long ParentID, string DomainName, long OperatorID, long CommendID, ref long ID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 0, ParameterDirection.Input, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 0, ParameterDirection.Input, ParentID),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 0, ParameterDirection.Input, DomainName),
                new MSSQL.Parameter("OperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OperatorID),
                new MSSQL.Parameter("CommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommendID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 8, ParameterDirection.Output, ID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ID = System.Convert.ToInt64(Outputs["ID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsAdminAccountByMonth(string ConnectionString, long SiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsAdminAccountByMonth", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsAdminAccountByMonth(string ConnectionString, ref DataSet ds, long SiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsAdminAccountByMonth", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsCalculateAllowBonus(string ConnectionString, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsCalculateAllowBonus", ref Outputs,
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsCalculateAllowBonus(string ConnectionString, ref DataSet ds, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsCalculateAllowBonus", ref ds, ref Outputs,
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsCalculateBonus(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsCalculateBonus", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsCalculateBonus(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsCalculateBonus", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistill(string ConnectionString, long SiteID, long UserID, double Money, double FormalitiesFees, string BankUserName, string BankName, string BankCardNumber, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsDistill", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankUserName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistill(string ConnectionString, ref DataSet ds, long SiteID, long UserID, double Money, double FormalitiesFees, string BankUserName, string BankName, string BankCardNumber, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsDistill", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankUserName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistillAccept(string ConnectionString, long SiteID, long UserID, long DistillID, string PayName, string PayBank, string PayCardNumber, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsDistillAccept", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("PayName", SqlDbType.VarChar, 0, ParameterDirection.Input, PayName),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("PayCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayCardNumber),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistillAccept(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long DistillID, string PayName, string PayBank, string PayCardNumber, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsDistillAccept", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("PayName", SqlDbType.VarChar, 0, ParameterDirection.Input, PayName),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("PayCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayCardNumber),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistillNoAccept(string ConnectionString, long SiteID, long UserID, long DistillID, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsDistillNoAccept", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistillNoAccept(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long DistillID, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsDistillNoAccept", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistillQuash(string ConnectionString, long SiteID, long UserID, long DistillID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsDistillQuash", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsDistillQuash(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long DistillID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsDistillQuash", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsEdit(string ConnectionString, long SiteID, long CpsID, string UrlName, string Url, string LogoUrl, double BonusScale, bool ON, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string MD5Key, short Type, string DomainName, bool IsShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("UrlName", SqlDbType.VarChar, 0, ParameterDirection.Input, UrlName),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 0, ParameterDirection.Input, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 0, ParameterDirection.Input, DomainName),
                new MSSQL.Parameter("IsShow", SqlDbType.Bit, 0, ParameterDirection.Input, IsShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsEdit(string ConnectionString, ref DataSet ds, long SiteID, long CpsID, string UrlName, string Url, string LogoUrl, double BonusScale, bool ON, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string MD5Key, short Type, string DomainName, bool IsShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("UrlName", SqlDbType.VarChar, 0, ParameterDirection.Input, UrlName),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 0, ParameterDirection.Input, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 0, ParameterDirection.Input, DomainName),
                new MSSQL.Parameter("IsShow", SqlDbType.Bit, 0, ParameterDirection.Input, IsShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommenderBuyDetailByDate(string ConnectionString, long SiteID, long CommenderID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetCommenderBuyDetailByDate", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommenderBuyDetailByDate(string ConnectionString, ref DataSet ds, long SiteID, long CommenderID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetCommenderBuyDetailByDate", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommendMemberBuyDetail(string ConnectionString, long SiteID, long CommenderID, long MemberID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetCommendMemberBuyDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("MemberID", SqlDbType.BigInt, 0, ParameterDirection.Input, MemberID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommendMemberBuyDetail(string ConnectionString, ref DataSet ds, long SiteID, long CommenderID, long MemberID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetCommendMemberBuyDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("MemberID", SqlDbType.BigInt, 0, ParameterDirection.Input, MemberID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommendMemberList(string ConnectionString, long CommmenderID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetCommendMemberList", ref Outputs,
                new MSSQL.Parameter("CommmenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommmenderID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommendMemberList(string ConnectionString, ref DataSet ds, long CommmenderID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetCommendMemberList", ref ds, ref Outputs,
                new MSSQL.Parameter("CommmenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommmenderID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommendSiteBuyDetail(string ConnectionString, long SiteID, long CommenderID, long CpsID, long MemberID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetCommendSiteBuyDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("MemberID", SqlDbType.BigInt, 0, ParameterDirection.Input, MemberID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetCommendSiteBuyDetail(string ConnectionString, ref DataSet ds, long SiteID, long CommenderID, long CpsID, long MemberID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetCommendSiteBuyDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("MemberID", SqlDbType.BigInt, 0, ParameterDirection.Input, MemberID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetDayBuyDetailByType(string ConnectionString, DateTime DayDate, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetDayBuyDetailByType", ref Outputs,
                new MSSQL.Parameter("DayDate", SqlDbType.DateTime, 0, ParameterDirection.Input, DayDate),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetDayBuyDetailByType(string ConnectionString, ref DataSet ds, DateTime DayDate, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetDayBuyDetailByType", ref ds, ref Outputs,
                new MSSQL.Parameter("DayDate", SqlDbType.DateTime, 0, ParameterDirection.Input, DayDate),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetIncomeListByMonth(string ConnectionString, long SiteID, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetIncomeListByMonth", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetIncomeListByMonth(string ConnectionString, ref DataSet ds, long SiteID, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetIncomeListByMonth", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetPerDayTradeSumOfMonthByType(string ConnectionString, DateTime MonthDate, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetPerDayTradeSumOfMonthByType", ref Outputs,
                new MSSQL.Parameter("MonthDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MonthDate),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetPerDayTradeSumOfMonthByType(string ConnectionString, ref DataSet ds, DateTime MonthDate, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetPerDayTradeSumOfMonthByType", ref ds, ref Outputs,
                new MSSQL.Parameter("MonthDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MonthDate),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetUnionPidTradeSum(string ConnectionString, long SiteID, long CpsID, string PID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetUnionPidTradeSum", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("PID", SqlDbType.VarChar, 0, ParameterDirection.Input, PID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetUnionPidTradeSum(string ConnectionString, ref DataSet ds, long SiteID, long CpsID, string PID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetUnionPidTradeSum", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("PID", SqlDbType.VarChar, 0, ParameterDirection.Input, PID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetUserBonusScaleList(string ConnectionString, long OwnerUserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsGetUserBonusScaleList", ref Outputs,
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsGetUserBonusScaleList(string ConnectionString, ref DataSet ds, long OwnerUserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsGetUserBonusScaleList", ref ds, ref Outputs,
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsMemRecommendWebsiteList(string ConnectionString, long userid, long siteid, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsMemRecommendWebsiteList", ref Outputs,
                new MSSQL.Parameter("userid", SqlDbType.BigInt, 0, ParameterDirection.Input, userid),
                new MSSQL.Parameter("siteid", SqlDbType.BigInt, 0, ParameterDirection.Input, siteid),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsMemRecommendWebsiteList(string ConnectionString, ref DataSet ds, long userid, long siteid, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsMemRecommendWebsiteList", ref ds, ref Outputs,
                new MSSQL.Parameter("userid", SqlDbType.BigInt, 0, ParameterDirection.Input, userid),
                new MSSQL.Parameter("siteid", SqlDbType.BigInt, 0, ParameterDirection.Input, siteid),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsPromoterList(string ConnectionString, long SiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsPromoterList", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsPromoterList(string ConnectionString, ref DataSet ds, long SiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsPromoterList", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsSetBonusScaleSetting(string ConnectionString, long LotteryID, double UnionBonusScale, double SiteBonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsSetBonusScaleSetting", ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("UnionBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, UnionBonusScale),
                new MSSQL.Parameter("SiteBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SiteBonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsSetBonusScaleSetting(string ConnectionString, ref DataSet ds, long LotteryID, double UnionBonusScale, double SiteBonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsSetBonusScaleSetting", ref ds, ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("UnionBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, UnionBonusScale),
                new MSSQL.Parameter("SiteBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SiteBonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsSetBonusScaleType(string ConnectionString, int OperateType, long TypeID, string Name, long ParentTypeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsSetBonusScaleType", ref Outputs,
                new MSSQL.Parameter("OperateType", SqlDbType.Int, 0, ParameterDirection.Input, OperateType),
                new MSSQL.Parameter("TypeID", SqlDbType.BigInt, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("Name", SqlDbType.NVarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("ParentTypeID", SqlDbType.BigInt, 0, ParameterDirection.Input, ParentTypeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsSetBonusScaleType(string ConnectionString, ref DataSet ds, int OperateType, long TypeID, string Name, long ParentTypeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsSetBonusScaleType", ref ds, ref Outputs,
                new MSSQL.Parameter("OperateType", SqlDbType.Int, 0, ParameterDirection.Input, OperateType),
                new MSSQL.Parameter("TypeID", SqlDbType.BigInt, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("Name", SqlDbType.NVarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("ParentTypeID", SqlDbType.BigInt, 0, ParameterDirection.Input, ParentTypeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsSetUserBonusScale(string ConnectionString, long OwnerUserID, long LotteryID, double BonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsSetUserBonusScale", ref Outputs,
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsSetUserBonusScale(string ConnectionString, ref DataSet ds, long OwnerUserID, long LotteryID, double BonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsSetUserBonusScale", ref ds, ref Outputs,
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsTry(string ConnectionString, long SiteID, long UserID, string Content, string Name, string Url, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string MD5Key, short Type, string DomainName, long ParentID, double BonusScale, long CommendID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsTry", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 0, ParameterDirection.Input, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 0, ParameterDirection.Input, DomainName),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 0, ParameterDirection.Input, ParentID),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("CommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommendID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsTry(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string Content, string Name, string Url, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string MD5Key, short Type, string DomainName, long ParentID, double BonusScale, long CommendID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsTry", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 0, ParameterDirection.Input, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 0, ParameterDirection.Input, DomainName),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 0, ParameterDirection.Input, ParentID),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("CommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommendID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsTryHandle(string ConnectionString, long SiteID, long TryID, long OperatorID, short HandleResult, double BonusScale, bool ON, ref long CpsID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CpsTryHandle", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("TryID", SqlDbType.BigInt, 0, ParameterDirection.Input, TryID),
                new MSSQL.Parameter("OperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OperatorID),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CpsTryHandle(string ConnectionString, ref DataSet ds, long SiteID, long TryID, long OperatorID, short HandleResult, double BonusScale, bool ON, ref long CpsID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CpsTryHandle", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("TryID", SqlDbType.BigInt, 0, ParameterDirection.Input, TryID),
                new MSSQL.Parameter("OperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OperatorID),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CustomFollowSchemesAdd(string ConnectionString, long SiteID, long UserID, long FollowSchemeID, double MoneyStart, double MoneyEnd, int BuyShareStart, int BuyShareEnd, short Type, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CustomFollowSchemesAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("FollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, FollowSchemeID),
                new MSSQL.Parameter("MoneyStart", SqlDbType.Money, 0, ParameterDirection.Input, MoneyStart),
                new MSSQL.Parameter("MoneyEnd", SqlDbType.Money, 0, ParameterDirection.Input, MoneyEnd),
                new MSSQL.Parameter("BuyShareStart", SqlDbType.Int, 0, ParameterDirection.Input, BuyShareStart),
                new MSSQL.Parameter("BuyShareEnd", SqlDbType.Int, 0, ParameterDirection.Input, BuyShareEnd),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CustomFollowSchemesAdd(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long FollowSchemeID, double MoneyStart, double MoneyEnd, int BuyShareStart, int BuyShareEnd, short Type, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CustomFollowSchemesAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("FollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, FollowSchemeID),
                new MSSQL.Parameter("MoneyStart", SqlDbType.Money, 0, ParameterDirection.Input, MoneyStart),
                new MSSQL.Parameter("MoneyEnd", SqlDbType.Money, 0, ParameterDirection.Input, MoneyEnd),
                new MSSQL.Parameter("BuyShareStart", SqlDbType.Int, 0, ParameterDirection.Input, BuyShareStart),
                new MSSQL.Parameter("BuyShareEnd", SqlDbType.Int, 0, ParameterDirection.Input, BuyShareEnd),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CustomFollowSchemesDelete(string ConnectionString, long SiteID, long UserID, long FollowSchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_CustomFollowSchemesDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("FollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, FollowSchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_CustomFollowSchemesDelete(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long FollowSchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_CustomFollowSchemesDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("FollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, FollowSchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DeleteRepeatData(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DeleteRepeatData", ref Outputs);

            return CallResult;
        }

        public static int P_DeleteRepeatData(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DeleteRepeatData", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_Distill(string ConnectionString, long SiteID, long UserID, int DistillType, double Money, double FormalitiesFees, string BankUserName, string BankName, string BankCardNumber, string AlipayID, string AlipayName, string Memo, bool IsCps, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Distill", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillType", SqlDbType.Int, 0, ParameterDirection.Input, DistillType),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankUserName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("IsCps", SqlDbType.Bit, 0, ParameterDirection.Input, IsCps),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Distill(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int DistillType, double Money, double FormalitiesFees, string BankUserName, string BankName, string BankCardNumber, string AlipayID, string AlipayName, string Memo, bool IsCps, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Distill", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillType", SqlDbType.Int, 0, ParameterDirection.Input, DistillType),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankUserName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("IsCps", SqlDbType.Bit, 0, ParameterDirection.Input, IsCps),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillAccept(string ConnectionString, long SiteID, long UserID, long DistillID, string PayName, string PayBank, string PayCardNumber, string AlipayID, string AlipayName, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DistillAccept", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("PayName", SqlDbType.VarChar, 0, ParameterDirection.Input, PayName),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("PayCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayCardNumber),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillAccept(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long DistillID, string PayName, string PayBank, string PayCardNumber, string AlipayID, string AlipayName, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DistillAccept", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("PayName", SqlDbType.VarChar, 0, ParameterDirection.Input, PayName),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("PayCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayCardNumber),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillNoAccept(string ConnectionString, long SiteID, long UserID, long DistillID, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DistillNoAccept", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillNoAccept(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long DistillID, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DistillNoAccept", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillPaySuccess(string ConnectionString, long SiteID, long UserID, long DistillID, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DistillPaySuccess", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillPaySuccess(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long DistillID, string Memo, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DistillPaySuccess", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillQuash(string ConnectionString, long SiteID, long UserID, long DistillID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DistillQuash", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DistillQuash(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long DistillID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DistillQuash", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DownloadAdd(string ConnectionString, long SiteID, DateTime DateTime, string Title, string FileUrl, bool isShow, ref long NewDownloadID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DownloadAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewDownloadID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewDownloadID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewDownloadID = System.Convert.ToInt64(Outputs["NewDownloadID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DownloadAdd(string ConnectionString, ref DataSet ds, long SiteID, DateTime DateTime, string Title, string FileUrl, bool isShow, ref long NewDownloadID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DownloadAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewDownloadID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewDownloadID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewDownloadID = System.Convert.ToInt64(Outputs["NewDownloadID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DownloadDelete(string ConnectionString, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DownloadDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DownloadDelete(string ConnectionString, ref DataSet ds, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DownloadDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DownloadEdit(string ConnectionString, long SiteID, long ID, DateTime DateTime, string Title, string FileUrl, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_DownloadEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_DownloadEdit(string ConnectionString, ref DataSet ds, long SiteID, long ID, DateTime DateTime, string Title, string FileUrl, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_DownloadEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentAddMoney(string ConnectionString, long AgentID, double Amount, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ElectronTicketAgentAddMoney", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.BigInt, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("Amount", SqlDbType.Money, 0, ParameterDirection.Input, Amount),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentAddMoney(string ConnectionString, ref DataSet ds, long AgentID, double Amount, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ElectronTicketAgentAddMoney", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.BigInt, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("Amount", SqlDbType.Money, 0, ParameterDirection.Input, Amount),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeAdd(string ConnectionString, long AgentID, string SchemeNumber, int LotteryID, int PlayTypeID, long IsuseID, string LotteryNumber, double Amount, int Multiple, int Share, string InitiateName, string InitiateAlipayName, string InitiateAlipayID, string InitiateRealityName, string InitiateIDCard, string InitiateTelephone, string InitiateMobile, string InitiateEmail, double InitiateBonusScale, double InitiateBonusLimitLower, double InitiateBonusLimitUpper, string DetailXML, ref long SchemeID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ElectronTicketAgentSchemeAdd", ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.BigInt, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("SchemeNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, SchemeNumber),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("Amount", SqlDbType.Money, 0, ParameterDirection.Input, Amount),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Share", SqlDbType.Int, 0, ParameterDirection.Input, Share),
                new MSSQL.Parameter("InitiateName", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateName),
                new MSSQL.Parameter("InitiateAlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateAlipayName),
                new MSSQL.Parameter("InitiateAlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateAlipayID),
                new MSSQL.Parameter("InitiateRealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateRealityName),
                new MSSQL.Parameter("InitiateIDCard", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateIDCard),
                new MSSQL.Parameter("InitiateTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateTelephone),
                new MSSQL.Parameter("InitiateMobile", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateMobile),
                new MSSQL.Parameter("InitiateEmail", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateEmail),
                new MSSQL.Parameter("InitiateBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, InitiateBonusScale),
                new MSSQL.Parameter("InitiateBonusLimitLower", SqlDbType.Money, 0, ParameterDirection.Input, InitiateBonusLimitLower),
                new MSSQL.Parameter("InitiateBonusLimitUpper", SqlDbType.Money, 0, ParameterDirection.Input, InitiateBonusLimitUpper),
                new MSSQL.Parameter("DetailXML", SqlDbType.NText, 0, ParameterDirection.Input, DetailXML),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 8, ParameterDirection.Output, SchemeID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SchemeID = System.Convert.ToInt64(Outputs["SchemeID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeAdd(string ConnectionString, ref DataSet ds, long AgentID, string SchemeNumber, int LotteryID, int PlayTypeID, long IsuseID, string LotteryNumber, double Amount, int Multiple, int Share, string InitiateName, string InitiateAlipayName, string InitiateAlipayID, string InitiateRealityName, string InitiateIDCard, string InitiateTelephone, string InitiateMobile, string InitiateEmail, double InitiateBonusScale, double InitiateBonusLimitLower, double InitiateBonusLimitUpper, string DetailXML, ref long SchemeID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ElectronTicketAgentSchemeAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("AgentID", SqlDbType.BigInt, 0, ParameterDirection.Input, AgentID),
                new MSSQL.Parameter("SchemeNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, SchemeNumber),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("Amount", SqlDbType.Money, 0, ParameterDirection.Input, Amount),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Share", SqlDbType.Int, 0, ParameterDirection.Input, Share),
                new MSSQL.Parameter("InitiateName", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateName),
                new MSSQL.Parameter("InitiateAlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateAlipayName),
                new MSSQL.Parameter("InitiateAlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateAlipayID),
                new MSSQL.Parameter("InitiateRealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateRealityName),
                new MSSQL.Parameter("InitiateIDCard", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateIDCard),
                new MSSQL.Parameter("InitiateTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateTelephone),
                new MSSQL.Parameter("InitiateMobile", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateMobile),
                new MSSQL.Parameter("InitiateEmail", SqlDbType.VarChar, 0, ParameterDirection.Input, InitiateEmail),
                new MSSQL.Parameter("InitiateBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, InitiateBonusScale),
                new MSSQL.Parameter("InitiateBonusLimitLower", SqlDbType.Money, 0, ParameterDirection.Input, InitiateBonusLimitLower),
                new MSSQL.Parameter("InitiateBonusLimitUpper", SqlDbType.Money, 0, ParameterDirection.Input, InitiateBonusLimitUpper),
                new MSSQL.Parameter("DetailXML", SqlDbType.NText, 0, ParameterDirection.Input, DetailXML),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 8, ParameterDirection.Output, SchemeID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SchemeID = System.Convert.ToInt64(Outputs["SchemeID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeQuash(string ConnectionString, long IsuseID, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ElectronTicketAgentSchemeQuash", ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeQuash(string ConnectionString, ref DataSet ds, long IsuseID, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ElectronTicketAgentSchemeQuash", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeSendToCenterAdd(string ConnectionString, long SchemeID, int PlayTypeID, string AgrentNo, string TicketXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ElectronTicketAgentSchemeSendToCenterAdd", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("AgrentNo", SqlDbType.NVarChar, 0, ParameterDirection.Input, AgrentNo),
                new MSSQL.Parameter("TicketXML", SqlDbType.NText, 0, ParameterDirection.Input, TicketXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeSendToCenterAdd(string ConnectionString, ref DataSet ds, long SchemeID, int PlayTypeID, string AgrentNo, string TicketXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ElectronTicketAgentSchemeSendToCenterAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("AgrentNo", SqlDbType.NVarChar, 0, ParameterDirection.Input, AgrentNo),
                new MSSQL.Parameter("TicketXML", SqlDbType.NText, 0, ParameterDirection.Input, TicketXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeSendToCenterAdd_Single(string ConnectionString, long SchemeID, int PlayTypeID, double Money, int Multiple, string Ticket, bool isFirstWrite, string AgrentNo, ref long ID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ElectronTicketAgentSchemeSendToCenterAdd_Single", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Ticket", SqlDbType.VarChar, 0, ParameterDirection.Input, Ticket),
                new MSSQL.Parameter("isFirstWrite", SqlDbType.Bit, 0, ParameterDirection.Input, isFirstWrite),
                new MSSQL.Parameter("AgrentNo", SqlDbType.VarChar, 0, ParameterDirection.Input, AgrentNo),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 8, ParameterDirection.Output, ID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ID = System.Convert.ToInt64(Outputs["ID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemeSendToCenterAdd_Single(string ConnectionString, ref DataSet ds, long SchemeID, int PlayTypeID, double Money, int Multiple, string Ticket, bool isFirstWrite, string AgrentNo, ref long ID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ElectronTicketAgentSchemeSendToCenterAdd_Single", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Ticket", SqlDbType.VarChar, 0, ParameterDirection.Input, Ticket),
                new MSSQL.Parameter("isFirstWrite", SqlDbType.Bit, 0, ParameterDirection.Input, isFirstWrite),
                new MSSQL.Parameter("AgrentNo", SqlDbType.VarChar, 0, ParameterDirection.Input, AgrentNo),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 8, ParameterDirection.Output, ID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ID = System.Convert.ToInt64(Outputs["ID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemesSendToCenterHandleUniteAnte(string ConnectionString, long SchemeID, DateTime DealTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ElectronTicketAgentSchemesSendToCenterHandleUniteAnte", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("DealTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketAgentSchemesSendToCenterHandleUniteAnte(string ConnectionString, ref DataSet ds, long SchemeID, DateTime DealTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ElectronTicketAgentSchemesSendToCenterHandleUniteAnte", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("DealTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketWin(string ConnectionString, long IsuseID, string BonusXML, string AgentBonusXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ElectronTicketWin", ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("BonusXML", SqlDbType.NText, 0, ParameterDirection.Input, BonusXML),
                new MSSQL.Parameter("AgentBonusXML", SqlDbType.NText, 0, ParameterDirection.Input, AgentBonusXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ElectronTicketWin(string ConnectionString, ref DataSet ds, long IsuseID, string BonusXML, string AgentBonusXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ElectronTicketWin", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("BonusXML", SqlDbType.NText, 0, ParameterDirection.Input, BonusXML),
                new MSSQL.Parameter("AgentBonusXML", SqlDbType.NText, 0, ParameterDirection.Input, AgentBonusXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExecChases(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExecChases", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExecChases(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExecChases", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExecChaseTaskDetail(string ConnectionString, long SiteID, long ChaseTaskDetailID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExecChaseTaskDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ChaseTaskDetailID", SqlDbType.BigInt, 0, ParameterDirection.Input, ChaseTaskDetailID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExecChaseTaskDetail(string ConnectionString, ref DataSet ds, long SiteID, long ChaseTaskDetailID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExecChaseTaskDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ChaseTaskDetailID", SqlDbType.BigInt, 0, ParameterDirection.Input, ChaseTaskDetailID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExecChaseTasks(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExecChaseTasks", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExecChaseTasks(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExecChaseTasks", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendAdd(string ConnectionString, long SiteID, long ExpertsID, DateTime DateTime, long IsuseID, string Title, string Content, string Number, double Price, ref long NewExpertsCommendID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsCommendAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("Price", SqlDbType.Money, 0, ParameterDirection.Input, Price),
                new MSSQL.Parameter("NewExpertsCommendID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewExpertsCommendID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewExpertsCommendID = System.Convert.ToInt64(Outputs["NewExpertsCommendID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendAdd(string ConnectionString, ref DataSet ds, long SiteID, long ExpertsID, DateTime DateTime, long IsuseID, string Title, string Content, string Number, double Price, ref long NewExpertsCommendID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsCommendAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("Price", SqlDbType.Money, 0, ParameterDirection.Input, Price),
                new MSSQL.Parameter("NewExpertsCommendID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewExpertsCommendID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewExpertsCommendID = System.Convert.ToInt64(Outputs["NewExpertsCommendID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendDelete(string ConnectionString, long SiteID, long ExpertsCommendID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsCommendDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsCommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsCommendID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendDelete(string ConnectionString, ref DataSet ds, long SiteID, long ExpertsCommendID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsCommendDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsCommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsCommendID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendEdit(string ConnectionString, long SiteID, long ExpertsCommendID, DateTime DateTime, long IsuseID, string Title, string Content, string Number, double Price, double WinMoney, bool isCommend, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsCommendEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsCommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsCommendID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("Price", SqlDbType.Money, 0, ParameterDirection.Input, Price),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendEdit(string ConnectionString, ref DataSet ds, long SiteID, long ExpertsCommendID, DateTime DateTime, long IsuseID, string Title, string Content, string Number, double Price, double WinMoney, bool isCommend, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsCommendEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsCommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsCommendID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Number", SqlDbType.VarChar, 0, ParameterDirection.Input, Number),
                new MSSQL.Parameter("Price", SqlDbType.Money, 0, ParameterDirection.Input, Price),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendRead(string ConnectionString, long SiteID, long ExpertsCommendID, long UserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsCommendRead", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsCommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsCommendID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsCommendRead(string ConnectionString, ref DataSet ds, long SiteID, long ExpertsCommendID, long UserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsCommendRead", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsCommendID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsCommendID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsDelete(string ConnectionString, long SiteID, long ExpertsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsDelete(string ConnectionString, ref DataSet ds, long SiteID, long ExpertsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsEdit(string ConnectionString, long SiteID, long ExpertsID, string Description, double MaxPrice, double BonusScale, bool ON, bool isCommend, int ReadCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxPrice", SqlDbType.Money, 0, ParameterDirection.Input, MaxPrice),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("ReadCount", SqlDbType.Int, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsEdit(string ConnectionString, ref DataSet ds, long SiteID, long ExpertsID, string Description, double MaxPrice, double BonusScale, bool ON, bool isCommend, int ReadCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxPrice", SqlDbType.Money, 0, ParameterDirection.Input, MaxPrice),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("ReadCount", SqlDbType.Int, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsTry(string ConnectionString, long SiteID, long UserID, int LotteryID, string Description, double MaxPrice, double BonusScale, ref long NewExpertsTryID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsTry", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxPrice", SqlDbType.Money, 0, ParameterDirection.Input, MaxPrice),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("NewExpertsTryID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewExpertsTryID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewExpertsTryID = System.Convert.ToInt64(Outputs["NewExpertsTryID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsTry(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int LotteryID, string Description, double MaxPrice, double BonusScale, ref long NewExpertsTryID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsTry", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxPrice", SqlDbType.Money, 0, ParameterDirection.Input, MaxPrice),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("NewExpertsTryID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewExpertsTryID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewExpertsTryID = System.Convert.ToInt64(Outputs["NewExpertsTryID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsWinCommendAdd(string ConnectionString, long SiteID, long UserID, DateTime DateTime, long IsuseID, string Title, string Content, bool isShow, ref long NewExpertsWinCommendID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsWinCommendAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewExpertsWinCommendID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewExpertsWinCommendID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewExpertsWinCommendID = System.Convert.ToInt64(Outputs["NewExpertsWinCommendID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsWinCommendAdd(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime DateTime, long IsuseID, string Title, string Content, bool isShow, ref long NewExpertsWinCommendID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsWinCommendAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewExpertsWinCommendID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewExpertsWinCommendID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewExpertsWinCommendID = System.Convert.ToInt64(Outputs["NewExpertsWinCommendID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsWinCommendDelete(string ConnectionString, long SiteID, long ExpertsWinCommendsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ExpertsWinCommendDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsWinCommendsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsWinCommendsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ExpertsWinCommendDelete(string ConnectionString, ref DataSet ds, long SiteID, long ExpertsWinCommendsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ExpertsWinCommendDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ExpertsWinCommendsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsWinCommendsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FeedbackAdd(string ConnectionString, long userID, string tel, string email, string title, string content, ref int returnValue, ref string returnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_FeedbackAdd", ref Outputs,
                new MSSQL.Parameter("userID", SqlDbType.BigInt, 0, ParameterDirection.Input, userID),
                new MSSQL.Parameter("tel", SqlDbType.NVarChar, 0, ParameterDirection.Input, tel),
                new MSSQL.Parameter("email", SqlDbType.NVarChar, 0, ParameterDirection.Input, email),
                new MSSQL.Parameter("title", SqlDbType.NVarChar, 0, ParameterDirection.Input, title),
                new MSSQL.Parameter("content", SqlDbType.NVarChar, 0, ParameterDirection.Input, content),
                new MSSQL.Parameter("returnValue", SqlDbType.Int, 4, ParameterDirection.Output, returnValue),
                new MSSQL.Parameter("returnDescription", SqlDbType.NVarChar, 200, ParameterDirection.Output, returnDescription)
                );

            try
            {
                returnValue = System.Convert.ToInt32(Outputs["returnValue"]);
            }
            catch { }

            try
            {
                returnDescription = System.Convert.ToString(Outputs["returnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FeedbackAdd(string ConnectionString, ref DataSet ds, long userID, string tel, string email, string title, string content, ref int returnValue, ref string returnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_FeedbackAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("userID", SqlDbType.BigInt, 0, ParameterDirection.Input, userID),
                new MSSQL.Parameter("tel", SqlDbType.NVarChar, 0, ParameterDirection.Input, tel),
                new MSSQL.Parameter("email", SqlDbType.NVarChar, 0, ParameterDirection.Input, email),
                new MSSQL.Parameter("title", SqlDbType.NVarChar, 0, ParameterDirection.Input, title),
                new MSSQL.Parameter("content", SqlDbType.NVarChar, 0, ParameterDirection.Input, content),
                new MSSQL.Parameter("returnValue", SqlDbType.Int, 4, ParameterDirection.Output, returnValue),
                new MSSQL.Parameter("returnDescription", SqlDbType.NVarChar, 200, ParameterDirection.Output, returnDescription)
                );

            try
            {
                returnValue = System.Convert.ToInt32(Outputs["returnValue"]);
            }
            catch { }

            try
            {
                returnDescription = System.Convert.ToString(Outputs["returnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FootballLeagueTypeAdd(string ConnectionString, string Name, string Code, string MarkersColor, string Description, int Order, bool isUse, ref int FootballLeagueTypeID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_FootballLeagueTypeAdd", ref Outputs,
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Code", SqlDbType.VarChar, 0, ParameterDirection.Input, Code),
                new MSSQL.Parameter("MarkersColor", SqlDbType.VarChar, 0, ParameterDirection.Input, MarkersColor),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isUse", SqlDbType.Bit, 0, ParameterDirection.Input, isUse),
                new MSSQL.Parameter("FootballLeagueTypeID", SqlDbType.Int, 4, ParameterDirection.Output, FootballLeagueTypeID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                FootballLeagueTypeID = System.Convert.ToInt32(Outputs["FootballLeagueTypeID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FootballLeagueTypeAdd(string ConnectionString, ref DataSet ds, string Name, string Code, string MarkersColor, string Description, int Order, bool isUse, ref int FootballLeagueTypeID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_FootballLeagueTypeAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Code", SqlDbType.VarChar, 0, ParameterDirection.Input, Code),
                new MSSQL.Parameter("MarkersColor", SqlDbType.VarChar, 0, ParameterDirection.Input, MarkersColor),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isUse", SqlDbType.Bit, 0, ParameterDirection.Input, isUse),
                new MSSQL.Parameter("FootballLeagueTypeID", SqlDbType.Int, 4, ParameterDirection.Output, FootballLeagueTypeID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                FootballLeagueTypeID = System.Convert.ToInt32(Outputs["FootballLeagueTypeID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FootballLeagueTypeEdit(string ConnectionString, int ID, string Name, string Code, string MarkersColor, string Description, int Order, bool isUse, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_FootballLeagueTypeEdit", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.Int, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Code", SqlDbType.VarChar, 0, ParameterDirection.Input, Code),
                new MSSQL.Parameter("MarkersColor", SqlDbType.VarChar, 0, ParameterDirection.Input, MarkersColor),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isUse", SqlDbType.Bit, 0, ParameterDirection.Input, isUse),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FootballLeagueTypeEdit(string ConnectionString, ref DataSet ds, int ID, string Name, string Code, string MarkersColor, string Description, int Order, bool isUse, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_FootballLeagueTypeEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.Int, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("Code", SqlDbType.VarChar, 0, ParameterDirection.Input, Code),
                new MSSQL.Parameter("MarkersColor", SqlDbType.VarChar, 0, ParameterDirection.Input, MarkersColor),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isUse", SqlDbType.Bit, 0, ParameterDirection.Input, isUse),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FriendshipLinkAdd(string ConnectionString, long SiteID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref long NewFriendshipLinkID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_FriendshipLinkAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewFriendshipLinkID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewFriendshipLinkID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewFriendshipLinkID = System.Convert.ToInt64(Outputs["NewFriendshipLinkID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FriendshipLinkAdd(string ConnectionString, ref DataSet ds, long SiteID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref long NewFriendshipLinkID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_FriendshipLinkAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewFriendshipLinkID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewFriendshipLinkID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewFriendshipLinkID = System.Convert.ToInt64(Outputs["NewFriendshipLinkID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FriendshipLinkDelete(string ConnectionString, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_FriendshipLinkDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FriendshipLinkDelete(string ConnectionString, ref DataSet ds, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_FriendshipLinkDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FriendshipLinkEdit(string ConnectionString, long SiteID, long ID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_FriendshipLinkEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_FriendshipLinkEdit(string ConnectionString, ref DataSet ds, long SiteID, long ID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_FriendshipLinkEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetAccount(string ConnectionString, long SiteID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetAccount", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetAccount(string ConnectionString, ref DataSet ds, long SiteID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetAccount", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetAttentionSchemes(string ConnectionString, int UserID, int LotteryID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetAttentionSchemes", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.Int, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetAttentionSchemes(string ConnectionString, ref DataSet ds, int UserID, int LotteryID, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetAttentionSchemes", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.Int, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetChaseListsByUserID(string ConnectionString, int PageIndex, int PageSize, string SearchCondition, string Sort)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetChaseListsByUserID", ref Outputs,
                new MSSQL.Parameter("PageIndex", SqlDbType.Int, 0, ParameterDirection.Input, PageIndex),
                new MSSQL.Parameter("PageSize", SqlDbType.Int, 0, ParameterDirection.Input, PageSize),
                new MSSQL.Parameter("SearchCondition", SqlDbType.NVarChar, 0, ParameterDirection.Input, SearchCondition),
                new MSSQL.Parameter("Sort", SqlDbType.NVarChar, 0, ParameterDirection.Input, Sort)
                );

            return CallResult;
        }

        public static int P_GetChaseListsByUserID(string ConnectionString, ref DataSet ds, int PageIndex, int PageSize, string SearchCondition, string Sort)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetChaseListsByUserID", ref ds, ref Outputs,
                new MSSQL.Parameter("PageIndex", SqlDbType.Int, 0, ParameterDirection.Input, PageIndex),
                new MSSQL.Parameter("PageSize", SqlDbType.Int, 0, ParameterDirection.Input, PageSize),
                new MSSQL.Parameter("SearchCondition", SqlDbType.NVarChar, 0, ParameterDirection.Input, SearchCondition),
                new MSSQL.Parameter("Sort", SqlDbType.NVarChar, 0, ParameterDirection.Input, Sort)
                );

            return CallResult;
        }

        public static int P_GetCpsAccount(string ConnectionString, int Year, int Month, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccount", ref Outputs,
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccount(string ConnectionString, ref DataSet ds, int Year, int Month, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccount", ref ds, ref Outputs,
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountByPid(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, string pid, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountByPid", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("pid", SqlDbType.VarChar, 0, ParameterDirection.Input, pid),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountByPid(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, string pid, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountByPid", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("pid", SqlDbType.VarChar, 0, ParameterDirection.Input, pid),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountDetail(string ConnectionString, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountDetail(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountDetailWithUser(string ConnectionString, long CpsID, DateTime StartTime, DateTime EndTime, string KeyWord, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountDetailWithUser", ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("KeyWord", SqlDbType.VarChar, 0, ParameterDirection.Input, KeyWord),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountDetailWithUser(string ConnectionString, ref DataSet ds, long CpsID, DateTime StartTime, DateTime EndTime, string KeyWord, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountDetailWithUser", ref ds, ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("KeyWord", SqlDbType.VarChar, 0, ParameterDirection.Input, KeyWord),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountRevenue(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountRevenue", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountRevenue(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountRevenue", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountRevenue_center(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountRevenue_center", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountRevenue_center(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountRevenue_center", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountRevenueSite_center(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountRevenueSite_center", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountRevenueSite_center(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountRevenueSite_center", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountWithCpsID(string ConnectionString, DateTime StartTime, DateTime EndTime, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountWithCpsID", ref Outputs,
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountWithCpsID(string ConnectionString, ref DataSet ds, DateTime StartTime, DateTime EndTime, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountWithCpsID", ref ds, ref Outputs,
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountWithCpsUser(string ConnectionString, long CpsID, DateTime StartTime, DateTime EndTime, string KeyWord, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountWithCpsUser", ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("KeyWord", SqlDbType.VarChar, 0, ParameterDirection.Input, KeyWord),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountWithCpsUser(string ConnectionString, ref DataSet ds, long CpsID, DateTime StartTime, DateTime EndTime, string KeyWord, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountWithCpsUser", ref ds, ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("KeyWord", SqlDbType.VarChar, 0, ParameterDirection.Input, KeyWord),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountWithMonth(string ConnectionString, DateTime StartTime, DateTime EndTime, string UserName, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsAccountWithMonth", ref Outputs,
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("UserName", SqlDbType.VarChar, 0, ParameterDirection.Input, UserName),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsAccountWithMonth(string ConnectionString, ref DataSet ds, DateTime StartTime, DateTime EndTime, string UserName, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsAccountWithMonth", ref ds, ref Outputs,
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("UserName", SqlDbType.VarChar, 0, ParameterDirection.Input, UserName),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsBuyDetailByDate(string ConnectionString, long SiteID, long CpsID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsBuyDetailByDate", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsBuyDetailByDate(string ConnectionString, ref DataSet ds, long SiteID, long CpsID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsBuyDetailByDate", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsByDay(string ConnectionString, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsByDay", ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsByDay(string ConnectionString, ref DataSet ds, long CpsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsByDay", ref ds, ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsInformationByID(string ConnectionString, long SiteID, long CpsID, ref long OwnerUserID, ref string Name, ref DateTime Datetime, ref string Url, ref string LogoUrl, ref double BonusScale, ref bool ON, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string MD5Key, ref short Type, ref long ParentID, ref string DomainName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsInformationByID", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 8, ParameterDirection.Output, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("Datetime", SqlDbType.DateTime, 8, ParameterDirection.Output, Datetime),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 100, ParameterDirection.Output, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 30, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 120, ParameterDirection.Output, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 2, ParameterDirection.Output, Type),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 200, ParameterDirection.Output, DomainName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                OwnerUserID = System.Convert.ToInt64(Outputs["OwnerUserID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                Datetime = System.Convert.ToDateTime(Outputs["Datetime"]);
            }
            catch { }

            try
            {
                Url = System.Convert.ToString(Outputs["Url"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                MD5Key = System.Convert.ToString(Outputs["MD5Key"]);
            }
            catch { }

            try
            {
                Type = System.Convert.ToInt16(Outputs["Type"]);
            }
            catch { }

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                DomainName = System.Convert.ToString(Outputs["DomainName"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsInformationByID(string ConnectionString, ref DataSet ds, long SiteID, long CpsID, ref long OwnerUserID, ref string Name, ref DateTime Datetime, ref string Url, ref string LogoUrl, ref double BonusScale, ref bool ON, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string MD5Key, ref short Type, ref long ParentID, ref string DomainName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsInformationByID", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 8, ParameterDirection.Output, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("Datetime", SqlDbType.DateTime, 8, ParameterDirection.Output, Datetime),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 100, ParameterDirection.Output, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 30, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 120, ParameterDirection.Output, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 2, ParameterDirection.Output, Type),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 200, ParameterDirection.Output, DomainName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                OwnerUserID = System.Convert.ToInt64(Outputs["OwnerUserID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                Datetime = System.Convert.ToDateTime(Outputs["Datetime"]);
            }
            catch { }

            try
            {
                Url = System.Convert.ToString(Outputs["Url"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                MD5Key = System.Convert.ToString(Outputs["MD5Key"]);
            }
            catch { }

            try
            {
                Type = System.Convert.ToInt16(Outputs["Type"]);
            }
            catch { }

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                DomainName = System.Convert.ToString(Outputs["DomainName"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsInformationByOwnerUserID(string ConnectionString, long SiteID, long OwnerUserID, ref long CpsID, ref string Name, ref DateTime Datetime, ref string Url, ref string LogoUrl, ref double BonusScale, ref bool ON, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string MD5Key, ref short Type, ref long ParentID, ref string DomainName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsInformationByOwnerUserID", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("Datetime", SqlDbType.DateTime, 8, ParameterDirection.Output, Datetime),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 100, ParameterDirection.Output, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 30, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 120, ParameterDirection.Output, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 2, ParameterDirection.Output, Type),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 200, ParameterDirection.Output, DomainName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                Datetime = System.Convert.ToDateTime(Outputs["Datetime"]);
            }
            catch { }

            try
            {
                Url = System.Convert.ToString(Outputs["Url"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                MD5Key = System.Convert.ToString(Outputs["MD5Key"]);
            }
            catch { }

            try
            {
                Type = System.Convert.ToInt16(Outputs["Type"]);
            }
            catch { }

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                DomainName = System.Convert.ToString(Outputs["DomainName"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsInformationByOwnerUserID(string ConnectionString, ref DataSet ds, long SiteID, long OwnerUserID, ref long CpsID, ref string Name, ref DateTime Datetime, ref string Url, ref string LogoUrl, ref double BonusScale, ref bool ON, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string MD5Key, ref short Type, ref long ParentID, ref string DomainName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsInformationByOwnerUserID", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("Datetime", SqlDbType.DateTime, 8, ParameterDirection.Output, Datetime),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 100, ParameterDirection.Output, Url),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 30, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("MD5Key", SqlDbType.VarChar, 120, ParameterDirection.Output, MD5Key),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 2, ParameterDirection.Output, Type),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("DomainName", SqlDbType.VarChar, 200, ParameterDirection.Output, DomainName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                Datetime = System.Convert.ToDateTime(Outputs["Datetime"]);
            }
            catch { }

            try
            {
                Url = System.Convert.ToString(Outputs["Url"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                MD5Key = System.Convert.ToString(Outputs["MD5Key"]);
            }
            catch { }

            try
            {
                Type = System.Convert.ToInt16(Outputs["Type"]);
            }
            catch { }

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                DomainName = System.Convert.ToString(Outputs["DomainName"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsLinkList(string ConnectionString, long CpsID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsLinkList", ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsLinkList(string ConnectionString, ref DataSet ds, long CpsID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsLinkList", ref ds, ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsList(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsList", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsList(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsList", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsMemberBuyDetail(string ConnectionString, long SiteID, long CpsID, long UserID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsMemberBuyDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsMemberBuyDetail(string ConnectionString, ref DataSet ds, long SiteID, long CpsID, long UserID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsMemberBuyDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsMemberList(string ConnectionString, long CpsID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsMemberList", ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsMemberList(string ConnectionString, ref DataSet ds, long CpsID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsMemberList", ref ds, ref Outputs,
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsPIDBuyDetailByDate(string ConnectionString, long SiteID, long CpsID, string PID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsPIDBuyDetailByDate", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("PID", SqlDbType.VarChar, 0, ParameterDirection.Input, PID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsPIDBuyDetailByDate(string ConnectionString, ref DataSet ds, long SiteID, long CpsID, string PID, DateTime FromTime, DateTime ToTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsPIDBuyDetailByDate", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("PID", SqlDbType.VarChar, 0, ParameterDirection.Input, PID),
                new MSSQL.Parameter("FromTime", SqlDbType.DateTime, 0, ParameterDirection.Input, FromTime),
                new MSSQL.Parameter("ToTime", SqlDbType.DateTime, 0, ParameterDirection.Input, ToTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsPopularizeAccount(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsPopularizeAccount", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsPopularizeAccount(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsPopularizeAccount", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsPopularizeAccountRevenue(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsPopularizeAccountRevenue", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsPopularizeAccountRevenue(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, int type, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsPopularizeAccountRevenue", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("type", SqlDbType.Int, 0, ParameterDirection.Input, type),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsUnionBusinessList(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsUnionBusinessList", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsUnionBusinessList(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsUnionBusinessList", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsWebSiteList(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetCpsWebSiteList", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetCpsWebSiteList(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetCpsWebSiteList", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetDistillMoneyAndAddMoney(string ConnectionString, long SiteID, DateTime FromDate, DateTime ToDate, int DistillType, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetDistillMoneyAndAddMoney", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("FromDate", SqlDbType.DateTime, 0, ParameterDirection.Input, FromDate),
                new MSSQL.Parameter("ToDate", SqlDbType.DateTime, 0, ParameterDirection.Input, ToDate),
                new MSSQL.Parameter("DistillType", SqlDbType.Int, 0, ParameterDirection.Input, DistillType),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetDistillMoneyAndAddMoney(string ConnectionString, ref DataSet ds, long SiteID, DateTime FromDate, DateTime ToDate, int DistillType, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetDistillMoneyAndAddMoney", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("FromDate", SqlDbType.DateTime, 0, ParameterDirection.Input, FromDate),
                new MSSQL.Parameter("ToDate", SqlDbType.DateTime, 0, ParameterDirection.Input, ToDate),
                new MSSQL.Parameter("DistillType", SqlDbType.Int, 0, ParameterDirection.Input, DistillType),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetDistillStatisticByAccount(string ConnectionString, long SiteID, DateTime FromDate, DateTime ToDate, string AccountName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetDistillStatisticByAccount", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("FromDate", SqlDbType.DateTime, 0, ParameterDirection.Input, FromDate),
                new MSSQL.Parameter("ToDate", SqlDbType.DateTime, 0, ParameterDirection.Input, ToDate),
                new MSSQL.Parameter("AccountName", SqlDbType.NVarChar, 0, ParameterDirection.Input, AccountName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetDistillStatisticByAccount(string ConnectionString, ref DataSet ds, long SiteID, DateTime FromDate, DateTime ToDate, string AccountName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetDistillStatisticByAccount", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("FromDate", SqlDbType.DateTime, 0, ParameterDirection.Input, FromDate),
                new MSSQL.Parameter("ToDate", SqlDbType.DateTime, 0, ParameterDirection.Input, ToDate),
                new MSSQL.Parameter("AccountName", SqlDbType.NVarChar, 0, ParameterDirection.Input, AccountName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetDistillStatisticByDistillType(string ConnectionString, long SiteID, DateTime FromDate, DateTime ToDate, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetDistillStatisticByDistillType", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("FromDate", SqlDbType.DateTime, 0, ParameterDirection.Input, FromDate),
                new MSSQL.Parameter("ToDate", SqlDbType.DateTime, 0, ParameterDirection.Input, ToDate),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetDistillStatisticByDistillType(string ConnectionString, ref DataSet ds, long SiteID, DateTime FromDate, DateTime ToDate, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetDistillStatisticByDistillType", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("FromDate", SqlDbType.DateTime, 0, ParameterDirection.Input, FromDate),
                new MSSQL.Parameter("ToDate", SqlDbType.DateTime, 0, ParameterDirection.Input, ToDate),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetExpertsAccount(string ConnectionString, long SiteID, int Year, int Month, long ExpertsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetExpertsAccount", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetExpertsAccount(string ConnectionString, ref DataSet ds, long SiteID, int Year, int Month, long ExpertsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetExpertsAccount", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ExpertsID", SqlDbType.BigInt, 0, ParameterDirection.Input, ExpertsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetExpertsAccountDetail(string ConnectionString, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetExpertsAccountDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetExpertsAccountDetail(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetExpertsAccountDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetExpertsGroupUserID(string ConnectionString, int ExpertsCount)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetExpertsGroupUserID", ref Outputs,
                new MSSQL.Parameter("ExpertsCount", SqlDbType.Int, 0, ParameterDirection.Input, ExpertsCount)
                );

            return CallResult;
        }

        public static int P_GetExpertsGroupUserID(string ConnectionString, ref DataSet ds, int ExpertsCount)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetExpertsGroupUserID", ref ds, ref Outputs,
                new MSSQL.Parameter("ExpertsCount", SqlDbType.Int, 0, ParameterDirection.Input, ExpertsCount)
                );

            return CallResult;
        }

        public static int P_GetFinanceAddMoney(string ConnectionString, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetFinanceAddMoney", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetFinanceAddMoney(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetFinanceAddMoney", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetFinanceAddMoneyAdmin(string ConnectionString, long SiteID, long UserID, string StartTime, string EndTime, int Result, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetFinanceAddMoneyAdmin", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.VarChar, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.VarChar, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("Result", SqlDbType.Int, 0, ParameterDirection.Input, Result),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetFinanceAddMoneyAdmin(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string StartTime, string EndTime, int Result, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetFinanceAddMoneyAdmin", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.VarChar, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.VarChar, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("Result", SqlDbType.Int, 0, ParameterDirection.Input, Result),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetFriendsInitiateSchemes(string ConnectionString, long SiteID, long UserID, long LotterID, long IsuseID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetFriendsInitiateSchemes", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotterID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotterID),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetFriendsInitiateSchemes(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long LotterID, long IsuseID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetFriendsInitiateSchemes", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotterID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotterID),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetFriendsWinInfo(string ConnectionString, long UserID, string SnsName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetFriendsWinInfo", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SnsName", SqlDbType.VarChar, 0, ParameterDirection.Input, SnsName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetFriendsWinInfo(string ConnectionString, ref DataSet ds, long UserID, string SnsName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetFriendsWinInfo", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SnsName", SqlDbType.VarChar, 0, ParameterDirection.Input, SnsName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetIsuseIDByNameAndLotteryID(string ConnectionString, string Name, int LotteryID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetIsuseIDByNameAndLotteryID", ref Outputs,
                new MSSQL.Parameter("Name", SqlDbType.NVarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return CallResult;
        }

        public static int P_GetIsuseIDByNameAndLotteryID(string ConnectionString, ref DataSet ds, string Name, int LotteryID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetIsuseIDByNameAndLotteryID", ref ds, ref Outputs,
                new MSSQL.Parameter("Name", SqlDbType.NVarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID)
                );

            return CallResult;
        }

        public static int P_GetIsuseSalesAmount(string ConnectionString, long SiteID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetIsuseSalesAmount", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return CallResult;
        }

        public static int P_GetIsuseSalesAmount(string ConnectionString, ref DataSet ds, long SiteID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetIsuseSalesAmount", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID)
                );

            return CallResult;
        }

        public static int P_GetLoginCount(string ConnectionString, int Year, int Month)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetLoginCount", ref Outputs,
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month)
                );

            return CallResult;
        }

        public static int P_GetLoginCount(string ConnectionString, ref DataSet ds, int Year, int Month)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetLoginCount", ref ds, ref Outputs,
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month)
                );

            return CallResult;
        }

        public static int P_GetNewPayNumber(string ConnectionString, long SiteID, long UserID, string PayType, double Money, double FormalitiesFees, ref long NewPayNumber, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetNewPayNumber", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("PayType", SqlDbType.VarChar, 0, ParameterDirection.Input, PayType),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("NewPayNumber", SqlDbType.BigInt, 8, ParameterDirection.Output, NewPayNumber),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewPayNumber = System.Convert.ToInt64(Outputs["NewPayNumber"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetNewPayNumber(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string PayType, double Money, double FormalitiesFees, ref long NewPayNumber, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetNewPayNumber", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("PayType", SqlDbType.VarChar, 0, ParameterDirection.Input, PayType),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("NewPayNumber", SqlDbType.BigInt, 8, ParameterDirection.Output, NewPayNumber),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewPayNumber = System.Convert.ToInt64(Outputs["NewPayNumber"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetNewSpecial(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetNewSpecial", ref Outputs);

            return CallResult;
        }

        public static int P_GetNewSpecial(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetNewSpecial", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_GetNOrMBitsDigit(string ConnectionString, int n, int m, ref long result)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetNOrMBitsDigit", ref Outputs,
                new MSSQL.Parameter("n", SqlDbType.Int, 0, ParameterDirection.Input, n),
                new MSSQL.Parameter("m", SqlDbType.Int, 0, ParameterDirection.Input, m),
                new MSSQL.Parameter("result", SqlDbType.BigInt, 8, ParameterDirection.Output, result)
                );

            try
            {
                result = System.Convert.ToInt64(Outputs["result"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetNOrMBitsDigit(string ConnectionString, ref DataSet ds, int n, int m, ref long result)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetNOrMBitsDigit", ref ds, ref Outputs,
                new MSSQL.Parameter("n", SqlDbType.Int, 0, ParameterDirection.Input, n),
                new MSSQL.Parameter("m", SqlDbType.Int, 0, ParameterDirection.Input, m),
                new MSSQL.Parameter("result", SqlDbType.BigInt, 8, ParameterDirection.Output, result)
                );

            try
            {
                result = System.Convert.ToInt64(Outputs["result"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetPromoterInfoByIDList(string ConnectionString, long SiteID, string UserIDList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetPromoterInfoByIDList", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserIDList", SqlDbType.VarChar, 0, ParameterDirection.Input, UserIDList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetPromoterInfoByIDList(string ConnectionString, ref DataSet ds, long SiteID, string UserIDList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetPromoterInfoByIDList", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserIDList", SqlDbType.VarChar, 0, ParameterDirection.Input, UserIDList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSchemeChatContents(string ConnectionString, long SiteID, long UserID, long SchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetSchemeChatContents", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSchemeChatContents(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long SchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetSchemeChatContents", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSedimentBalance(string ConnectionString, ref double SedimentBalance)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetSedimentBalance", ref Outputs,
                new MSSQL.Parameter("SedimentBalance", SqlDbType.Money, 8, ParameterDirection.Output, SedimentBalance)
                );

            try
            {
                SedimentBalance = System.Convert.ToDouble(Outputs["SedimentBalance"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSedimentBalance(string ConnectionString, ref DataSet ds, ref double SedimentBalance)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetSedimentBalance", ref ds, ref Outputs,
                new MSSQL.Parameter("SedimentBalance", SqlDbType.Money, 8, ParameterDirection.Output, SedimentBalance)
                );

            try
            {
                SedimentBalance = System.Convert.ToDouble(Outputs["SedimentBalance"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSiteInformationByID(string ConnectionString, long SiteID, ref long ParentID, ref long OwnerUserID, ref string Name, ref string LogoUrl, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string ICPCert, ref short Level, ref bool ON, ref double BonusScale, ref int MaxSubSites, ref string UseLotteryListRestrictions, ref string UseLotteryList, ref string UseLotteryListQuickBuy, ref string Urls, ref long AdministratorID, ref string PageTitle, ref string PageKeywords, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetSiteInformationByID", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 8, ParameterDirection.Output, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 50, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 20, ParameterDirection.Output, ICPCert),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 4, ParameterDirection.Output, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 100, ParameterDirection.Output, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 8000, ParameterDirection.Output, Urls),
                new MSSQL.Parameter("AdministratorID", SqlDbType.BigInt, 8, ParameterDirection.Output, AdministratorID),
                new MSSQL.Parameter("PageTitle", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageTitle),
                new MSSQL.Parameter("PageKeywords", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageKeywords),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                OwnerUserID = System.Convert.ToInt64(Outputs["OwnerUserID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                ICPCert = System.Convert.ToString(Outputs["ICPCert"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                MaxSubSites = System.Convert.ToInt32(Outputs["MaxSubSites"]);
            }
            catch { }

            try
            {
                UseLotteryListRestrictions = System.Convert.ToString(Outputs["UseLotteryListRestrictions"]);
            }
            catch { }

            try
            {
                UseLotteryList = System.Convert.ToString(Outputs["UseLotteryList"]);
            }
            catch { }

            try
            {
                UseLotteryListQuickBuy = System.Convert.ToString(Outputs["UseLotteryListQuickBuy"]);
            }
            catch { }

            try
            {
                Urls = System.Convert.ToString(Outputs["Urls"]);
            }
            catch { }

            try
            {
                AdministratorID = System.Convert.ToInt64(Outputs["AdministratorID"]);
            }
            catch { }

            try
            {
                PageTitle = System.Convert.ToString(Outputs["PageTitle"]);
            }
            catch { }

            try
            {
                PageKeywords = System.Convert.ToString(Outputs["PageKeywords"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSiteInformationByID(string ConnectionString, ref DataSet ds, long SiteID, ref long ParentID, ref long OwnerUserID, ref string Name, ref string LogoUrl, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string ICPCert, ref short Level, ref bool ON, ref double BonusScale, ref int MaxSubSites, ref string UseLotteryListRestrictions, ref string UseLotteryList, ref string UseLotteryListQuickBuy, ref string Urls, ref long AdministratorID, ref string PageTitle, ref string PageKeywords, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetSiteInformationByID", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 8, ParameterDirection.Output, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 50, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 20, ParameterDirection.Output, ICPCert),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 4, ParameterDirection.Output, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 100, ParameterDirection.Output, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 8000, ParameterDirection.Output, Urls),
                new MSSQL.Parameter("AdministratorID", SqlDbType.BigInt, 8, ParameterDirection.Output, AdministratorID),
                new MSSQL.Parameter("PageTitle", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageTitle),
                new MSSQL.Parameter("PageKeywords", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageKeywords),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                OwnerUserID = System.Convert.ToInt64(Outputs["OwnerUserID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                ICPCert = System.Convert.ToString(Outputs["ICPCert"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                MaxSubSites = System.Convert.ToInt32(Outputs["MaxSubSites"]);
            }
            catch { }

            try
            {
                UseLotteryListRestrictions = System.Convert.ToString(Outputs["UseLotteryListRestrictions"]);
            }
            catch { }

            try
            {
                UseLotteryList = System.Convert.ToString(Outputs["UseLotteryList"]);
            }
            catch { }

            try
            {
                UseLotteryListQuickBuy = System.Convert.ToString(Outputs["UseLotteryListQuickBuy"]);
            }
            catch { }

            try
            {
                Urls = System.Convert.ToString(Outputs["Urls"]);
            }
            catch { }

            try
            {
                AdministratorID = System.Convert.ToInt64(Outputs["AdministratorID"]);
            }
            catch { }

            try
            {
                PageTitle = System.Convert.ToString(Outputs["PageTitle"]);
            }
            catch { }

            try
            {
                PageKeywords = System.Convert.ToString(Outputs["PageKeywords"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSiteInformationByUrl(string ConnectionString, string Url, ref long SiteID, ref long ParentID, ref long OwnerUserID, ref string Name, ref string LogoUrl, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string ICPCert, ref short Level, ref bool ON, ref double BonusScale, ref int MaxSubSites, ref string UseLotteryListRestrictions, ref string UseLotteryList, ref string UseLotteryListQuickBuy, ref string Urls, ref long AdministratorID, ref string PageTitle, ref string PageKeywords, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetSiteInformationByUrl", ref Outputs,
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 8, ParameterDirection.Output, SiteID),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 8, ParameterDirection.Output, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 50, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 20, ParameterDirection.Output, ICPCert),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 4, ParameterDirection.Output, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 100, ParameterDirection.Output, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 8000, ParameterDirection.Output, Urls),
                new MSSQL.Parameter("AdministratorID", SqlDbType.BigInt, 8, ParameterDirection.Output, AdministratorID),
                new MSSQL.Parameter("PageTitle", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageTitle),
                new MSSQL.Parameter("PageKeywords", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageKeywords),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SiteID = System.Convert.ToInt64(Outputs["SiteID"]);
            }
            catch { }

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                OwnerUserID = System.Convert.ToInt64(Outputs["OwnerUserID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                ICPCert = System.Convert.ToString(Outputs["ICPCert"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                MaxSubSites = System.Convert.ToInt32(Outputs["MaxSubSites"]);
            }
            catch { }

            try
            {
                UseLotteryListRestrictions = System.Convert.ToString(Outputs["UseLotteryListRestrictions"]);
            }
            catch { }

            try
            {
                UseLotteryList = System.Convert.ToString(Outputs["UseLotteryList"]);
            }
            catch { }

            try
            {
                UseLotteryListQuickBuy = System.Convert.ToString(Outputs["UseLotteryListQuickBuy"]);
            }
            catch { }

            try
            {
                Urls = System.Convert.ToString(Outputs["Urls"]);
            }
            catch { }

            try
            {
                AdministratorID = System.Convert.ToInt64(Outputs["AdministratorID"]);
            }
            catch { }

            try
            {
                PageTitle = System.Convert.ToString(Outputs["PageTitle"]);
            }
            catch { }

            try
            {
                PageKeywords = System.Convert.ToString(Outputs["PageKeywords"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSiteInformationByUrl(string ConnectionString, ref DataSet ds, string Url, ref long SiteID, ref long ParentID, ref long OwnerUserID, ref string Name, ref string LogoUrl, ref string Company, ref string Address, ref string PostCode, ref string ResponsiblePerson, ref string ContactPerson, ref string Telephone, ref string Fax, ref string Mobile, ref string Email, ref string QQ, ref string ServiceTelephone, ref string ICPCert, ref short Level, ref bool ON, ref double BonusScale, ref int MaxSubSites, ref string UseLotteryListRestrictions, ref string UseLotteryList, ref string UseLotteryListQuickBuy, ref string Urls, ref long AdministratorID, ref string PageTitle, ref string PageKeywords, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetSiteInformationByUrl", ref ds, ref Outputs,
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 8, ParameterDirection.Output, SiteID),
                new MSSQL.Parameter("ParentID", SqlDbType.BigInt, 8, ParameterDirection.Output, ParentID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 8, ParameterDirection.Output, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 200, ParameterDirection.Output, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 50, ParameterDirection.Output, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 6, ParameterDirection.Output, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 50, ParameterDirection.Output, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 50, ParameterDirection.Output, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 50, ParameterDirection.Output, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 20, ParameterDirection.Output, ICPCert),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 1, ParameterDirection.Output, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 8, ParameterDirection.Output, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 4, ParameterDirection.Output, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 1000, ParameterDirection.Output, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 100, ParameterDirection.Output, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 8000, ParameterDirection.Output, Urls),
                new MSSQL.Parameter("AdministratorID", SqlDbType.BigInt, 8, ParameterDirection.Output, AdministratorID),
                new MSSQL.Parameter("PageTitle", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageTitle),
                new MSSQL.Parameter("PageKeywords", SqlDbType.VarChar, 1000, ParameterDirection.Output, PageKeywords),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SiteID = System.Convert.ToInt64(Outputs["SiteID"]);
            }
            catch { }

            try
            {
                ParentID = System.Convert.ToInt64(Outputs["ParentID"]);
            }
            catch { }

            try
            {
                OwnerUserID = System.Convert.ToInt64(Outputs["OwnerUserID"]);
            }
            catch { }

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                LogoUrl = System.Convert.ToString(Outputs["LogoUrl"]);
            }
            catch { }

            try
            {
                Company = System.Convert.ToString(Outputs["Company"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                PostCode = System.Convert.ToString(Outputs["PostCode"]);
            }
            catch { }

            try
            {
                ResponsiblePerson = System.Convert.ToString(Outputs["ResponsiblePerson"]);
            }
            catch { }

            try
            {
                ContactPerson = System.Convert.ToString(Outputs["ContactPerson"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Fax = System.Convert.ToString(Outputs["Fax"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                ServiceTelephone = System.Convert.ToString(Outputs["ServiceTelephone"]);
            }
            catch { }

            try
            {
                ICPCert = System.Convert.ToString(Outputs["ICPCert"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                ON = System.Convert.ToBoolean(Outputs["ON"]);
            }
            catch { }

            try
            {
                BonusScale = System.Convert.ToDouble(Outputs["BonusScale"]);
            }
            catch { }

            try
            {
                MaxSubSites = System.Convert.ToInt32(Outputs["MaxSubSites"]);
            }
            catch { }

            try
            {
                UseLotteryListRestrictions = System.Convert.ToString(Outputs["UseLotteryListRestrictions"]);
            }
            catch { }

            try
            {
                UseLotteryList = System.Convert.ToString(Outputs["UseLotteryList"]);
            }
            catch { }

            try
            {
                UseLotteryListQuickBuy = System.Convert.ToString(Outputs["UseLotteryListQuickBuy"]);
            }
            catch { }

            try
            {
                Urls = System.Convert.ToString(Outputs["Urls"]);
            }
            catch { }

            try
            {
                AdministratorID = System.Convert.ToInt64(Outputs["AdministratorID"]);
            }
            catch { }

            try
            {
                PageTitle = System.Convert.ToString(Outputs["PageTitle"]);
            }
            catch { }

            try
            {
                PageKeywords = System.Convert.ToString(Outputs["PageKeywords"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSiteNotificationTemplate(string ConnectionString, long SiteID, short Manner, string NotificationType, ref string Value)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetSiteNotificationTemplate", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("NotificationType", SqlDbType.VarChar, 0, ParameterDirection.Input, NotificationType),
                new MSSQL.Parameter("Value", SqlDbType.VarChar, 1073741823, ParameterDirection.Output, Value)
                );

            try
            {
                Value = System.Convert.ToString(Outputs["Value"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSiteNotificationTemplate(string ConnectionString, ref DataSet ds, long SiteID, short Manner, string NotificationType, ref string Value)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetSiteNotificationTemplate", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("NotificationType", SqlDbType.VarChar, 0, ParameterDirection.Input, NotificationType),
                new MSSQL.Parameter("Value", SqlDbType.VarChar, 1073741823, ParameterDirection.Output, Value)
                );

            try
            {
                Value = System.Convert.ToString(Outputs["Value"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSurrogateAccount(string ConnectionString, long SiteID, int Year, int Month, long SubSiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetSurrogateAccount", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("SubSiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SubSiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSurrogateAccount(string ConnectionString, ref DataSet ds, long SiteID, int Year, int Month, long SubSiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetSurrogateAccount", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("SubSiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SubSiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSurrogateSalesRanked(string ConnectionString, long SiteID, int RanksType, int Year, int Month, int Top, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetSurrogateSalesRanked", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("RanksType", SqlDbType.Int, 0, ParameterDirection.Input, RanksType),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("Top", SqlDbType.Int, 0, ParameterDirection.Input, Top),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetSurrogateSalesRanked(string ConnectionString, ref DataSet ds, long SiteID, int RanksType, int Year, int Month, int Top, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetSurrogateSalesRanked", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("RanksType", SqlDbType.Int, 0, ParameterDirection.Input, RanksType),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("Top", SqlDbType.Int, 0, ParameterDirection.Input, Top),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserAccountDetail(string ConnectionString, long SiteID, long UserID, int Year, int Month, int Day, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserAccountDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("Day", SqlDbType.Int, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserAccountDetail(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int Year, int Month, int Day, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserAccountDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("Day", SqlDbType.Int, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserAccountDetails(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserAccountDetails", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserAccountDetails(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserAccountDetails", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserAccountDetailsAdmin(string ConnectionString, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserAccountDetailsAdmin", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserAccountDetailsAdmin(string ConnectionString, ref DataSet ds, long SiteID, long UserID, DateTime StartTime, DateTime EndTime, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserAccountDetailsAdmin", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserBankDetail(string ConnectionString, long SiteID, long UserID, ref string BankTypeName, ref string BankName, ref string BankCardNumber, ref string BankInProvinceName, ref string BankInCityName, ref string BankUserName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserBankDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("BankTypeName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankTypeName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("BankInProvinceName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankInProvinceName),
                new MSSQL.Parameter("BankInCityName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankInCityName),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 20, ParameterDirection.Output, BankUserName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                BankTypeName = System.Convert.ToString(Outputs["BankTypeName"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                BankInProvinceName = System.Convert.ToString(Outputs["BankInProvinceName"]);
            }
            catch { }

            try
            {
                BankInCityName = System.Convert.ToString(Outputs["BankInCityName"]);
            }
            catch { }

            try
            {
                BankUserName = System.Convert.ToString(Outputs["BankUserName"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserBankDetail(string ConnectionString, ref DataSet ds, long SiteID, long UserID, ref string BankTypeName, ref string BankName, ref string BankCardNumber, ref string BankInProvinceName, ref string BankInCityName, ref string BankUserName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserBankDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("BankTypeName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankTypeName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("BankInProvinceName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankInProvinceName),
                new MSSQL.Parameter("BankInCityName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankInCityName),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 20, ParameterDirection.Output, BankUserName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                BankTypeName = System.Convert.ToString(Outputs["BankTypeName"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                BankInProvinceName = System.Convert.ToString(Outputs["BankInProvinceName"]);
            }
            catch { }

            try
            {
                BankInCityName = System.Convert.ToString(Outputs["BankInCityName"]);
            }
            catch { }

            try
            {
                BankUserName = System.Convert.ToString(Outputs["BankUserName"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserCustomFollowSchemes(string ConnectionString, long SiteID, long UserID, int PlayTypeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserCustomFollowSchemes", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserCustomFollowSchemes(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int PlayTypeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserCustomFollowSchemes", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserFreezeDetail(string ConnectionString, long SiteID, long UserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserFreezeDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserFreezeDetail(string ConnectionString, ref DataSet ds, long SiteID, long UserID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserFreezeDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserInformationByID(string ConnectionString, long UserID, long SiteID, ref string Name, ref string NickName, ref string RealityName, ref string Password, ref string PasswordAdv, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string OwnerSites, ref string AlipayID, ref double Bonus, ref double Reward, ref string AlipayName, ref bool isAlipayNameValided, ref int ComeFrom, ref bool IsCrossLogin, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref string VisitSource, ref string HeadUrl, ref string SecurityQuestion, ref string SecurityAnswer, ref string FriendList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserInformationByID", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("NickName", SqlDbType.VarChar, 50, ParameterDirection.Output, NickName),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 32, ParameterDirection.Output, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("OwnerSites", SqlDbType.VarChar, 1000, ParameterDirection.Output, OwnerSites),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("ComeFrom", SqlDbType.Int, 4, ParameterDirection.Output, ComeFrom),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 1, ParameterDirection.Output, IsCrossLogin),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("VisitSource", SqlDbType.VarChar, 255, ParameterDirection.Output, VisitSource),
                new MSSQL.Parameter("HeadUrl", SqlDbType.VarChar, 500, ParameterDirection.Output, HeadUrl),
                new MSSQL.Parameter("SecurityQuestion", SqlDbType.VarChar, 100, ParameterDirection.Output, SecurityQuestion),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 50, ParameterDirection.Output, SecurityAnswer),
                new MSSQL.Parameter("FriendList", SqlDbType.VarChar, 1073741823, ParameterDirection.Output, FriendList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                NickName = System.Convert.ToString(Outputs["NickName"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                Password = System.Convert.ToString(Outputs["Password"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                OwnerSites = System.Convert.ToString(Outputs["OwnerSites"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                ComeFrom = System.Convert.ToInt32(Outputs["ComeFrom"]);
            }
            catch { }

            try
            {
                IsCrossLogin = System.Convert.ToBoolean(Outputs["IsCrossLogin"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                VisitSource = System.Convert.ToString(Outputs["VisitSource"]);
            }
            catch { }

            try
            {
                HeadUrl = System.Convert.ToString(Outputs["HeadUrl"]);
            }
            catch { }

            try
            {
                SecurityQuestion = System.Convert.ToString(Outputs["SecurityQuestion"]);
            }
            catch { }

            try
            {
                SecurityAnswer = System.Convert.ToString(Outputs["SecurityAnswer"]);
            }
            catch { }

            try
            {
                FriendList = System.Convert.ToString(Outputs["FriendList"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserInformationByID(string ConnectionString, ref DataSet ds, long UserID, long SiteID, ref string Name, ref string NickName, ref string RealityName, ref string Password, ref string PasswordAdv, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string OwnerSites, ref string AlipayID, ref double Bonus, ref double Reward, ref string AlipayName, ref bool isAlipayNameValided, ref int ComeFrom, ref bool IsCrossLogin, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref string VisitSource, ref string HeadUrl, ref string SecurityQuestion, ref string SecurityAnswer, ref string FriendList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserInformationByID", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 50, ParameterDirection.Output, Name),
                new MSSQL.Parameter("NickName", SqlDbType.VarChar, 50, ParameterDirection.Output, NickName),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 32, ParameterDirection.Output, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("OwnerSites", SqlDbType.VarChar, 1000, ParameterDirection.Output, OwnerSites),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("ComeFrom", SqlDbType.Int, 4, ParameterDirection.Output, ComeFrom),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 1, ParameterDirection.Output, IsCrossLogin),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("VisitSource", SqlDbType.VarChar, 255, ParameterDirection.Output, VisitSource),
                new MSSQL.Parameter("HeadUrl", SqlDbType.VarChar, 500, ParameterDirection.Output, HeadUrl),
                new MSSQL.Parameter("SecurityQuestion", SqlDbType.VarChar, 100, ParameterDirection.Output, SecurityQuestion),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 50, ParameterDirection.Output, SecurityAnswer),
                new MSSQL.Parameter("FriendList", SqlDbType.VarChar, 1073741823, ParameterDirection.Output, FriendList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                Name = System.Convert.ToString(Outputs["Name"]);
            }
            catch { }

            try
            {
                NickName = System.Convert.ToString(Outputs["NickName"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                Password = System.Convert.ToString(Outputs["Password"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                OwnerSites = System.Convert.ToString(Outputs["OwnerSites"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                ComeFrom = System.Convert.ToInt32(Outputs["ComeFrom"]);
            }
            catch { }

            try
            {
                IsCrossLogin = System.Convert.ToBoolean(Outputs["IsCrossLogin"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                VisitSource = System.Convert.ToString(Outputs["VisitSource"]);
            }
            catch { }

            try
            {
                HeadUrl = System.Convert.ToString(Outputs["HeadUrl"]);
            }
            catch { }

            try
            {
                SecurityQuestion = System.Convert.ToString(Outputs["SecurityQuestion"]);
            }
            catch { }

            try
            {
                SecurityAnswer = System.Convert.ToString(Outputs["SecurityAnswer"]);
            }
            catch { }

            try
            {
                FriendList = System.Convert.ToString(Outputs["FriendList"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserInformationByName(string ConnectionString, string Name, long SiteID, ref long UserID, ref string NickName, ref string RealityName, ref string Password, ref string PasswordAdv, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string OwnerSites, ref string AlipayID, ref double Bonus, ref double Reward, ref string AlipayName, ref bool isAlipayNameValided, ref int ComeFrom, ref bool IsCrossLogin, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref string VisitSource, ref string HeadUrl, ref string SecurityQuestion, ref string SecurityAnswer, ref string FriendList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserInformationByName", ref Outputs,
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("NickName", SqlDbType.VarChar, 50, ParameterDirection.Output, NickName),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 32, ParameterDirection.Output, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("OwnerSites", SqlDbType.VarChar, 1000, ParameterDirection.Output, OwnerSites),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("ComeFrom", SqlDbType.Int, 4, ParameterDirection.Output, ComeFrom),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 1, ParameterDirection.Output, IsCrossLogin),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("VisitSource", SqlDbType.VarChar, 255, ParameterDirection.Output, VisitSource),
                new MSSQL.Parameter("HeadUrl", SqlDbType.VarChar, 500, ParameterDirection.Output, HeadUrl),
                new MSSQL.Parameter("SecurityQuestion", SqlDbType.VarChar, 100, ParameterDirection.Output, SecurityQuestion),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 50, ParameterDirection.Output, SecurityAnswer),
                new MSSQL.Parameter("FriendList", SqlDbType.VarChar, 1073741823, ParameterDirection.Output, FriendList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                NickName = System.Convert.ToString(Outputs["NickName"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                Password = System.Convert.ToString(Outputs["Password"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                OwnerSites = System.Convert.ToString(Outputs["OwnerSites"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                ComeFrom = System.Convert.ToInt32(Outputs["ComeFrom"]);
            }
            catch { }

            try
            {
                IsCrossLogin = System.Convert.ToBoolean(Outputs["IsCrossLogin"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                VisitSource = System.Convert.ToString(Outputs["VisitSource"]);
            }
            catch { }

            try
            {
                HeadUrl = System.Convert.ToString(Outputs["HeadUrl"]);
            }
            catch { }

            try
            {
                SecurityQuestion = System.Convert.ToString(Outputs["SecurityQuestion"]);
            }
            catch { }

            try
            {
                SecurityAnswer = System.Convert.ToString(Outputs["SecurityAnswer"]);
            }
            catch { }

            try
            {
                FriendList = System.Convert.ToString(Outputs["FriendList"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserInformationByName(string ConnectionString, ref DataSet ds, string Name, long SiteID, ref long UserID, ref string NickName, ref string RealityName, ref string Password, ref string PasswordAdv, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string OwnerSites, ref string AlipayID, ref double Bonus, ref double Reward, ref string AlipayName, ref bool isAlipayNameValided, ref int ComeFrom, ref bool IsCrossLogin, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref string VisitSource, ref string HeadUrl, ref string SecurityQuestion, ref string SecurityAnswer, ref string FriendList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserInformationByName", ref ds, ref Outputs,
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("NickName", SqlDbType.VarChar, 50, ParameterDirection.Output, NickName),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 32, ParameterDirection.Output, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("OwnerSites", SqlDbType.VarChar, 1000, ParameterDirection.Output, OwnerSites),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("ComeFrom", SqlDbType.Int, 4, ParameterDirection.Output, ComeFrom),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 1, ParameterDirection.Output, IsCrossLogin),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("VisitSource", SqlDbType.VarChar, 255, ParameterDirection.Output, VisitSource),
                new MSSQL.Parameter("HeadUrl", SqlDbType.VarChar, 500, ParameterDirection.Output, HeadUrl),
                new MSSQL.Parameter("SecurityQuestion", SqlDbType.VarChar, 100, ParameterDirection.Output, SecurityQuestion),
                new MSSQL.Parameter("SecurityAnswer", SqlDbType.VarChar, 50, ParameterDirection.Output, SecurityAnswer),
                new MSSQL.Parameter("FriendList", SqlDbType.VarChar, 1073741823, ParameterDirection.Output, FriendList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                NickName = System.Convert.ToString(Outputs["NickName"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                Password = System.Convert.ToString(Outputs["Password"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                OwnerSites = System.Convert.ToString(Outputs["OwnerSites"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                ComeFrom = System.Convert.ToInt32(Outputs["ComeFrom"]);
            }
            catch { }

            try
            {
                IsCrossLogin = System.Convert.ToBoolean(Outputs["IsCrossLogin"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                VisitSource = System.Convert.ToString(Outputs["VisitSource"]);
            }
            catch { }

            try
            {
                HeadUrl = System.Convert.ToString(Outputs["HeadUrl"]);
            }
            catch { }

            try
            {
                SecurityQuestion = System.Convert.ToString(Outputs["SecurityQuestion"]);
            }
            catch { }

            try
            {
                SecurityAnswer = System.Convert.ToString(Outputs["SecurityAnswer"]);
            }
            catch { }

            try
            {
                FriendList = System.Convert.ToString(Outputs["FriendList"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserIsAwardwinning(string ConnectionString, string AlipayName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserIsAwardwinning", ref Outputs,
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserIsAwardwinning(string ConnectionString, ref DataSet ds, string AlipayName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserIsAwardwinning", ref ds, ref Outputs,
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserScoringDetail(string ConnectionString, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserScoringDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserScoringDetail(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserScoringDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserSMSDetail(string ConnectionString, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetUserSMSDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetUserSMSDetail(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int Year, int Month, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetUserSMSDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Year", SqlDbType.Int, 0, ParameterDirection.Input, Year),
                new MSSQL.Parameter("Month", SqlDbType.Int, 0, ParameterDirection.Input, Month),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetWinLotteryNumber(string ConnectionString, long SiteID, int LotteryID, int IsuseCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetWinLotteryNumber", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("IsuseCount", SqlDbType.Int, 0, ParameterDirection.Input, IsuseCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetWinLotteryNumber(string ConnectionString, ref DataSet ds, long SiteID, int LotteryID, int IsuseCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetWinLotteryNumber", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("IsuseCount", SqlDbType.Int, 0, ParameterDirection.Input, IsuseCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetZCDCSPFMessage(string ConnectionString, string IsuseName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_GetZCDCSPFMessage", ref Outputs,
                new MSSQL.Parameter("IsuseName", SqlDbType.VarChar, 0, ParameterDirection.Input, IsuseName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_GetZCDCSPFMessage(string ConnectionString, ref DataSet ds, string IsuseName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_GetZCDCSPFMessage", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseName", SqlDbType.VarChar, 0, ParameterDirection.Input, IsuseName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_HNXYXC_ManualInputBouns(string ConnectionString, int lotteryID, long issueID, string bonuxml, ref int returnValue, ref string returnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_HNXYXC_ManualInputBouns", ref Outputs,
                new MSSQL.Parameter("lotteryID", SqlDbType.Int, 0, ParameterDirection.Input, lotteryID),
                new MSSQL.Parameter("issueID", SqlDbType.BigInt, 0, ParameterDirection.Input, issueID),
                new MSSQL.Parameter("bonuxml", SqlDbType.NVarChar, 0, ParameterDirection.Input, bonuxml),
                new MSSQL.Parameter("returnValue", SqlDbType.Int, 4, ParameterDirection.Output, returnValue),
                new MSSQL.Parameter("returnDescription", SqlDbType.NVarChar, 200, ParameterDirection.Output, returnDescription)
                );

            try
            {
                returnValue = System.Convert.ToInt32(Outputs["returnValue"]);
            }
            catch { }

            try
            {
                returnDescription = System.Convert.ToString(Outputs["returnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_HNXYXC_ManualInputBouns(string ConnectionString, ref DataSet ds, int lotteryID, long issueID, string bonuxml, ref int returnValue, ref string returnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_HNXYXC_ManualInputBouns", ref ds, ref Outputs,
                new MSSQL.Parameter("lotteryID", SqlDbType.Int, 0, ParameterDirection.Input, lotteryID),
                new MSSQL.Parameter("issueID", SqlDbType.BigInt, 0, ParameterDirection.Input, issueID),
                new MSSQL.Parameter("bonuxml", SqlDbType.NVarChar, 0, ParameterDirection.Input, bonuxml),
                new MSSQL.Parameter("returnValue", SqlDbType.Int, 4, ParameterDirection.Output, returnValue),
                new MSSQL.Parameter("returnDescription", SqlDbType.NVarChar, 200, ParameterDirection.Output, returnDescription)
                );

            try
            {
                returnValue = System.Convert.ToInt32(Outputs["returnValue"]);
            }
            catch { }

            try
            {
                returnDescription = System.Convert.ToString(Outputs["returnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitializationData(string ConnectionString, string CallPassword, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_InitializationData", ref Outputs,
                new MSSQL.Parameter("CallPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, CallPassword),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitializationData(string ConnectionString, ref DataSet ds, string CallPassword, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_InitializationData", ref ds, ref Outputs,
                new MSSQL.Parameter("CallPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, CallPassword),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitializationSiteTemplates(string ConnectionString, long SiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_InitializationSiteTemplates", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitializationSiteTemplates(string ConnectionString, ref DataSet ds, long SiteID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_InitializationSiteTemplates", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateChaseTask(string ConnectionString, long SiteID, long UserID, string Title, string Description, int LotteryID, double StopWhenWinMoney, string DetailXML, string LotteryNumber, double SchemeBonusScale, int FromClient, ref long ChaseTaskID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_InitiateChaseTask", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("StopWhenWinMoney", SqlDbType.Money, 0, ParameterDirection.Input, StopWhenWinMoney),
                new MSSQL.Parameter("DetailXML", SqlDbType.NText, 0, ParameterDirection.Input, DetailXML),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("SchemeBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SchemeBonusScale),
                new MSSQL.Parameter("FromClient", SqlDbType.Int, 0, ParameterDirection.Input, FromClient),
                new MSSQL.Parameter("ChaseTaskID", SqlDbType.BigInt, 8, ParameterDirection.Output, ChaseTaskID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ChaseTaskID = System.Convert.ToInt64(Outputs["ChaseTaskID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateChaseTask(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string Title, string Description, int LotteryID, double StopWhenWinMoney, string DetailXML, string LotteryNumber, double SchemeBonusScale, int FromClient, ref long ChaseTaskID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_InitiateChaseTask", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("StopWhenWinMoney", SqlDbType.Money, 0, ParameterDirection.Input, StopWhenWinMoney),
                new MSSQL.Parameter("DetailXML", SqlDbType.NText, 0, ParameterDirection.Input, DetailXML),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("SchemeBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SchemeBonusScale),
                new MSSQL.Parameter("FromClient", SqlDbType.Int, 0, ParameterDirection.Input, FromClient),
                new MSSQL.Parameter("ChaseTaskID", SqlDbType.BigInt, 8, ParameterDirection.Output, ChaseTaskID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ChaseTaskID = System.Convert.ToInt64(Outputs["ChaseTaskID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateChaseTask_Count(string ConnectionString, long SiteID, long UserID, int LotteryID, int PlayTypeID, int Multiple, double TaskMoney, int Count, double StopWhenWinMoney, string LotteryNumber, double SchemeBonusScale, ref long ChaseTaskID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_InitiateChaseTask_Count", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("TaskMoney", SqlDbType.Money, 0, ParameterDirection.Input, TaskMoney),
                new MSSQL.Parameter("Count", SqlDbType.Int, 0, ParameterDirection.Input, Count),
                new MSSQL.Parameter("StopWhenWinMoney", SqlDbType.Money, 0, ParameterDirection.Input, StopWhenWinMoney),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("SchemeBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SchemeBonusScale),
                new MSSQL.Parameter("ChaseTaskID", SqlDbType.BigInt, 8, ParameterDirection.Output, ChaseTaskID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ChaseTaskID = System.Convert.ToInt64(Outputs["ChaseTaskID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateChaseTask_Count(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int LotteryID, int PlayTypeID, int Multiple, double TaskMoney, int Count, double StopWhenWinMoney, string LotteryNumber, double SchemeBonusScale, ref long ChaseTaskID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_InitiateChaseTask_Count", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("TaskMoney", SqlDbType.Money, 0, ParameterDirection.Input, TaskMoney),
                new MSSQL.Parameter("Count", SqlDbType.Int, 0, ParameterDirection.Input, Count),
                new MSSQL.Parameter("StopWhenWinMoney", SqlDbType.Money, 0, ParameterDirection.Input, StopWhenWinMoney),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("SchemeBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SchemeBonusScale),
                new MSSQL.Parameter("ChaseTaskID", SqlDbType.BigInt, 8, ParameterDirection.Output, ChaseTaskID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ChaseTaskID = System.Convert.ToInt64(Outputs["ChaseTaskID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateGreetingCard(string ConnectionString, long SiteID, long UserID, int LotteryID, int PlayTypeID, DateTime EndDatetime, string LotteryNumber, int Multiple, double Money, short SecrecyLevel, ref long VerificationCode, ref long NewID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_InitiateGreetingCard", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("EndDatetime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndDatetime),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("SecrecyLevel", SqlDbType.SmallInt, 0, ParameterDirection.Input, SecrecyLevel),
                new MSSQL.Parameter("VerificationCode", SqlDbType.BigInt, 8, ParameterDirection.Output, VerificationCode),
                new MSSQL.Parameter("NewID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                VerificationCode = System.Convert.ToInt64(Outputs["VerificationCode"]);
            }
            catch { }

            try
            {
                NewID = System.Convert.ToInt64(Outputs["NewID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateGreetingCard(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int LotteryID, int PlayTypeID, DateTime EndDatetime, string LotteryNumber, int Multiple, double Money, short SecrecyLevel, ref long VerificationCode, ref long NewID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_InitiateGreetingCard", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("EndDatetime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndDatetime),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("SecrecyLevel", SqlDbType.SmallInt, 0, ParameterDirection.Input, SecrecyLevel),
                new MSSQL.Parameter("VerificationCode", SqlDbType.BigInt, 8, ParameterDirection.Output, VerificationCode),
                new MSSQL.Parameter("NewID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                VerificationCode = System.Convert.ToInt64(Outputs["VerificationCode"]);
            }
            catch { }

            try
            {
                NewID = System.Convert.ToInt64(Outputs["NewID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateScheme(string ConnectionString, long SiteID, long UserID, long IsuseID, int PlayTypeID, string Title, string Description, string LotteryNumber, string UploadFileContent, int Multiple, double Money, double AssureMoney, int Share, int BuyShare, string OpenUsers, short SecrecyLevel, double SchemeBonusScale, int FromClient, ref long SchemeID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_InitiateScheme", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("UploadFileContent", SqlDbType.VarChar, 0, ParameterDirection.Input, UploadFileContent),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("AssureMoney", SqlDbType.Money, 0, ParameterDirection.Input, AssureMoney),
                new MSSQL.Parameter("Share", SqlDbType.Int, 0, ParameterDirection.Input, Share),
                new MSSQL.Parameter("BuyShare", SqlDbType.Int, 0, ParameterDirection.Input, BuyShare),
                new MSSQL.Parameter("OpenUsers", SqlDbType.VarChar, 0, ParameterDirection.Input, OpenUsers),
                new MSSQL.Parameter("SecrecyLevel", SqlDbType.SmallInt, 0, ParameterDirection.Input, SecrecyLevel),
                new MSSQL.Parameter("SchemeBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SchemeBonusScale),
                new MSSQL.Parameter("FromClient", SqlDbType.Int, 0, ParameterDirection.Input, FromClient),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 8, ParameterDirection.Output, SchemeID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SchemeID = System.Convert.ToInt64(Outputs["SchemeID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InitiateScheme(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long IsuseID, int PlayTypeID, string Title, string Description, string LotteryNumber, string UploadFileContent, int Multiple, double Money, double AssureMoney, int Share, int BuyShare, string OpenUsers, short SecrecyLevel, double SchemeBonusScale, int FromClient, ref long SchemeID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_InitiateScheme", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("LotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, LotteryNumber),
                new MSSQL.Parameter("UploadFileContent", SqlDbType.VarChar, 0, ParameterDirection.Input, UploadFileContent),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("AssureMoney", SqlDbType.Money, 0, ParameterDirection.Input, AssureMoney),
                new MSSQL.Parameter("Share", SqlDbType.Int, 0, ParameterDirection.Input, Share),
                new MSSQL.Parameter("BuyShare", SqlDbType.Int, 0, ParameterDirection.Input, BuyShare),
                new MSSQL.Parameter("OpenUsers", SqlDbType.VarChar, 0, ParameterDirection.Input, OpenUsers),
                new MSSQL.Parameter("SecrecyLevel", SqlDbType.SmallInt, 0, ParameterDirection.Input, SecrecyLevel),
                new MSSQL.Parameter("SchemeBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, SchemeBonusScale),
                new MSSQL.Parameter("FromClient", SqlDbType.Int, 0, ParameterDirection.Input, FromClient),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 8, ParameterDirection.Output, SchemeID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SchemeID = System.Convert.ToInt64(Outputs["SchemeID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InquirySchemesHandle(string ConnectionString, string CounterAnteId, string DealTime, short HandleResult, string HandleDescription, short PrintOutType, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_InquirySchemesHandle", ref Outputs,
                new MSSQL.Parameter("CounterAnteId", SqlDbType.VarChar, 0, ParameterDirection.Input, CounterAnteId),
                new MSSQL.Parameter("DealTime", SqlDbType.VarChar, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("HandleDescription", SqlDbType.VarChar, 0, ParameterDirection.Input, HandleDescription),
                new MSSQL.Parameter("PrintOutType", SqlDbType.SmallInt, 0, ParameterDirection.Input, PrintOutType),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_InquirySchemesHandle(string ConnectionString, ref DataSet ds, string CounterAnteId, string DealTime, short HandleResult, string HandleDescription, short PrintOutType, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_InquirySchemesHandle", ref ds, ref Outputs,
                new MSSQL.Parameter("CounterAnteId", SqlDbType.VarChar, 0, ParameterDirection.Input, CounterAnteId),
                new MSSQL.Parameter("DealTime", SqlDbType.VarChar, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("HandleDescription", SqlDbType.VarChar, 0, ParameterDirection.Input, HandleDescription),
                new MSSQL.Parameter("PrintOutType", SqlDbType.SmallInt, 0, ParameterDirection.Input, PrintOutType),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseAdd(string ConnectionString, int LotteryID, string Name, DateTime StartTime, DateTime EndTime, string Explanation, string AdditionalXML, ref long IsuseID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_IsuseAdd", ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("Explanation", SqlDbType.VarChar, 0, ParameterDirection.Input, Explanation),
                new MSSQL.Parameter("AdditionalXML", SqlDbType.NText, 0, ParameterDirection.Input, AdditionalXML),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 8, ParameterDirection.Output, IsuseID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                IsuseID = System.Convert.ToInt64(Outputs["IsuseID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseAdd(string ConnectionString, ref DataSet ds, int LotteryID, string Name, DateTime StartTime, DateTime EndTime, string Explanation, string AdditionalXML, ref long IsuseID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_IsuseAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("Explanation", SqlDbType.VarChar, 0, ParameterDirection.Input, Explanation),
                new MSSQL.Parameter("AdditionalXML", SqlDbType.NText, 0, ParameterDirection.Input, AdditionalXML),
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 8, ParameterDirection.Output, IsuseID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                IsuseID = System.Convert.ToInt64(Outputs["IsuseID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseBonusesAdd(string ConnectionString, long IsuseId, long UserID, string WinListXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_IsuseBonusesAdd", ref Outputs,
                new MSSQL.Parameter("IsuseId", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseId),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("WinListXML", SqlDbType.NText, 0, ParameterDirection.Input, WinListXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseBonusesAdd(string ConnectionString, ref DataSet ds, long IsuseId, long UserID, string WinListXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_IsuseBonusesAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseId", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseId),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("WinListXML", SqlDbType.NText, 0, ParameterDirection.Input, WinListXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseEdit(string ConnectionString, long IsuseID, string Name, DateTime StartTime, DateTime EndTime, string Explanation, string AdditionalXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_IsuseEdit", ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("Explanation", SqlDbType.VarChar, 0, ParameterDirection.Input, Explanation),
                new MSSQL.Parameter("AdditionalXML", SqlDbType.NText, 0, ParameterDirection.Input, AdditionalXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseEdit(string ConnectionString, ref DataSet ds, long IsuseID, string Name, DateTime StartTime, DateTime EndTime, string Explanation, string AdditionalXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_IsuseEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("Explanation", SqlDbType.VarChar, 0, ParameterDirection.Input, Explanation),
                new MSSQL.Parameter("AdditionalXML", SqlDbType.NText, 0, ParameterDirection.Input, AdditionalXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseEndTime(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_IsuseEndTime", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseEndTime(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_IsuseEndTime", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseInsertOneResultForZCDC(string ConnectionString, long ID, string HalftimeResult, string Result, string LetBall, string SPFResult, double SPF_Sp, string ZJQResult, double ZJQ_Sp, string SXDSResult, double SXDS_Sp, string ZQBFResult, double ZQBF_Sp, string BQCSPFResult, double BQCSPF_Sp, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_IsuseInsertOneResultForZCDC", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("HalftimeResult", SqlDbType.VarChar, 0, ParameterDirection.Input, HalftimeResult),
                new MSSQL.Parameter("Result", SqlDbType.VarChar, 0, ParameterDirection.Input, Result),
                new MSSQL.Parameter("LetBall", SqlDbType.VarChar, 0, ParameterDirection.Input, LetBall),
                new MSSQL.Parameter("SPFResult", SqlDbType.VarChar, 0, ParameterDirection.Input, SPFResult),
                new MSSQL.Parameter("SPF_Sp", SqlDbType.Float, 0, ParameterDirection.Input, SPF_Sp),
                new MSSQL.Parameter("ZJQResult", SqlDbType.VarChar, 0, ParameterDirection.Input, ZJQResult),
                new MSSQL.Parameter("ZJQ_Sp", SqlDbType.Float, 0, ParameterDirection.Input, ZJQ_Sp),
                new MSSQL.Parameter("SXDSResult", SqlDbType.VarChar, 0, ParameterDirection.Input, SXDSResult),
                new MSSQL.Parameter("SXDS_Sp", SqlDbType.Float, 0, ParameterDirection.Input, SXDS_Sp),
                new MSSQL.Parameter("ZQBFResult", SqlDbType.VarChar, 0, ParameterDirection.Input, ZQBFResult),
                new MSSQL.Parameter("ZQBF_Sp", SqlDbType.Float, 0, ParameterDirection.Input, ZQBF_Sp),
                new MSSQL.Parameter("BQCSPFResult", SqlDbType.VarChar, 0, ParameterDirection.Input, BQCSPFResult),
                new MSSQL.Parameter("BQCSPF_Sp", SqlDbType.Float, 0, ParameterDirection.Input, BQCSPF_Sp),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseInsertOneResultForZCDC(string ConnectionString, ref DataSet ds, long ID, string HalftimeResult, string Result, string LetBall, string SPFResult, double SPF_Sp, string ZJQResult, double ZJQ_Sp, string SXDSResult, double SXDS_Sp, string ZQBFResult, double ZQBF_Sp, string BQCSPFResult, double BQCSPF_Sp, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_IsuseInsertOneResultForZCDC", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("HalftimeResult", SqlDbType.VarChar, 0, ParameterDirection.Input, HalftimeResult),
                new MSSQL.Parameter("Result", SqlDbType.VarChar, 0, ParameterDirection.Input, Result),
                new MSSQL.Parameter("LetBall", SqlDbType.VarChar, 0, ParameterDirection.Input, LetBall),
                new MSSQL.Parameter("SPFResult", SqlDbType.VarChar, 0, ParameterDirection.Input, SPFResult),
                new MSSQL.Parameter("SPF_Sp", SqlDbType.Float, 0, ParameterDirection.Input, SPF_Sp),
                new MSSQL.Parameter("ZJQResult", SqlDbType.VarChar, 0, ParameterDirection.Input, ZJQResult),
                new MSSQL.Parameter("ZJQ_Sp", SqlDbType.Float, 0, ParameterDirection.Input, ZJQ_Sp),
                new MSSQL.Parameter("SXDSResult", SqlDbType.VarChar, 0, ParameterDirection.Input, SXDSResult),
                new MSSQL.Parameter("SXDS_Sp", SqlDbType.Float, 0, ParameterDirection.Input, SXDS_Sp),
                new MSSQL.Parameter("ZQBFResult", SqlDbType.VarChar, 0, ParameterDirection.Input, ZQBFResult),
                new MSSQL.Parameter("ZQBF_Sp", SqlDbType.Float, 0, ParameterDirection.Input, ZQBF_Sp),
                new MSSQL.Parameter("BQCSPFResult", SqlDbType.VarChar, 0, ParameterDirection.Input, BQCSPFResult),
                new MSSQL.Parameter("BQCSPF_Sp", SqlDbType.Float, 0, ParameterDirection.Input, BQCSPF_Sp),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseUpdate(string ConnectionString, int LotteryID, string IsuseName, short State, DateTime StartTime, DateTime EndTime, DateTime StateUpdateTime, string WinLotteryNumber, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_IsuseUpdate", ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("IsuseName", SqlDbType.VarChar, 0, ParameterDirection.Input, IsuseName),
                new MSSQL.Parameter("State", SqlDbType.SmallInt, 0, ParameterDirection.Input, State),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("StateUpdateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StateUpdateTime),
                new MSSQL.Parameter("WinLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, WinLotteryNumber),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_IsuseUpdate(string ConnectionString, ref DataSet ds, int LotteryID, string IsuseName, short State, DateTime StartTime, DateTime EndTime, DateTime StateUpdateTime, string WinLotteryNumber, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_IsuseUpdate", ref ds, ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("IsuseName", SqlDbType.VarChar, 0, ParameterDirection.Input, IsuseName),
                new MSSQL.Parameter("State", SqlDbType.SmallInt, 0, ParameterDirection.Input, State),
                new MSSQL.Parameter("StartTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StartTime),
                new MSSQL.Parameter("EndTime", SqlDbType.DateTime, 0, ParameterDirection.Input, EndTime),
                new MSSQL.Parameter("StateUpdateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StateUpdateTime),
                new MSSQL.Parameter("WinLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, WinLotteryNumber),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_JoinScheme(string ConnectionString, long SiteID, long UserID, long SchemeID, int Share, bool isAutoFollowScheme, int FromClient, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_JoinScheme", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("Share", SqlDbType.Int, 0, ParameterDirection.Input, Share),
                new MSSQL.Parameter("isAutoFollowScheme", SqlDbType.Bit, 0, ParameterDirection.Input, isAutoFollowScheme),
                new MSSQL.Parameter("FromClient", SqlDbType.Int, 0, ParameterDirection.Input, FromClient),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_JoinScheme(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long SchemeID, int Share, bool isAutoFollowScheme, int FromClient, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_JoinScheme", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("Share", SqlDbType.Int, 0, ParameterDirection.Input, Share),
                new MSSQL.Parameter("isAutoFollowScheme", SqlDbType.Bit, 0, ParameterDirection.Input, isAutoFollowScheme),
                new MSSQL.Parameter("FromClient", SqlDbType.Int, 0, ParameterDirection.Input, FromClient),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Jqsdg(string ConnectionString, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double in0, double in1, double in2, double in3, double in4, double in5, double in6, double in7, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Jqsdg", ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("in0", SqlDbType.Float, 0, ParameterDirection.Input, in0),
                new MSSQL.Parameter("in1", SqlDbType.Float, 0, ParameterDirection.Input, in1),
                new MSSQL.Parameter("in2", SqlDbType.Float, 0, ParameterDirection.Input, in2),
                new MSSQL.Parameter("in3", SqlDbType.Float, 0, ParameterDirection.Input, in3),
                new MSSQL.Parameter("in4", SqlDbType.Float, 0, ParameterDirection.Input, in4),
                new MSSQL.Parameter("in5", SqlDbType.Float, 0, ParameterDirection.Input, in5),
                new MSSQL.Parameter("in6", SqlDbType.Float, 0, ParameterDirection.Input, in6),
                new MSSQL.Parameter("in7", SqlDbType.Float, 0, ParameterDirection.Input, in7),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Jqsdg(string ConnectionString, ref DataSet ds, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double in0, double in1, double in2, double in3, double in4, double in5, double in6, double in7, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Jqsdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("in0", SqlDbType.Float, 0, ParameterDirection.Input, in0),
                new MSSQL.Parameter("in1", SqlDbType.Float, 0, ParameterDirection.Input, in1),
                new MSSQL.Parameter("in2", SqlDbType.Float, 0, ParameterDirection.Input, in2),
                new MSSQL.Parameter("in3", SqlDbType.Float, 0, ParameterDirection.Input, in3),
                new MSSQL.Parameter("in4", SqlDbType.Float, 0, ParameterDirection.Input, in4),
                new MSSQL.Parameter("in5", SqlDbType.Float, 0, ParameterDirection.Input, in5),
                new MSSQL.Parameter("in6", SqlDbType.Float, 0, ParameterDirection.Input, in6),
                new MSSQL.Parameter("in7", SqlDbType.Float, 0, ParameterDirection.Input, in7),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Jqsgg(string ConnectionString, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double in0, double in1, double in2, double in3, double in4, double in5, double in6, double in7, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Jqsgg", ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("in0", SqlDbType.Float, 0, ParameterDirection.Input, in0),
                new MSSQL.Parameter("in1", SqlDbType.Float, 0, ParameterDirection.Input, in1),
                new MSSQL.Parameter("in2", SqlDbType.Float, 0, ParameterDirection.Input, in2),
                new MSSQL.Parameter("in3", SqlDbType.Float, 0, ParameterDirection.Input, in3),
                new MSSQL.Parameter("in4", SqlDbType.Float, 0, ParameterDirection.Input, in4),
                new MSSQL.Parameter("in5", SqlDbType.Float, 0, ParameterDirection.Input, in5),
                new MSSQL.Parameter("in6", SqlDbType.Float, 0, ParameterDirection.Input, in6),
                new MSSQL.Parameter("in7", SqlDbType.Float, 0, ParameterDirection.Input, in7),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Jqsgg(string ConnectionString, ref DataSet ds, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime, double in0, double in1, double in2, double in3, double in4, double in5, double in6, double in7, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Jqsgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("in0", SqlDbType.Float, 0, ParameterDirection.Input, in0),
                new MSSQL.Parameter("in1", SqlDbType.Float, 0, ParameterDirection.Input, in1),
                new MSSQL.Parameter("in2", SqlDbType.Float, 0, ParameterDirection.Input, in2),
                new MSSQL.Parameter("in3", SqlDbType.Float, 0, ParameterDirection.Input, in3),
                new MSSQL.Parameter("in4", SqlDbType.Float, 0, ParameterDirection.Input, in4),
                new MSSQL.Parameter("in5", SqlDbType.Float, 0, ParameterDirection.Input, in5),
                new MSSQL.Parameter("in6", SqlDbType.Float, 0, ParameterDirection.Input, in6),
                new MSSQL.Parameter("in7", SqlDbType.Float, 0, ParameterDirection.Input, in7),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LeaveSchemeChatRoom(string ConnectionString, long SiteID, long UserID, long SchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_LeaveSchemeChatRoom", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LeaveSchemeChatRoom(string ConnectionString, ref DataSet ds, long SiteID, long UserID, long SchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_LeaveSchemeChatRoom", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Login(string ConnectionString, long SiteID, string Name, string InputPassword, string LoginIP, ref long UserID, ref string PasswordAdv, ref string RealityName, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string AlipayID, ref string AlipayName, ref bool isAlipayNameValided, ref double Bonus, ref double Reward, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Login", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("InputPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, InputPassword),
                new MSSQL.Parameter("LoginIP", SqlDbType.VarChar, 0, ParameterDirection.Input, LoginIP),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Login(string ConnectionString, ref DataSet ds, long SiteID, string Name, string InputPassword, string LoginIP, ref long UserID, ref string PasswordAdv, ref string RealityName, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string AlipayID, ref string AlipayName, ref bool isAlipayNameValided, ref double Bonus, ref double Reward, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Login", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("InputPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, InputPassword),
                new MSSQL.Parameter("LoginIP", SqlDbType.VarChar, 0, ParameterDirection.Input, LoginIP),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LoginAdmin(string ConnectionString, long SiteID, string Name, string InputPassword, string LoginIP, ref long UserID, ref string PasswordAdv, ref string RealityName, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string AlipayID, ref string AlipayName, ref bool isAlipayNameValided, ref double Bonus, ref double Reward, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_LoginAdmin", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("InputPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, InputPassword),
                new MSSQL.Parameter("LoginIP", SqlDbType.VarChar, 0, ParameterDirection.Input, LoginIP),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LoginAdmin(string ConnectionString, ref DataSet ds, long SiteID, string Name, string InputPassword, string LoginIP, ref long UserID, ref string PasswordAdv, ref string RealityName, ref int CityID, ref string Sex, ref DateTime BirthDay, ref string IDCardNumber, ref string Address, ref string Email, ref bool isEmailValided, ref string QQ, ref bool isQQValided, ref string Telephone, ref string Mobile, ref bool isMobileValided, ref bool isPrivacy, ref bool isCanLogin, ref DateTime RegisterTime, ref DateTime LastLoginTime, ref string LastLoginIP, ref int LoginCount, ref short UserType, ref short BankType, ref string BankName, ref string BankCardNumber, ref double Balance, ref double Freeze, ref double ScoringOfSelfBuy, ref double ScoringOfCommendBuy, ref double Scoring, ref short Level, ref long CommenderID, ref long CpsID, ref string AlipayID, ref string AlipayName, ref bool isAlipayNameValided, ref double Bonus, ref double Reward, ref string Memo, ref double BonusThisMonth, ref double BonusAllow, ref double BonusUse, ref double PromotionMemberBonusScale, ref double PromotionSiteBonusScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_LoginAdmin", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("InputPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, InputPassword),
                new MSSQL.Parameter("LoginIP", SqlDbType.VarChar, 0, ParameterDirection.Input, LoginIP),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 32, ParameterDirection.Output, PasswordAdv),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 50, ParameterDirection.Output, RealityName),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 4, ParameterDirection.Output, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 2, ParameterDirection.Output, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 8, ParameterDirection.Output, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 50, ParameterDirection.Output, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 50, ParameterDirection.Output, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 1, ParameterDirection.Output, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 50, ParameterDirection.Output, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 1, ParameterDirection.Output, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 50, ParameterDirection.Output, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 50, ParameterDirection.Output, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 1, ParameterDirection.Output, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 1, ParameterDirection.Output, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 1, ParameterDirection.Output, isCanLogin),
                new MSSQL.Parameter("RegisterTime", SqlDbType.DateTime, 8, ParameterDirection.Output, RegisterTime),
                new MSSQL.Parameter("LastLoginTime", SqlDbType.DateTime, 8, ParameterDirection.Output, LastLoginTime),
                new MSSQL.Parameter("LastLoginIP", SqlDbType.VarChar, 50, ParameterDirection.Output, LastLoginIP),
                new MSSQL.Parameter("LoginCount", SqlDbType.Int, 4, ParameterDirection.Output, LoginCount),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 2, ParameterDirection.Output, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 2, ParameterDirection.Output, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 50, ParameterDirection.Output, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 50, ParameterDirection.Output, BankCardNumber),
                new MSSQL.Parameter("Balance", SqlDbType.Money, 8, ParameterDirection.Output, Balance),
                new MSSQL.Parameter("Freeze", SqlDbType.Money, 8, ParameterDirection.Output, Freeze),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 8, ParameterDirection.Output, ScoringOfCommendBuy),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 8, ParameterDirection.Output, Scoring),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 2, ParameterDirection.Output, Level),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 8, ParameterDirection.Output, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 8, ParameterDirection.Output, CpsID),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 32, ParameterDirection.Output, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 50, ParameterDirection.Output, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 1, ParameterDirection.Output, isAlipayNameValided),
                new MSSQL.Parameter("Bonus", SqlDbType.Money, 8, ParameterDirection.Output, Bonus),
                new MSSQL.Parameter("Reward", SqlDbType.Money, 8, ParameterDirection.Output, Reward),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 50, ParameterDirection.Output, Memo),
                new MSSQL.Parameter("BonusThisMonth", SqlDbType.Money, 8, ParameterDirection.Output, BonusThisMonth),
                new MSSQL.Parameter("BonusAllow", SqlDbType.Money, 8, ParameterDirection.Output, BonusAllow),
                new MSSQL.Parameter("BonusUse", SqlDbType.Money, 8, ParameterDirection.Output, BonusUse),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 8, ParameterDirection.Output, PromotionSiteBonusScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                PasswordAdv = System.Convert.ToString(Outputs["PasswordAdv"]);
            }
            catch { }

            try
            {
                RealityName = System.Convert.ToString(Outputs["RealityName"]);
            }
            catch { }

            try
            {
                CityID = System.Convert.ToInt32(Outputs["CityID"]);
            }
            catch { }

            try
            {
                Sex = System.Convert.ToString(Outputs["Sex"]);
            }
            catch { }

            try
            {
                BirthDay = System.Convert.ToDateTime(Outputs["BirthDay"]);
            }
            catch { }

            try
            {
                IDCardNumber = System.Convert.ToString(Outputs["IDCardNumber"]);
            }
            catch { }

            try
            {
                Address = System.Convert.ToString(Outputs["Address"]);
            }
            catch { }

            try
            {
                Email = System.Convert.ToString(Outputs["Email"]);
            }
            catch { }

            try
            {
                isEmailValided = System.Convert.ToBoolean(Outputs["isEmailValided"]);
            }
            catch { }

            try
            {
                QQ = System.Convert.ToString(Outputs["QQ"]);
            }
            catch { }

            try
            {
                isQQValided = System.Convert.ToBoolean(Outputs["isQQValided"]);
            }
            catch { }

            try
            {
                Telephone = System.Convert.ToString(Outputs["Telephone"]);
            }
            catch { }

            try
            {
                Mobile = System.Convert.ToString(Outputs["Mobile"]);
            }
            catch { }

            try
            {
                isMobileValided = System.Convert.ToBoolean(Outputs["isMobileValided"]);
            }
            catch { }

            try
            {
                isPrivacy = System.Convert.ToBoolean(Outputs["isPrivacy"]);
            }
            catch { }

            try
            {
                isCanLogin = System.Convert.ToBoolean(Outputs["isCanLogin"]);
            }
            catch { }

            try
            {
                RegisterTime = System.Convert.ToDateTime(Outputs["RegisterTime"]);
            }
            catch { }

            try
            {
                LastLoginTime = System.Convert.ToDateTime(Outputs["LastLoginTime"]);
            }
            catch { }

            try
            {
                LastLoginIP = System.Convert.ToString(Outputs["LastLoginIP"]);
            }
            catch { }

            try
            {
                LoginCount = System.Convert.ToInt32(Outputs["LoginCount"]);
            }
            catch { }

            try
            {
                UserType = System.Convert.ToInt16(Outputs["UserType"]);
            }
            catch { }

            try
            {
                BankType = System.Convert.ToInt16(Outputs["BankType"]);
            }
            catch { }

            try
            {
                BankName = System.Convert.ToString(Outputs["BankName"]);
            }
            catch { }

            try
            {
                BankCardNumber = System.Convert.ToString(Outputs["BankCardNumber"]);
            }
            catch { }

            try
            {
                Balance = System.Convert.ToDouble(Outputs["Balance"]);
            }
            catch { }

            try
            {
                Freeze = System.Convert.ToDouble(Outputs["Freeze"]);
            }
            catch { }

            try
            {
                ScoringOfSelfBuy = System.Convert.ToDouble(Outputs["ScoringOfSelfBuy"]);
            }
            catch { }

            try
            {
                ScoringOfCommendBuy = System.Convert.ToDouble(Outputs["ScoringOfCommendBuy"]);
            }
            catch { }

            try
            {
                Scoring = System.Convert.ToDouble(Outputs["Scoring"]);
            }
            catch { }

            try
            {
                Level = System.Convert.ToInt16(Outputs["Level"]);
            }
            catch { }

            try
            {
                CommenderID = System.Convert.ToInt64(Outputs["CommenderID"]);
            }
            catch { }

            try
            {
                CpsID = System.Convert.ToInt64(Outputs["CpsID"]);
            }
            catch { }

            try
            {
                AlipayID = System.Convert.ToString(Outputs["AlipayID"]);
            }
            catch { }

            try
            {
                AlipayName = System.Convert.ToString(Outputs["AlipayName"]);
            }
            catch { }

            try
            {
                isAlipayNameValided = System.Convert.ToBoolean(Outputs["isAlipayNameValided"]);
            }
            catch { }

            try
            {
                Bonus = System.Convert.ToDouble(Outputs["Bonus"]);
            }
            catch { }

            try
            {
                Reward = System.Convert.ToDouble(Outputs["Reward"]);
            }
            catch { }

            try
            {
                Memo = System.Convert.ToString(Outputs["Memo"]);
            }
            catch { }

            try
            {
                BonusThisMonth = System.Convert.ToDouble(Outputs["BonusThisMonth"]);
            }
            catch { }

            try
            {
                BonusAllow = System.Convert.ToDouble(Outputs["BonusAllow"]);
            }
            catch { }

            try
            {
                BonusUse = System.Convert.ToDouble(Outputs["BonusUse"]);
            }
            catch { }

            try
            {
                PromotionMemberBonusScale = System.Convert.ToDouble(Outputs["PromotionMemberBonusScale"]);
            }
            catch { }

            try
            {
                PromotionSiteBonusScale = System.Convert.ToDouble(Outputs["PromotionSiteBonusScale"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LotteryToolLinkAdd(string ConnectionString, long SiteID, int LotteryID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref long NewLotteryToolLinkID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_LotteryToolLinkAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewLotteryToolLinkID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewLotteryToolLinkID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewLotteryToolLinkID = System.Convert.ToInt64(Outputs["NewLotteryToolLinkID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LotteryToolLinkAdd(string ConnectionString, ref DataSet ds, long SiteID, int LotteryID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref long NewLotteryToolLinkID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_LotteryToolLinkAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewLotteryToolLinkID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewLotteryToolLinkID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewLotteryToolLinkID = System.Convert.ToInt64(Outputs["NewLotteryToolLinkID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LotteryToolLinkDelete(string ConnectionString, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_LotteryToolLinkDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LotteryToolLinkDelete(string ConnectionString, ref DataSet ds, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_LotteryToolLinkDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LotteryToolLinkEdit(string ConnectionString, long SiteID, long ID, int LotteryID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_LotteryToolLinkEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_LotteryToolLinkEdit(string ConnectionString, ref DataSet ds, long SiteID, long ID, int LotteryID, string LinkName, string LogoUrl, string Url, int Order, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_LotteryToolLinkEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("LinkName", SqlDbType.VarChar, 0, ParameterDirection.Input, LinkName),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Url", SqlDbType.VarChar, 0, ParameterDirection.Input, Url),
                new MSSQL.Parameter("Order", SqlDbType.Int, 0, ParameterDirection.Input, Order),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MarketOutlookAdd(string ConnectionString, DateTime DateTime, string Title, string Content, bool isShow, ref long NewMarketOutlookID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_MarketOutlookAdd", ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewMarketOutlookID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewMarketOutlookID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewMarketOutlookID = System.Convert.ToInt64(Outputs["NewMarketOutlookID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MarketOutlookAdd(string ConnectionString, ref DataSet ds, DateTime DateTime, string Title, string Content, bool isShow, ref long NewMarketOutlookID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_MarketOutlookAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewMarketOutlookID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewMarketOutlookID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewMarketOutlookID = System.Convert.ToInt64(Outputs["NewMarketOutlookID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MarketOutlookDelete(string ConnectionString, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_MarketOutlookDelete", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MarketOutlookDelete(string ConnectionString, ref DataSet ds, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_MarketOutlookDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MarketOutlookEdit(string ConnectionString, long ID, DateTime DateTime, string Title, string Content, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_MarketOutlookEdit", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MarketOutlookEdit(string ConnectionString, ref DataSet ds, long ID, DateTime DateTime, string Title, string Content, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_MarketOutlookEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MatchBasketReceive(string ConnectionString, string Mainteam, string guestteam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellingTime)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_MatchBasketReceive", ref Outputs,
                new MSSQL.Parameter("Mainteam", SqlDbType.VarChar, 0, ParameterDirection.Input, Mainteam),
                new MSSQL.Parameter("guestteam", SqlDbType.VarChar, 0, ParameterDirection.Input, guestteam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellingTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellingTime)
                );

            return CallResult;
        }

        public static int P_MatchBasketReceive(string ConnectionString, ref DataSet ds, string Mainteam, string guestteam, string MatchNumber, string Game, DateTime MatchDate, DateTime StopSellingTime)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_MatchBasketReceive", ref ds, ref Outputs,
                new MSSQL.Parameter("Mainteam", SqlDbType.VarChar, 0, ParameterDirection.Input, Mainteam),
                new MSSQL.Parameter("guestteam", SqlDbType.VarChar, 0, ParameterDirection.Input, guestteam),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellingTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellingTime)
                );

            return CallResult;
        }

        public static int P_MatchReceive(string ConnectionString, string MatchNumber, string Game, string Mainteam, string GuestTeam, DateTime MatchDate, DateTime StopSellingTime, ref int ReturnValut, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_MatchReceive", ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.NVarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.NVarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("Mainteam", SqlDbType.NVarChar, 0, ParameterDirection.Input, Mainteam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.NVarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellingTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellingTime),
                new MSSQL.Parameter("ReturnValut", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValut),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValut = System.Convert.ToInt32(Outputs["ReturnValut"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MatchReceive(string ConnectionString, ref DataSet ds, string MatchNumber, string Game, string Mainteam, string GuestTeam, DateTime MatchDate, DateTime StopSellingTime, ref int ReturnValut, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_MatchReceive", ref ds, ref Outputs,
                new MSSQL.Parameter("MatchNumber", SqlDbType.NVarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.NVarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("Mainteam", SqlDbType.NVarChar, 0, ParameterDirection.Input, Mainteam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.NVarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("StopSellingTime", SqlDbType.DateTime, 0, ParameterDirection.Input, StopSellingTime),
                new MSSQL.Parameter("ReturnValut", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValut),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValut = System.Convert.ToInt32(Outputs["ReturnValut"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MergeUserDetails(string ConnectionString, string CallPassword, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_MergeUserDetails", ref Outputs,
                new MSSQL.Parameter("CallPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, CallPassword),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_MergeUserDetails(string ConnectionString, ref DataSet ds, string CallPassword, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_MergeUserDetails", ref ds, ref Outputs,
                new MSSQL.Parameter("CallPassword", SqlDbType.VarChar, 0, ParameterDirection.Input, CallPassword),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsAdd(string ConnectionString, long SiteID, int TypeID, DateTime DateTime, string Title, string Content, string ImageUrl, bool isShow, bool isHasImage, bool isCanComments, bool isCommend, bool isHot, long ReadCount, ref long NewsID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_NewsAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("TypeID", SqlDbType.Int, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isHasImage", SqlDbType.Bit, 0, ParameterDirection.Input, isHasImage),
                new MSSQL.Parameter("isCanComments", SqlDbType.Bit, 0, ParameterDirection.Input, isCanComments),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("ReadCount", SqlDbType.BigInt, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("NewsID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewsID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewsID = System.Convert.ToInt64(Outputs["NewsID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsAdd(string ConnectionString, ref DataSet ds, long SiteID, int TypeID, DateTime DateTime, string Title, string Content, string ImageUrl, bool isShow, bool isHasImage, bool isCanComments, bool isCommend, bool isHot, long ReadCount, ref long NewsID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_NewsAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("TypeID", SqlDbType.Int, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isHasImage", SqlDbType.Bit, 0, ParameterDirection.Input, isHasImage),
                new MSSQL.Parameter("isCanComments", SqlDbType.Bit, 0, ParameterDirection.Input, isCanComments),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("ReadCount", SqlDbType.BigInt, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("NewsID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewsID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewsID = System.Convert.ToInt64(Outputs["NewsID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsAddComments(string ConnectionString, long SiteID, long NewsID, DateTime DateTime, long CommentserID, string CommentserName, string Content, bool isShow, ref long NewNewsCommentsID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_NewsAddComments", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("NewsID", SqlDbType.BigInt, 0, ParameterDirection.Input, NewsID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("CommentserID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommentserID),
                new MSSQL.Parameter("CommentserName", SqlDbType.VarChar, 0, ParameterDirection.Input, CommentserName),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewNewsCommentsID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewNewsCommentsID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewNewsCommentsID = System.Convert.ToInt64(Outputs["NewNewsCommentsID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsAddComments(string ConnectionString, ref DataSet ds, long SiteID, long NewsID, DateTime DateTime, long CommentserID, string CommentserName, string Content, bool isShow, ref long NewNewsCommentsID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_NewsAddComments", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("NewsID", SqlDbType.BigInt, 0, ParameterDirection.Input, NewsID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("CommentserID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommentserID),
                new MSSQL.Parameter("CommentserName", SqlDbType.VarChar, 0, ParameterDirection.Input, CommentserName),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewNewsCommentsID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewNewsCommentsID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewNewsCommentsID = System.Convert.ToInt64(Outputs["NewNewsCommentsID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsDelete(string ConnectionString, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_NewsDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsDelete(string ConnectionString, ref DataSet ds, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_NewsDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsEdit(string ConnectionString, long SiteID, long ID, int TypeID, DateTime DateTime, string Title, string Content, string ImageUrl, bool isShow, bool isHasImage, bool isCanComments, bool isCommend, bool isHot, long ReadCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_NewsEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("TypeID", SqlDbType.Int, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isHasImage", SqlDbType.Bit, 0, ParameterDirection.Input, isHasImage),
                new MSSQL.Parameter("isCanComments", SqlDbType.Bit, 0, ParameterDirection.Input, isCanComments),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("ReadCount", SqlDbType.BigInt, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsEdit(string ConnectionString, ref DataSet ds, long SiteID, long ID, int TypeID, DateTime DateTime, string Title, string Content, string ImageUrl, bool isShow, bool isHasImage, bool isCanComments, bool isCommend, bool isHot, long ReadCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_NewsEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("TypeID", SqlDbType.Int, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isHasImage", SqlDbType.Bit, 0, ParameterDirection.Input, isHasImage),
                new MSSQL.Parameter("isCanComments", SqlDbType.Bit, 0, ParameterDirection.Input, isCanComments),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("ReadCount", SqlDbType.BigInt, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsRead(string ConnectionString, long SiteID, long NewsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_NewsRead", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("NewsID", SqlDbType.BigInt, 0, ParameterDirection.Input, NewsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_NewsRead(string ConnectionString, ref DataSet ds, long SiteID, long NewsID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_NewsRead", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("NewsID", SqlDbType.BigInt, 0, ParameterDirection.Input, NewsID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Pager(string ConnectionString, int PageIndex, int PageSize, int DoCount, string GetFields, string tblName, string strOrder, string strWhere, string KeyId, ref int TotalRowCount, ref int PageCount)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Pager", ref Outputs,
                new MSSQL.Parameter("PageIndex", SqlDbType.Int, 0, ParameterDirection.Input, PageIndex),
                new MSSQL.Parameter("PageSize", SqlDbType.Int, 0, ParameterDirection.Input, PageSize),
                new MSSQL.Parameter("DoCount", SqlDbType.Int, 0, ParameterDirection.Input, DoCount),
                new MSSQL.Parameter("GetFields", SqlDbType.VarChar, 0, ParameterDirection.Input, GetFields),
                new MSSQL.Parameter("tblName", SqlDbType.VarChar, 0, ParameterDirection.Input, tblName),
                new MSSQL.Parameter("strOrder", SqlDbType.VarChar, 0, ParameterDirection.Input, strOrder),
                new MSSQL.Parameter("strWhere", SqlDbType.VarChar, 0, ParameterDirection.Input, strWhere),
                new MSSQL.Parameter("KeyId", SqlDbType.VarChar, 0, ParameterDirection.Input, KeyId),
                new MSSQL.Parameter("TotalRowCount", SqlDbType.Int, 4, ParameterDirection.Output, TotalRowCount),
                new MSSQL.Parameter("PageCount", SqlDbType.Int, 4, ParameterDirection.Output, PageCount)
                );

            try
            {
                TotalRowCount = System.Convert.ToInt32(Outputs["TotalRowCount"]);
            }
            catch { }

            try
            {
                PageCount = System.Convert.ToInt32(Outputs["PageCount"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Pager(string ConnectionString, ref DataSet ds, int PageIndex, int PageSize, int DoCount, string GetFields, string tblName, string strOrder, string strWhere, string KeyId, ref int TotalRowCount, ref int PageCount)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Pager", ref ds, ref Outputs,
                new MSSQL.Parameter("PageIndex", SqlDbType.Int, 0, ParameterDirection.Input, PageIndex),
                new MSSQL.Parameter("PageSize", SqlDbType.Int, 0, ParameterDirection.Input, PageSize),
                new MSSQL.Parameter("DoCount", SqlDbType.Int, 0, ParameterDirection.Input, DoCount),
                new MSSQL.Parameter("GetFields", SqlDbType.VarChar, 0, ParameterDirection.Input, GetFields),
                new MSSQL.Parameter("tblName", SqlDbType.VarChar, 0, ParameterDirection.Input, tblName),
                new MSSQL.Parameter("strOrder", SqlDbType.VarChar, 0, ParameterDirection.Input, strOrder),
                new MSSQL.Parameter("strWhere", SqlDbType.VarChar, 0, ParameterDirection.Input, strWhere),
                new MSSQL.Parameter("KeyId", SqlDbType.VarChar, 0, ParameterDirection.Input, KeyId),
                new MSSQL.Parameter("TotalRowCount", SqlDbType.Int, 4, ParameterDirection.Output, TotalRowCount),
                new MSSQL.Parameter("PageCount", SqlDbType.Int, 4, ParameterDirection.Output, PageCount)
                );

            try
            {
                TotalRowCount = System.Convert.ToInt32(Outputs["TotalRowCount"]);
            }
            catch { }

            try
            {
                PageCount = System.Convert.ToInt32(Outputs["PageCount"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PassRateBasketAdd(string ConnectionString, string Day, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_PassRateBasketAdd", ref Outputs,
                new MSSQL.Parameter("Day", SqlDbType.VarChar, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime)
                );

            return CallResult;
        }

        public static int P_PassRateBasketAdd(string ConnectionString, ref DataSet ds, string Day, string MatchNumber, string Game, string MainTeam, string GuestTeam, DateTime MatchDate, DateTime stopselltime)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_PassRateBasketAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("Day", SqlDbType.VarChar, 0, ParameterDirection.Input, Day),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime)
                );

            return CallResult;
        }

        public static int P_PoliciesAndRegulationAdd(string ConnectionString, DateTime DateTime, string Title, string Content, bool isShow, ref long NewPoliciesAndRegulationID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_PoliciesAndRegulationAdd", ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewPoliciesAndRegulationID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewPoliciesAndRegulationID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewPoliciesAndRegulationID = System.Convert.ToInt64(Outputs["NewPoliciesAndRegulationID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PoliciesAndRegulationAdd(string ConnectionString, ref DataSet ds, DateTime DateTime, string Title, string Content, bool isShow, ref long NewPoliciesAndRegulationID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_PoliciesAndRegulationAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("NewPoliciesAndRegulationID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewPoliciesAndRegulationID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewPoliciesAndRegulationID = System.Convert.ToInt64(Outputs["NewPoliciesAndRegulationID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PoliciesAndRegulationDelete(string ConnectionString, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_PoliciesAndRegulationDelete", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PoliciesAndRegulationDelete(string ConnectionString, ref DataSet ds, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_PoliciesAndRegulationDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PoliciesAndRegulationEdit(string ConnectionString, long ID, DateTime DateTime, string Title, string Content, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_PoliciesAndRegulationEdit", ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PoliciesAndRegulationEdit(string ConnectionString, ref DataSet ds, long ID, DateTime DateTime, string Title, string Content, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_PoliciesAndRegulationEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PopUserBonus(string ConnectionString, long Id, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_PopUserBonus", ref Outputs,
                new MSSQL.Parameter("Id", SqlDbType.BigInt, 0, ParameterDirection.Input, Id),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_PopUserBonus(string ConnectionString, ref DataSet ds, long Id, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_PopUserBonus", ref ds, ref Outputs,
                new MSSQL.Parameter("Id", SqlDbType.BigInt, 0, ParameterDirection.Input, Id),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Quash(string ConnectionString, long SiteID, long BuyDetailID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Quash", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("BuyDetailID", SqlDbType.BigInt, 0, ParameterDirection.Input, BuyDetailID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Quash(string ConnectionString, ref DataSet ds, long SiteID, long BuyDetailID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Quash", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("BuyDetailID", SqlDbType.BigInt, 0, ParameterDirection.Input, BuyDetailID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashChaseTask(string ConnectionString, long SiteID, long ChaseTaskID, bool isSystemQuash, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuashChaseTask", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ChaseTaskID", SqlDbType.BigInt, 0, ParameterDirection.Input, ChaseTaskID),
                new MSSQL.Parameter("isSystemQuash", SqlDbType.Bit, 0, ParameterDirection.Input, isSystemQuash),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashChaseTask(string ConnectionString, ref DataSet ds, long SiteID, long ChaseTaskID, bool isSystemQuash, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuashChaseTask", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ChaseTaskID", SqlDbType.BigInt, 0, ParameterDirection.Input, ChaseTaskID),
                new MSSQL.Parameter("isSystemQuash", SqlDbType.Bit, 0, ParameterDirection.Input, isSystemQuash),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashChaseTaskDetail(string ConnectionString, long SiteID, long ChaseTaskDetailID, bool isSystemQuash, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuashChaseTaskDetail", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ChaseTaskDetailID", SqlDbType.BigInt, 0, ParameterDirection.Input, ChaseTaskDetailID),
                new MSSQL.Parameter("isSystemQuash", SqlDbType.Bit, 0, ParameterDirection.Input, isSystemQuash),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashChaseTaskDetail(string ConnectionString, ref DataSet ds, long SiteID, long ChaseTaskDetailID, bool isSystemQuash, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuashChaseTaskDetail", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ChaseTaskDetailID", SqlDbType.BigInt, 0, ParameterDirection.Input, ChaseTaskDetailID),
                new MSSQL.Parameter("isSystemQuash", SqlDbType.Bit, 0, ParameterDirection.Input, isSystemQuash),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashScheme(string ConnectionString, long SiteID, long SchemeID, bool isSystemQuash, bool isRelation, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuashScheme", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("isSystemQuash", SqlDbType.Bit, 0, ParameterDirection.Input, isSystemQuash),
                new MSSQL.Parameter("isRelation", SqlDbType.Bit, 0, ParameterDirection.Input, isRelation),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashScheme(string ConnectionString, ref DataSet ds, long SiteID, long SchemeID, bool isSystemQuash, bool isRelation, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuashScheme", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("isSystemQuash", SqlDbType.Bit, 0, ParameterDirection.Input, isSystemQuash),
                new MSSQL.Parameter("isRelation", SqlDbType.Bit, 0, ParameterDirection.Input, isRelation),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashSchemeNoLotteryNumber(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuashSchemeNoLotteryNumber", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashSchemeNoLotteryNumber(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuashSchemeNoLotteryNumber", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuashTheUnusefulGreetingCards(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuashTheUnusefulGreetingCards", ref Outputs);

            return CallResult;
        }

        public static int P_QuashTheUnusefulGreetingCards(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuashTheUnusefulGreetingCards", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_QuestionsAdd(string ConnectionString, long SiteID, long UserID, short TypeID, string Telephone, string Content, ref long NewQuestionID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuestionsAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("TypeID", SqlDbType.SmallInt, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("NewQuestionID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewQuestionID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewQuestionID = System.Convert.ToInt64(Outputs["NewQuestionID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuestionsAdd(string ConnectionString, ref DataSet ds, long SiteID, long UserID, short TypeID, string Telephone, string Content, ref long NewQuestionID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuestionsAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("TypeID", SqlDbType.SmallInt, 0, ParameterDirection.Input, TypeID),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("NewQuestionID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewQuestionID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewQuestionID = System.Convert.ToInt64(Outputs["NewQuestionID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuestionsAnswer(string ConnectionString, long SiteID, long QuestionID, string Answer, long AnswerOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuestionsAnswer", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("QuestionID", SqlDbType.BigInt, 0, ParameterDirection.Input, QuestionID),
                new MSSQL.Parameter("Answer", SqlDbType.VarChar, 0, ParameterDirection.Input, Answer),
                new MSSQL.Parameter("AnswerOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, AnswerOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuestionsAnswer(string ConnectionString, ref DataSet ds, long SiteID, long QuestionID, string Answer, long AnswerOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuestionsAnswer", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("QuestionID", SqlDbType.BigInt, 0, ParameterDirection.Input, QuestionID),
                new MSSQL.Parameter("Answer", SqlDbType.VarChar, 0, ParameterDirection.Input, Answer),
                new MSSQL.Parameter("AnswerOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, AnswerOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuestionsDelete(string ConnectionString, long SiteID, long QuestionID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuestionsDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("QuestionID", SqlDbType.BigInt, 0, ParameterDirection.Input, QuestionID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuestionsDelete(string ConnectionString, ref DataSet ds, long SiteID, long QuestionID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuestionsDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("QuestionID", SqlDbType.BigInt, 0, ParameterDirection.Input, QuestionID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuestionsHandling(string ConnectionString, long SiteID, long QuestionID, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_QuestionsHandling", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("QuestionID", SqlDbType.BigInt, 0, ParameterDirection.Input, QuestionID),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_QuestionsHandling(string ConnectionString, ref DataSet ds, long SiteID, long QuestionID, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_QuestionsHandling", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("QuestionID", SqlDbType.BigInt, 0, ParameterDirection.Input, QuestionID),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_RebonusShares(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_RebonusShares", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_RebonusShares(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_RebonusShares", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_rqspfdg(string ConnectionString, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_rqspfdg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_rqspfdg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_rqspfdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_rqspfgg(string ConnectionString, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_rqspfgg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_rqspfgg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_rqspfgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeAssure(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemeAssure", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeAssure(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemeAssure", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeAssureMoney(string ConnectionString, long SchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemeAssureMoney", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeAssureMoney(string ConnectionString, ref DataSet ds, long SchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemeAssureMoney", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeCalculatedBonus(string ConnectionString, ref bool ReturnBool, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemeCalculatedBonus", ref Outputs,
                new MSSQL.Parameter("ReturnBool", SqlDbType.Bit, 1, ParameterDirection.Output, ReturnBool),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnBool = System.Convert.ToBoolean(Outputs["ReturnBool"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeCalculatedBonus(string ConnectionString, ref DataSet ds, ref bool ReturnBool, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemeCalculatedBonus", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnBool", SqlDbType.Bit, 1, ParameterDirection.Output, ReturnBool),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnBool = System.Convert.ToBoolean(Outputs["ReturnBool"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeCalculatedScore(string ConnectionString, long UserID, double DetailMoney, long SchemeID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemeCalculatedScore", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DetailMoney", SqlDbType.Money, 0, ParameterDirection.Input, DetailMoney),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID)
                );

            return CallResult;
        }

        public static int P_SchemeCalculatedScore(string ConnectionString, ref DataSet ds, long UserID, double DetailMoney, long SchemeID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemeCalculatedScore", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("DetailMoney", SqlDbType.Money, 0, ParameterDirection.Input, DetailMoney),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID)
                );

            return CallResult;
        }

        public static int P_SchemePost(string ConnectionString, int posterid, string poster, int fid, string title, string ip, string message, long schemeid, int typeid, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemePost", ref Outputs,
                new MSSQL.Parameter("posterid", SqlDbType.Int, 0, ParameterDirection.Input, posterid),
                new MSSQL.Parameter("poster", SqlDbType.VarChar, 0, ParameterDirection.Input, poster),
                new MSSQL.Parameter("fid", SqlDbType.Int, 0, ParameterDirection.Input, fid),
                new MSSQL.Parameter("title", SqlDbType.VarChar, 0, ParameterDirection.Input, title),
                new MSSQL.Parameter("ip", SqlDbType.VarChar, 0, ParameterDirection.Input, ip),
                new MSSQL.Parameter("message", SqlDbType.VarChar, 0, ParameterDirection.Input, message),
                new MSSQL.Parameter("schemeid", SqlDbType.BigInt, 0, ParameterDirection.Input, schemeid),
                new MSSQL.Parameter("typeid", SqlDbType.Int, 0, ParameterDirection.Input, typeid),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemePost(string ConnectionString, ref DataSet ds, int posterid, string poster, int fid, string title, string ip, string message, long schemeid, int typeid, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemePost", ref ds, ref Outputs,
                new MSSQL.Parameter("posterid", SqlDbType.Int, 0, ParameterDirection.Input, posterid),
                new MSSQL.Parameter("poster", SqlDbType.VarChar, 0, ParameterDirection.Input, poster),
                new MSSQL.Parameter("fid", SqlDbType.Int, 0, ParameterDirection.Input, fid),
                new MSSQL.Parameter("title", SqlDbType.VarChar, 0, ParameterDirection.Input, title),
                new MSSQL.Parameter("ip", SqlDbType.VarChar, 0, ParameterDirection.Input, ip),
                new MSSQL.Parameter("message", SqlDbType.VarChar, 0, ParameterDirection.Input, message),
                new MSSQL.Parameter("schemeid", SqlDbType.BigInt, 0, ParameterDirection.Input, schemeid),
                new MSSQL.Parameter("typeid", SqlDbType.Int, 0, ParameterDirection.Input, typeid),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemePrintOut(string ConnectionString, long SiteID, long SchemeID, long BuyOperatorID, short PrintOutType, string Identifiers, bool isOt, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemePrintOut", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("BuyOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, BuyOperatorID),
                new MSSQL.Parameter("PrintOutType", SqlDbType.SmallInt, 0, ParameterDirection.Input, PrintOutType),
                new MSSQL.Parameter("Identifiers", SqlDbType.VarChar, 0, ParameterDirection.Input, Identifiers),
                new MSSQL.Parameter("isOt", SqlDbType.Bit, 0, ParameterDirection.Input, isOt),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemePrintOut(string ConnectionString, ref DataSet ds, long SiteID, long SchemeID, long BuyOperatorID, short PrintOutType, string Identifiers, bool isOt, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemePrintOut", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("BuyOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, BuyOperatorID),
                new MSSQL.Parameter("PrintOutType", SqlDbType.SmallInt, 0, ParameterDirection.Input, PrintOutType),
                new MSSQL.Parameter("Identifiers", SqlDbType.VarChar, 0, ParameterDirection.Input, Identifiers),
                new MSSQL.Parameter("isOt", SqlDbType.Bit, 0, ParameterDirection.Input, isOt),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterAdd(string ConnectionString, long SchemeID, int PlayTypeID, string TicketXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemesSendToCenterAdd", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("TicketXML", SqlDbType.NText, 0, ParameterDirection.Input, TicketXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterAdd(string ConnectionString, ref DataSet ds, long SchemeID, int PlayTypeID, string TicketXML, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemesSendToCenterAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("TicketXML", SqlDbType.NText, 0, ParameterDirection.Input, TicketXML),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterAdd_Single(string ConnectionString, long SchemeID, int PlayTypeID, double Money, int Multiple, string Ticket, bool isFirstWrite, ref long ID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemesSendToCenterAdd_Single", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Ticket", SqlDbType.VarChar, 0, ParameterDirection.Input, Ticket),
                new MSSQL.Parameter("isFirstWrite", SqlDbType.Bit, 0, ParameterDirection.Input, isFirstWrite),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 8, ParameterDirection.Output, ID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ID = System.Convert.ToInt64(Outputs["ID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterAdd_Single(string ConnectionString, ref DataSet ds, long SchemeID, int PlayTypeID, double Money, int Multiple, string Ticket, bool isFirstWrite, ref long ID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemesSendToCenterAdd_Single", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Multiple", SqlDbType.Int, 0, ParameterDirection.Input, Multiple),
                new MSSQL.Parameter("Ticket", SqlDbType.VarChar, 0, ParameterDirection.Input, Ticket),
                new MSSQL.Parameter("isFirstWrite", SqlDbType.Bit, 0, ParameterDirection.Input, isFirstWrite),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 8, ParameterDirection.Output, ID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ID = System.Convert.ToInt64(Outputs["ID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterHandle(string ConnectionString, string Identifiers, DateTime DealTime, bool IsSuccess, string Status, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemesSendToCenterHandle", ref Outputs,
                new MSSQL.Parameter("Identifiers", SqlDbType.VarChar, 0, ParameterDirection.Input, Identifiers),
                new MSSQL.Parameter("DealTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("IsSuccess", SqlDbType.Bit, 0, ParameterDirection.Input, IsSuccess),
                new MSSQL.Parameter("Status", SqlDbType.VarChar, 0, ParameterDirection.Input, Status),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterHandle(string ConnectionString, ref DataSet ds, string Identifiers, DateTime DealTime, bool IsSuccess, string Status, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemesSendToCenterHandle", ref ds, ref Outputs,
                new MSSQL.Parameter("Identifiers", SqlDbType.VarChar, 0, ParameterDirection.Input, Identifiers),
                new MSSQL.Parameter("DealTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("IsSuccess", SqlDbType.Bit, 0, ParameterDirection.Input, IsSuccess),
                new MSSQL.Parameter("Status", SqlDbType.VarChar, 0, ParameterDirection.Input, Status),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterHandleUniteAnte(string ConnectionString, long SchemeID, DateTime DealTime, bool isOt, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemesSendToCenterHandleUniteAnte", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("DealTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("isOt", SqlDbType.Bit, 0, ParameterDirection.Input, isOt),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemesSendToCenterHandleUniteAnte(string ConnectionString, ref DataSet ds, long SchemeID, DateTime DealTime, bool isOt, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemesSendToCenterHandleUniteAnte", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("DealTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DealTime),
                new MSSQL.Parameter("isOt", SqlDbType.Bit, 0, ParameterDirection.Input, isOt),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeWinCalculatedScore(string ConnectionString, long SchemeID, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SchemeWinCalculatedScore", ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SchemeWinCalculatedScore(string ConnectionString, ref DataSet ds, long SchemeID, ref int ReturnValue, ref string ReturnDescptrion)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SchemeWinCalculatedScore", ref ds, ref Outputs,
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescptrion", SqlDbType.NVarChar, 200, ParameterDirection.Output, ReturnDescptrion)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescptrion = System.Convert.ToString(Outputs["ReturnDescptrion"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ScoreChange(string ConnectionString, long UserID, long CommoditityID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ScoreChange", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CommoditityID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommoditityID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 50, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ScoreChange(string ConnectionString, ref DataSet ds, long UserID, long CommoditityID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ScoreChange", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CommoditityID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommoditityID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 50, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ScoringExchange(string ConnectionString, long SiteID, long UserID, double Scoring, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ScoringExchange", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 0, ParameterDirection.Input, Scoring),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ScoringExchange(string ConnectionString, ref DataSet ds, long SiteID, long UserID, double Scoring, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ScoringExchange", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Scoring", SqlDbType.Float, 0, ParameterDirection.Input, Scoring),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SelectPaging(string ConnectionString, string TableOrViewName, string FieldList, string OrderFieldList, string Condition, int PageSize, int PageIndex, ref long RowCount, ref int PageCount, ref int CurrentPageIndex, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SelectPaging", ref Outputs,
                new MSSQL.Parameter("TableOrViewName", SqlDbType.VarChar, 0, ParameterDirection.Input, TableOrViewName),
                new MSSQL.Parameter("FieldList", SqlDbType.VarChar, 0, ParameterDirection.Input, FieldList),
                new MSSQL.Parameter("OrderFieldList", SqlDbType.VarChar, 0, ParameterDirection.Input, OrderFieldList),
                new MSSQL.Parameter("Condition", SqlDbType.VarChar, 0, ParameterDirection.Input, Condition),
                new MSSQL.Parameter("PageSize", SqlDbType.Int, 0, ParameterDirection.Input, PageSize),
                new MSSQL.Parameter("PageIndex", SqlDbType.Int, 0, ParameterDirection.Input, PageIndex),
                new MSSQL.Parameter("RowCount", SqlDbType.BigInt, 8, ParameterDirection.Output, RowCount),
                new MSSQL.Parameter("PageCount", SqlDbType.Int, 4, ParameterDirection.Output, PageCount),
                new MSSQL.Parameter("CurrentPageIndex", SqlDbType.Int, 4, ParameterDirection.Output, CurrentPageIndex),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                RowCount = System.Convert.ToInt64(Outputs["RowCount"]);
            }
            catch { }

            try
            {
                PageCount = System.Convert.ToInt32(Outputs["PageCount"]);
            }
            catch { }

            try
            {
                CurrentPageIndex = System.Convert.ToInt32(Outputs["CurrentPageIndex"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SelectPaging(string ConnectionString, ref DataSet ds, string TableOrViewName, string FieldList, string OrderFieldList, string Condition, int PageSize, int PageIndex, ref long RowCount, ref int PageCount, ref int CurrentPageIndex, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SelectPaging", ref ds, ref Outputs,
                new MSSQL.Parameter("TableOrViewName", SqlDbType.VarChar, 0, ParameterDirection.Input, TableOrViewName),
                new MSSQL.Parameter("FieldList", SqlDbType.VarChar, 0, ParameterDirection.Input, FieldList),
                new MSSQL.Parameter("OrderFieldList", SqlDbType.VarChar, 0, ParameterDirection.Input, OrderFieldList),
                new MSSQL.Parameter("Condition", SqlDbType.VarChar, 0, ParameterDirection.Input, Condition),
                new MSSQL.Parameter("PageSize", SqlDbType.Int, 0, ParameterDirection.Input, PageSize),
                new MSSQL.Parameter("PageIndex", SqlDbType.Int, 0, ParameterDirection.Input, PageIndex),
                new MSSQL.Parameter("RowCount", SqlDbType.BigInt, 8, ParameterDirection.Output, RowCount),
                new MSSQL.Parameter("PageCount", SqlDbType.Int, 4, ParameterDirection.Output, PageCount),
                new MSSQL.Parameter("CurrentPageIndex", SqlDbType.Int, 4, ParameterDirection.Output, CurrentPageIndex),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                RowCount = System.Convert.ToInt64(Outputs["RowCount"]);
            }
            catch { }

            try
            {
                PageCount = System.Convert.ToInt32(Outputs["PageCount"]);
            }
            catch { }

            try
            {
                CurrentPageIndex = System.Convert.ToInt32(Outputs["CurrentPageIndex"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetFriendsWinInfo(string ConnectionString, string SnsName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetFriendsWinInfo", ref Outputs,
                new MSSQL.Parameter("SnsName", SqlDbType.VarChar, 0, ParameterDirection.Input, SnsName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetFriendsWinInfo(string ConnectionString, ref DataSet ds, string SnsName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetFriendsWinInfo", ref ds, ref Outputs,
                new MSSQL.Parameter("SnsName", SqlDbType.VarChar, 0, ParameterDirection.Input, SnsName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetMaxMultiple(string ConnectionString, long IsuseID, int PlayTypeID, int MaxMultiple, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetMaxMultiple", ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("MaxMultiple", SqlDbType.Int, 0, ParameterDirection.Input, MaxMultiple),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetMaxMultiple(string ConnectionString, ref DataSet ds, long IsuseID, int PlayTypeID, int MaxMultiple, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetMaxMultiple", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("MaxMultiple", SqlDbType.Int, 0, ParameterDirection.Input, MaxMultiple),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetOptions(string ConnectionString, string Key, string Value)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetOptions", ref Outputs,
                new MSSQL.Parameter("Key", SqlDbType.VarChar, 0, ParameterDirection.Input, Key),
                new MSSQL.Parameter("Value", SqlDbType.VarChar, 0, ParameterDirection.Input, Value)
                );

            return CallResult;
        }

        public static int P_SetOptions(string ConnectionString, ref DataSet ds, string Key, string Value)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetOptions", ref ds, ref Outputs,
                new MSSQL.Parameter("Key", SqlDbType.VarChar, 0, ParameterDirection.Input, Key),
                new MSSQL.Parameter("Value", SqlDbType.VarChar, 0, ParameterDirection.Input, Value)
                );

            return CallResult;
        }

        public static int P_SetSchemeOpenUsers(string ConnectionString, long SiteID, long SchemeID, string UserList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetSchemeOpenUsers", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("UserList", SqlDbType.VarChar, 0, ParameterDirection.Input, UserList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetSchemeOpenUsers(string ConnectionString, ref DataSet ds, long SiteID, long SchemeID, string UserList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetSchemeOpenUsers", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("UserList", SqlDbType.VarChar, 0, ParameterDirection.Input, UserList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetSiteNotificationTemplate(string ConnectionString, long SiteID, short Manner, string NotificationType, string Value)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetSiteNotificationTemplate", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("NotificationType", SqlDbType.VarChar, 0, ParameterDirection.Input, NotificationType),
                new MSSQL.Parameter("Value", SqlDbType.VarChar, 0, ParameterDirection.Input, Value)
                );

            return CallResult;
        }

        public static int P_SetSiteNotificationTemplate(string ConnectionString, ref DataSet ds, long SiteID, short Manner, string NotificationType, string Value)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetSiteNotificationTemplate", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("NotificationType", SqlDbType.VarChar, 0, ParameterDirection.Input, NotificationType),
                new MSSQL.Parameter("Value", SqlDbType.VarChar, 0, ParameterDirection.Input, Value)
                );

            return CallResult;
        }

        public static int P_SetSiteONState(string ConnectionString, long SiteID, bool ON)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetSiteONState", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON)
                );

            return CallResult;
        }

        public static int P_SetSiteONState(string ConnectionString, ref DataSet ds, long SiteID, bool ON)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetSiteONState", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON)
                );

            return CallResult;
        }

        public static int P_SetSiteSendNotificationTypes(string ConnectionString, long SiteID, short Manner, string SendNotificationTypeList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetSiteSendNotificationTypes", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("SendNotificationTypeList", SqlDbType.VarChar, 0, ParameterDirection.Input, SendNotificationTypeList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetSiteSendNotificationTypes(string ConnectionString, ref DataSet ds, long SiteID, short Manner, string SendNotificationTypeList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetSiteSendNotificationTypes", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("SendNotificationTypeList", SqlDbType.VarChar, 0, ParameterDirection.Input, SendNotificationTypeList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetSiteUrls(string ConnectionString, long SiteID, string Urls, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetSiteUrls", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetSiteUrls(string ConnectionString, ref DataSet ds, long SiteID, string Urls, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetSiteUrls", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetUserAcceptNotificationTypes(string ConnectionString, long SiteID, long UserID, short Manner, string AcceptNotificationTypeList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetUserAcceptNotificationTypes", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("AcceptNotificationTypeList", SqlDbType.VarChar, 0, ParameterDirection.Input, AcceptNotificationTypeList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetUserAcceptNotificationTypes(string ConnectionString, ref DataSet ds, long SiteID, long UserID, short Manner, string AcceptNotificationTypeList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetUserAcceptNotificationTypes", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Manner", SqlDbType.SmallInt, 0, ParameterDirection.Input, Manner),
                new MSSQL.Parameter("AcceptNotificationTypeList", SqlDbType.VarChar, 0, ParameterDirection.Input, AcceptNotificationTypeList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetUserCompetences(string ConnectionString, long SiteID, long UserID, string CompetencesList, string GroupsList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SetUserCompetences", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CompetencesList", SqlDbType.VarChar, 0, ParameterDirection.Input, CompetencesList),
                new MSSQL.Parameter("GroupsList", SqlDbType.VarChar, 0, ParameterDirection.Input, GroupsList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SetUserCompetences(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string CompetencesList, string GroupsList, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SetUserCompetences", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("CompetencesList", SqlDbType.VarChar, 0, ParameterDirection.Input, CompetencesList),
                new MSSQL.Parameter("GroupsList", SqlDbType.VarChar, 0, ParameterDirection.Input, GroupsList),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAdd(string ConnectionString, long SiteParentID, long OwnerUserID, string Name, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string ICPCert, short Level, bool ON, double BonusScale, int MaxSubSites, string UseLotteryListRestrictions, string UseLotteryList, string UseLotteryListQuickBuy, string Urls, ref long AdministratorID, ref long SiteID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SiteAdd", ref Outputs,
                new MSSQL.Parameter("SiteParentID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteParentID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 0, ParameterDirection.Input, ICPCert),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 0, ParameterDirection.Input, Level),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 0, ParameterDirection.Input, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("AdministratorID", SqlDbType.BigInt, 8, ParameterDirection.Output, AdministratorID),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 8, ParameterDirection.Output, SiteID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                AdministratorID = System.Convert.ToInt64(Outputs["AdministratorID"]);
            }
            catch { }

            try
            {
                SiteID = System.Convert.ToInt64(Outputs["SiteID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAdd(string ConnectionString, ref DataSet ds, long SiteParentID, long OwnerUserID, string Name, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string ICPCert, short Level, bool ON, double BonusScale, int MaxSubSites, string UseLotteryListRestrictions, string UseLotteryList, string UseLotteryListQuickBuy, string Urls, ref long AdministratorID, ref long SiteID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SiteAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteParentID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteParentID),
                new MSSQL.Parameter("OwnerUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, OwnerUserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 0, ParameterDirection.Input, ICPCert),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 0, ParameterDirection.Input, Level),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 0, ParameterDirection.Input, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("AdministratorID", SqlDbType.BigInt, 8, ParameterDirection.Output, AdministratorID),
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 8, ParameterDirection.Output, SiteID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                AdministratorID = System.Convert.ToInt64(Outputs["AdministratorID"]);
            }
            catch { }

            try
            {
                SiteID = System.Convert.ToInt64(Outputs["SiteID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAfficheAdd(string ConnectionString, long SiteID, DateTime DateTime, string Title, string Content, bool isShow, bool isCommend, ref long NewAfficheID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SiteAfficheAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("NewAfficheID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewAfficheID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewAfficheID = System.Convert.ToInt64(Outputs["NewAfficheID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAfficheAdd(string ConnectionString, ref DataSet ds, long SiteID, DateTime DateTime, string Title, string Content, bool isShow, bool isCommend, ref long NewAfficheID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SiteAfficheAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("NewAfficheID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewAfficheID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewAfficheID = System.Convert.ToInt64(Outputs["NewAfficheID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAfficheDelete(string ConnectionString, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SiteAfficheDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAfficheDelete(string ConnectionString, ref DataSet ds, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SiteAfficheDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAfficheEdit(string ConnectionString, long SiteID, long ID, DateTime DateTime, string Title, string Content, bool isShow, bool isCommend, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SiteAfficheEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteAfficheEdit(string ConnectionString, ref DataSet ds, long SiteID, long ID, DateTime DateTime, string Title, string Content, bool isShow, bool isCommend, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SiteAfficheEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteEdit(string ConnectionString, long SiteID, string Name, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string ICPCert, bool ON, double BonusScale, int MaxSubSites, string UseLotteryListRestrictions, string UseLotteryList, string UseLotteryListQuickBuy, string Urls, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SiteEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 0, ParameterDirection.Input, ICPCert),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 0, ParameterDirection.Input, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SiteEdit(string ConnectionString, ref DataSet ds, long SiteID, string Name, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string ICPCert, bool ON, double BonusScale, int MaxSubSites, string UseLotteryListRestrictions, string UseLotteryList, string UseLotteryListQuickBuy, string Urls, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SiteEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("ICPCert", SqlDbType.VarChar, 0, ParameterDirection.Input, ICPCert),
                new MSSQL.Parameter("ON", SqlDbType.Bit, 0, ParameterDirection.Input, ON),
                new MSSQL.Parameter("BonusScale", SqlDbType.Float, 0, ParameterDirection.Input, BonusScale),
                new MSSQL.Parameter("MaxSubSites", SqlDbType.Int, 0, ParameterDirection.Input, MaxSubSites),
                new MSSQL.Parameter("UseLotteryListRestrictions", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListRestrictions),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryList),
                new MSSQL.Parameter("UseLotteryListQuickBuy", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryListQuickBuy),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SoftDownloadAdd(string ConnectionString, long SiteID, int LotteryID, DateTime DateTime, string Title, string FileUrl, string ImageUrl, string Content, bool isHot, bool isCommend, bool isShow, int ReadCount, ref long NewSoftDownloadID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SoftDownloadAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReadCount", SqlDbType.Int, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("NewSoftDownloadID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewSoftDownloadID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewSoftDownloadID = System.Convert.ToInt64(Outputs["NewSoftDownloadID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SoftDownloadAdd(string ConnectionString, ref DataSet ds, long SiteID, int LotteryID, DateTime DateTime, string Title, string FileUrl, string ImageUrl, string Content, bool isHot, bool isCommend, bool isShow, int ReadCount, ref long NewSoftDownloadID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SoftDownloadAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReadCount", SqlDbType.Int, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("NewSoftDownloadID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewSoftDownloadID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewSoftDownloadID = System.Convert.ToInt64(Outputs["NewSoftDownloadID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SoftDownloadDelete(string ConnectionString, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SoftDownloadDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SoftDownloadDelete(string ConnectionString, ref DataSet ds, long SiteID, long ID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SoftDownloadDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SoftDownloadEdit(string ConnectionString, long SiteID, long ID, int LotteryID, DateTime DateTime, string Title, string FileUrl, string ImageUrl, string Content, bool isHot, bool isCommend, bool isShow, int ReadCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SoftDownloadEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReadCount", SqlDbType.Int, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SoftDownloadEdit(string ConnectionString, ref DataSet ds, long SiteID, long ID, int LotteryID, DateTime DateTime, string Title, string FileUrl, string ImageUrl, string Content, bool isHot, bool isCommend, bool isShow, int ReadCount, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SoftDownloadEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("FileUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, FileUrl),
                new MSSQL.Parameter("ImageUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, ImageUrl),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isHot", SqlDbType.Bit, 0, ParameterDirection.Input, isHot),
                new MSSQL.Parameter("isCommend", SqlDbType.Bit, 0, ParameterDirection.Input, isCommend),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReadCount", SqlDbType.Int, 0, ParameterDirection.Input, ReadCount),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_spfdg(string ConnectionString, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_spfdg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_spfdg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_spfdg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_spfgg(string ConnectionString, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_spfgg", ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_spfgg(string ConnectionString, ref DataSet ds, string MainTeam, string GuestTeam, string Game, string MatchNumber, double win, double flat, double lose, int MainLoseball, DateTime MatchDate, DateTime stopselltime, string EuropeSSP, string EuropePSP, string EuropeFSP, ref int ReturnValue, ref string ReturnDescption)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_spfgg", ref ds, ref Outputs,
                new MSSQL.Parameter("MainTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, MainTeam),
                new MSSQL.Parameter("GuestTeam", SqlDbType.VarChar, 0, ParameterDirection.Input, GuestTeam),
                new MSSQL.Parameter("Game", SqlDbType.VarChar, 0, ParameterDirection.Input, Game),
                new MSSQL.Parameter("MatchNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, MatchNumber),
                new MSSQL.Parameter("win", SqlDbType.Float, 0, ParameterDirection.Input, win),
                new MSSQL.Parameter("flat", SqlDbType.Float, 0, ParameterDirection.Input, flat),
                new MSSQL.Parameter("lose", SqlDbType.Float, 0, ParameterDirection.Input, lose),
                new MSSQL.Parameter("MainLoseball", SqlDbType.Int, 0, ParameterDirection.Input, MainLoseball),
                new MSSQL.Parameter("MatchDate", SqlDbType.DateTime, 0, ParameterDirection.Input, MatchDate),
                new MSSQL.Parameter("stopselltime", SqlDbType.DateTime, 0, ParameterDirection.Input, stopselltime),
                new MSSQL.Parameter("EuropeSSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeSSP),
                new MSSQL.Parameter("EuropePSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropePSP),
                new MSSQL.Parameter("EuropeFSP", SqlDbType.VarChar, 0, ParameterDirection.Input, EuropeFSP),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescption", SqlDbType.NVarChar, 100, ParameterDirection.Output, ReturnDescption)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescption = System.Convert.ToString(Outputs["ReturnDescption"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateNotificationAdd(string ConnectionString, long SiteID, string Title, string Content, bool isShow, ref long SurrogateNotificationID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SurrogateNotificationAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("SurrogateNotificationID", SqlDbType.BigInt, 8, ParameterDirection.Output, SurrogateNotificationID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SurrogateNotificationID = System.Convert.ToInt64(Outputs["SurrogateNotificationID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateNotificationAdd(string ConnectionString, ref DataSet ds, long SiteID, string Title, string Content, bool isShow, ref long SurrogateNotificationID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SurrogateNotificationAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("SurrogateNotificationID", SqlDbType.BigInt, 8, ParameterDirection.Output, SurrogateNotificationID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SurrogateNotificationID = System.Convert.ToInt64(Outputs["SurrogateNotificationID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateNotificationDelete(string ConnectionString, long SiteID, long SurrogateNotificationID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SurrogateNotificationDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SurrogateNotificationID", SqlDbType.BigInt, 0, ParameterDirection.Input, SurrogateNotificationID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateNotificationDelete(string ConnectionString, ref DataSet ds, long SiteID, long SurrogateNotificationID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SurrogateNotificationDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SurrogateNotificationID", SqlDbType.BigInt, 0, ParameterDirection.Input, SurrogateNotificationID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateNotificationEdit(string ConnectionString, long SiteID, long SurrogateNotificationID, string Title, string Content, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SurrogateNotificationEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SurrogateNotificationID", SqlDbType.BigInt, 0, ParameterDirection.Input, SurrogateNotificationID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateNotificationEdit(string ConnectionString, ref DataSet ds, long SiteID, long SurrogateNotificationID, string Title, string Content, bool isShow, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SurrogateNotificationEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SurrogateNotificationID", SqlDbType.BigInt, 0, ParameterDirection.Input, SurrogateNotificationID),
                new MSSQL.Parameter("Title", SqlDbType.VarChar, 0, ParameterDirection.Input, Title),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("isShow", SqlDbType.Bit, 0, ParameterDirection.Input, isShow),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateTry(string ConnectionString, long SiteID, long UserID, string Content, string Name, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string UseLotteryList, string Urls, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SurrogateTry", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryList),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateTry(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string Content, string Name, string LogoUrl, string Company, string Address, string PostCode, string ResponsiblePerson, string ContactPerson, string Telephone, string Fax, string Mobile, string Email, string QQ, string ServiceTelephone, string UseLotteryList, string Urls, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SurrogateTry", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("LogoUrl", SqlDbType.VarChar, 0, ParameterDirection.Input, LogoUrl),
                new MSSQL.Parameter("Company", SqlDbType.VarChar, 0, ParameterDirection.Input, Company),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("PostCode", SqlDbType.VarChar, 0, ParameterDirection.Input, PostCode),
                new MSSQL.Parameter("ResponsiblePerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ResponsiblePerson),
                new MSSQL.Parameter("ContactPerson", SqlDbType.VarChar, 0, ParameterDirection.Input, ContactPerson),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Fax", SqlDbType.VarChar, 0, ParameterDirection.Input, Fax),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ServiceTelephone", SqlDbType.VarChar, 0, ParameterDirection.Input, ServiceTelephone),
                new MSSQL.Parameter("UseLotteryList", SqlDbType.VarChar, 0, ParameterDirection.Input, UseLotteryList),
                new MSSQL.Parameter("Urls", SqlDbType.VarChar, 0, ParameterDirection.Input, Urls),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateTryHandle(string ConnectionString, long SiteID, long TryID, short HandleResult, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SurrogateTryHandle", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("TryID", SqlDbType.BigInt, 0, ParameterDirection.Input, TryID),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SurrogateTryHandle(string ConnectionString, ref DataSet ds, long SiteID, long TryID, short HandleResult, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SurrogateTryHandle", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("TryID", SqlDbType.BigInt, 0, ParameterDirection.Input, TryID),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SystemEnd(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SystemEnd", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SystemEnd(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SystemEnd", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SystemEndSchemePrintOut(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SystemEndSchemePrintOut", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SystemEndSchemePrintOut(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SystemEndSchemePrintOut", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SystemPaulAtTheEnd(string ConnectionString, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_SystemPaulAtTheEnd", ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_SystemPaulAtTheEnd(string ConnectionString, ref DataSet ds, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_SystemPaulAtTheEnd", ref ds, ref Outputs,
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_TrendChart_11YDJ_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_11YDJ_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_11YDJ_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_11YDJ_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_11YDJ_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_11YDJ_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_11YDJ_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_11YDJ_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_11YDJ_WINNUM(string ConnectionString, DateTime DateTime, long LotteryID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_11YDJ_WINNUM", ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_TrendChart_11YDJ_WINNUM(string ConnectionString, ref DataSet ds, DateTime DateTime, long LotteryID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_11YDJ_WINNUM", ref ds, ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_TrendChart_15X5_CGXMB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_CGXMB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_15X5_CGXMB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_CGXMB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_15X5_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_HMFB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_HMFB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_15X5_HMFB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_HMFB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_15X5_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_LH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_LH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_LH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_LH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_WS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_WS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_WS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_WS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_15X5_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_15X5_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_15X5_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HMLR(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_HMLR", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HMLR(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_HMLR", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HMLRjj(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_HMLRjj", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HMLRjj(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_HMLRjj", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_HZ_Heng(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_HZ_Heng", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_HZ_Heng(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_HZ_Heng", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_HZzong(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_HZzong", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_HZzong(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_HZzong", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_JO(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_JO", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_JO(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_JO", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_LH(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_LH", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_LH(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_LH", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_WeiHaoCF(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_WeiHaoCF", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_WeiHaoCF(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_WeiHaoCF", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_WH(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_WH", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_WH(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_WH", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_WS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_WS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_WS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_WS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_YS(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_YS", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_YS(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_YS", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_22X5_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_22X5_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_22X5_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_22X5_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_26X5_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_26X5_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_26X5_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_26X5_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_36X7_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_36X7_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_36X7_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_36X7_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_C3YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_C3YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_C3YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_C3YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_DZX(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_DZX", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_3D_DZX(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_DZX", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_3D_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_KD(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_KD", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_KD(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_KD", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_XTZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_XTZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_3D_XTZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_XTZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_3D_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_ZHFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_ZHFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_ZHFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_ZHFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_3D_ZHXT(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_3D_ZHXT", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_3D_ZHXT(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_3D_ZHXT", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_4D_CGXMB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_4D_CGXMB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_4D_CGXMB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_4D_CGXMB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_4D_ZHFB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_4D_ZHFB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_4D_ZHFB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_4D_ZHFB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7CL_HMFB(string ConnectionString, int IususeNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7CL_HMFB", ref Outputs,
                new MSSQL.Parameter("IususeNum", SqlDbType.Int, 0, ParameterDirection.Input, IususeNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7CL_HMFB(string ConnectionString, ref DataSet ds, int IususeNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7CL_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IususeNum", SqlDbType.Int, 0, ParameterDirection.Input, IususeNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_CGXMB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_CGXMB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7LC_CGXMB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_CGXMB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7LC_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_LH(string ConnectionString, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_LH", ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_LH(string ConnectionString, ref DataSet ds, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_LH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_WS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_WS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_WS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_WS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7LC_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7LC_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7LC_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_012(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_012", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_012(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_012", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_CF(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_CF", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_CF(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_CF", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_DZX(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_DZX", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_DZX(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_DZX", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_HMFB(string ConnectionString, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_HMFB", ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_HMFB(string ConnectionString, ref DataSet ds, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_HZHeng(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_HZHeng", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_HZHeng(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_HZHeng", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_HZzhong(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_HZzhong", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_HZzhong(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_HZzhong", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7X_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_LH(string ConnectionString, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_LH", ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_LH(string ConnectionString, ref DataSet ds, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_LH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7X_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7X_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7X_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_7XC_CGXMB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_7XC_CGXMB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_7XC_CGXMB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_7XC_CGXMB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_JiMa(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_JiMa", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_JiMa(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_JiMa", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_JiMajj(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_JiMajj", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_JiMajj(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_JiMajj", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_Tema(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_Tema", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_Tema(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_Tema", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_Temajj(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_Temajj", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HMLR_Temajj(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HMLR_Temajj", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HQZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HQZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HQZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HQZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HZ_Heng(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HZ_Heng", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HZ_Heng(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HZ_Heng", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HZzong(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_HZzong", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_HZzong(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_HZzong", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_jima(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_jima", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_jima(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_jima", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_jimaYL(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_jimaYL", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_jimaYL(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_jimaYL", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_Jiou(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_Jiou", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_Jiou(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_Jiou", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_LH(string ConnectionString, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_LH", ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_LH(string ConnectionString, ref DataSet ds, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_LH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_tema(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_tema", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_tema(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_tema", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_TeMa_WH(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_TeMa_WH", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_TeMa_WH(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_TeMa_WH", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_TemaYL(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_TemaYL", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_TemaYL(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_TemaYL", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_WH(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_WH", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_WH(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_WH", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_WS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_WS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_WS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_WS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CJDLT_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CJDLT_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CJDLT_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2X_012_ZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2X_012_ZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2X_012_ZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2X_012_ZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XDXDSZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XDXDSZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XDXDSZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XDXDSZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XHZWZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XHZWZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XHZWZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XHZWZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XHZZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XHZZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XHZZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XHZZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XMaxZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XMaxZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XMaxZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XMaxZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XMINZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XMINZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XMINZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XMINZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XZHFBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_2XZHFBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_2XZHFBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_2XZHFBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3X_DX012_ZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3X_DX012_ZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3X_DX012_ZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3X_DX012_ZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3X_ZX012_ZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3X_ZX012_ZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3X_ZX012_ZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3X_ZX012_ZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XDXZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XDXZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XDXZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XDXZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XHZWZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XHZWZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XHZWZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XHZWZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XHZZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XHZZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XHZZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XHZZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XJOZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XJOZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XJOZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XJOZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XZHFBZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XZHFBZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XZHFBZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XZHFBZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XZHZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XZHZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XZHZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XZHZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_3XZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_3XZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_3XZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XDXZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XDXZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XDXZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XDXZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XHZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XHZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XHZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XHZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XJOZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XJOZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XJOZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XJOZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XZHFBZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XZHFBZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XZHFBZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XZHFBZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XZHZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XZHZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XZHZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XZHZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_4XZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_4XZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_4XZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XDXZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XDXZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XDXZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XDXZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XHZZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XHZZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XHZZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XHZZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XJOZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XJOZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XJOZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XJOZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XZHFBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XZHFBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XZHFBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XZHFBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XZHZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XZHZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XZHZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XZHZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_5XZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_5XZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_5XZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_2XDXDSZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_2XDXDSZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_2XDXDSZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_2XDXDSZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_2XHZZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_2XHZZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_2XHZZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_2XHZZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_2XZHFBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_2XZHFBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_2XZHFBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_2XZHFBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_3XDXZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_3XDXZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_3XDXZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_3XDXZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_3XHZZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_3XHZZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_3XHZZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_3XHZZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_3XZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_3XZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_3XZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_3XZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_5XHZZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_5XHZZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_5XHZZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_5XHZZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_5XZHFBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_5XZHFBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_5XZHFBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_5XZHFBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_5XZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_CQSSC_New_5XZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_CQSSC_New_5XZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_CQSSC_New_5XZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_DF6J1_ZHFB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_DF6J1_ZHFB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_DF6J1_ZHFB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_DF6J1_ZHFB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_FC3D(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_FC3D", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_FC3D(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_FC3D", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GD11X5_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_GD11X5_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GD11X5_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_GD11X5_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GD11X5_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_GD11X5_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GD11X5_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_GD11X5_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GD11X5_WINNUM(string ConnectionString, DateTime DateTime, long LotteryID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_GD11X5_WINNUM", ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_TrendChart_GD11X5_WINNUM(string ConnectionString, ref DataSet ds, DateTime DateTime, long LotteryID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_GD11X5_WINNUM", ref ds, ref Outputs,
                new MSSQL.Parameter("DateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, DateTime),
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_DW(string ConnectionString, int IsuseNum, int number)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_GDKLPK_DW", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum),
                new MSSQL.Parameter("number", SqlDbType.Int, 0, ParameterDirection.Input, number)
                );

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_DW(string ConnectionString, ref DataSet ds, int IsuseNum, int number)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_GDKLPK_DW", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum),
                new MSSQL.Parameter("number", SqlDbType.Int, 0, ParameterDirection.Input, number)
                );

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_GDKLPK_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_GDKLPK_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_GDKLPK_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_GDKLPK_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_GDKLPK_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_GDKLPK_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_GDKLPK_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HC1_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_HC1_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HC1_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_HC1_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HC26_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_HC26_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HC26_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_HC26_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HC36_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_HC36_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HC36_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_HC36_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HNXYSC_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_HNXYSC_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_HNXYSC_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_HNXYSC_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_HMFB(string ConnectionString, int IsuseNum, int ParityStatus, int MassStatus)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_JSK3_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum),
                new MSSQL.Parameter("ParityStatus", SqlDbType.Int, 0, ParameterDirection.Input, ParityStatus),
                new MSSQL.Parameter("MassStatus", SqlDbType.Int, 0, ParameterDirection.Input, MassStatus)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum, int ParityStatus, int MassStatus)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_JSK3_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum),
                new MSSQL.Parameter("ParityStatus", SqlDbType.Int, 0, ParameterDirection.Input, ParityStatus),
                new MSSQL.Parameter("MassStatus", SqlDbType.Int, 0, ParameterDirection.Input, MassStatus)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_JSK3_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_JSK3_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_JBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_JSK3_JBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_JBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_JSK3_JBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_XT(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_JSK3_XT", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_XT(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_JSK3_XT", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_JSK3_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JSK3_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_JSK3_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JX11X5_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_JX11X5_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JX11X5_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_JX11X5_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JX11X5_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_JX11X5_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_JX11X5_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_JX11X5_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KLPK_012(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KLPK_012", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_012(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KLPK_012", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_DX(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KLPK_DX", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_DX(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KLPK_DX", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_DZX(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KLPK_DZX", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_DZX(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KLPK_DZX", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KLPK_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KLPK_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KLPK_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KLPK_KJFB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KLPK_KJFB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_KJFB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KLPK_KJFB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_ZH(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KLPK_ZH", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KLPK_ZH(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KLPK_ZH", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_KY481_DXZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KY481_DXZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_DXZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KY481_DXZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_HZZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KY481_HZZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_HZZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KY481_HZZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_JBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KY481_JBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_JBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KY481_JBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_JOZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KY481_JOZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_JOZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KY481_JOZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_KDZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_KY481_KDZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_KY481_KDZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_KY481_KDZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL3(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL3_012(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_012", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_012(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_012", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_DZX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_DZX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_DZX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_DZX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_KD(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_KD", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_KD(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_KD", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_LH(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_LH", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL3_LH(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_LH", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL3_WH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_WH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_WH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_WH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_ZX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL3_ZX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL3_ZX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL3_ZX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_012(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_012", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL5_012(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_012", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL5_CF(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_CF", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL5_CF(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_CF", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL5_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_DZX(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_DZX", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL5_DZX(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_DZX", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_PL5_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_LH(string ConnectionString, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_LH", ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_LH(string ConnectionString, ref DataSet ds, int IsusesNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_LH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsusesNum", SqlDbType.Int, 0, ParameterDirection.Input, IsusesNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_PL5_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_PL5_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_PL5_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_012(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SHSSL_012", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_012(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SHSSL_012", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SHSSL_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SHSSL_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SHSSL_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SHSSL_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SHSSL_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SHSSL_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SHSSL_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SHSSL_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_ZHFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SHSSL_ZHFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SHSSL_ZHFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SHSSL_ZHFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSC_2X_012_ZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2X_012_ZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2X_012_ZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2X_012_ZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XDXDSZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XDXDSZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XDXDSZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XDXDSZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XHZWZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XHZWZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XHZWZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XHZWZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XHZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XHZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XHZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XHZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XMaxZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XMaxZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XMaxZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XMaxZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XMINZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XMINZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XMINZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XMINZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XZHFBZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_2XZHFBZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_2XZHFBZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_2XZHFBZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3X_DX012_ZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3X_DX012_ZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3X_DX012_ZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3X_DX012_ZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3X_ZX012_ZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3X_ZX012_ZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3X_ZX012_ZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3X_ZX012_ZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XDXZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XDXZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XDXZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XDXZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XHZWZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XHZWZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XHZWZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XHZWZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XHZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XHZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XHZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XHZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XJOZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XJOZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XJOZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XJOZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XZHFBZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XZHFBZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XZHFBZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XZHFBZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XZHZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XZHZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XZHZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XZHZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_3XZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_3XZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_3XZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XDXZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XDXZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XDXZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XDXZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XHZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XHZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XHZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XHZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XJOZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XJOZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XJOZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XJOZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XZHFBZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XZHFBZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XZHFBZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XZHFBZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XZHZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XZHZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XZHZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XZHZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_4XZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_4XZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_4XZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XDXZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XDXZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XDXZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XDXZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XHZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XHZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XHZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XHZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XJOZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XJOZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XJOZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XJOZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XKDZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XKDZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XKDZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XKDZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XPJZZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XPJZZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XPJZZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XPJZZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XZHFBZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XZHFBZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XZHFBZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XZHFBZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XZHZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XZHZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XZHZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XZHZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XZST(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSC_5XZST", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSC_5XZST(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSC_5XZST", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSQ_3FQ(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_3FQ", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSQ_3FQ(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_3FQ", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSQ_BQZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_BQZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_BQZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_BQZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_CGXMB(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_CGXMB", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSQ_CGXMB(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_CGXMB", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSQ_DX(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_DX", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_DX(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_DX", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_HL(string ConnectionString)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_HL", ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSQ_HL(string ConnectionString, ref DataSet ds)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_HL", ref ds, ref Outputs);

            return CallResult;
        }

        public static int P_TrendChart_SSQ_HMFB(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_HMFB", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_HMFB(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_HMFB", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_HZ(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_HZ", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_HZ(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_HZ", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_JO(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_JO", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_JO(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_JO", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_LH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_LH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_LH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_LH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_WS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_WS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_WS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_WS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_YS(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_YS", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_YS(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_YS", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_ZH(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_SSQ_ZH", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_SSQ_ZH(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_SSQ_ZH", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_XYWL_FBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_XYWL_FBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_XYWL_FBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_XYWL_FBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_XYWL_JBZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_XYWL_JBZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_XYWL_JBZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_XYWL_JBZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_XYWL_WDZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_XYWL_WDZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_XYWL_WDZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_XYWL_WDZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_ZYFC22X5_HMZST(string ConnectionString, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_TrendChart_ZYFC22X5_HMZST", ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_TrendChart_ZYFC22X5_HMZST(string ConnectionString, ref DataSet ds, int IsuseNum)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_TrendChart_ZYFC22X5_HMZST", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseNum", SqlDbType.Int, 0, ParameterDirection.Input, IsuseNum)
                );

            return CallResult;
        }

        public static int P_UserAdd(string ConnectionString, long SiteID, string Name, string RealityName, string Password, string PasswordAdv, int CityID, string Sex, DateTime BirthDay, string IDCardNumber, string Address, string Email, bool isEmailValided, string QQ, bool isQQValided, string Telephone, string Mobile, bool isMobileValided, bool isPrivacy, short UserType, short BankType, string BankName, string BankCardNumber, long CommenderID, long CpsID, string AlipayName, string Memo, string VisitSource, ref long UserID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserAdd", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 0, ParameterDirection.Input, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 0, ParameterDirection.Input, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 0, ParameterDirection.Input, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 0, ParameterDirection.Input, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 0, ParameterDirection.Input, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 0, ParameterDirection.Input, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 0, ParameterDirection.Input, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 0, ParameterDirection.Input, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 0, ParameterDirection.Input, isPrivacy),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 0, ParameterDirection.Input, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("VisitSource", SqlDbType.VarChar, 0, ParameterDirection.Input, VisitSource),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserAdd(string ConnectionString, ref DataSet ds, long SiteID, string Name, string RealityName, string Password, string PasswordAdv, int CityID, string Sex, DateTime BirthDay, string IDCardNumber, string Address, string Email, bool isEmailValided, string QQ, bool isQQValided, string Telephone, string Mobile, bool isMobileValided, bool isPrivacy, short UserType, short BankType, string BankName, string BankCardNumber, long CommenderID, long CpsID, string AlipayName, string Memo, string VisitSource, ref long UserID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 0, ParameterDirection.Input, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 0, ParameterDirection.Input, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 0, ParameterDirection.Input, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 0, ParameterDirection.Input, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 0, ParameterDirection.Input, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 0, ParameterDirection.Input, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("isQQValided", SqlDbType.Bit, 0, ParameterDirection.Input, isQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 0, ParameterDirection.Input, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 0, ParameterDirection.Input, isPrivacy),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 0, ParameterDirection.Input, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("CommenderID", SqlDbType.BigInt, 0, ParameterDirection.Input, CommenderID),
                new MSSQL.Parameter("CpsID", SqlDbType.BigInt, 0, ParameterDirection.Input, CpsID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("VisitSource", SqlDbType.VarChar, 0, ParameterDirection.Input, VisitSource),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 8, ParameterDirection.Output, UserID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                UserID = System.Convert.ToInt64(Outputs["UserID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserAddMoney(string ConnectionString, long SiteID, long UserID, double Money, double FormalitiesFees, string PayNumber, string PayBank, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserAddMoney", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("PayNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayNumber),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserAddMoney(string ConnectionString, ref DataSet ds, long SiteID, long UserID, double Money, double FormalitiesFees, string PayNumber, string PayBank, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserAddMoney", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("PayNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayNumber),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserAddMoneyManual(string ConnectionString, long SiteID, long UserID, double Money, string Memo, long OperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserAddMoneyManual", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("OperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserAddMoneyManual(string ConnectionString, ref DataSet ds, long SiteID, long UserID, double Money, string Memo, long OperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserAddMoneyManual", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("OperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserAddMoneys(string ConnectionString, long SiteID, long UserID, double Money, double FormalitiesFees, string PayNumber, string PayBank, string Memo, string AlipayNo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserAddMoneys", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("PayNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayNumber),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("AlipayNo", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayNo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserAddMoneys(string ConnectionString, ref DataSet ds, long SiteID, long UserID, double Money, double FormalitiesFees, string PayNumber, string PayBank, string Memo, string AlipayNo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserAddMoneys", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Money", SqlDbType.Money, 0, ParameterDirection.Input, Money),
                new MSSQL.Parameter("FormalitiesFees", SqlDbType.Money, 0, ParameterDirection.Input, FormalitiesFees),
                new MSSQL.Parameter("PayNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, PayNumber),
                new MSSQL.Parameter("PayBank", SqlDbType.VarChar, 0, ParameterDirection.Input, PayBank),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("AlipayNo", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayNo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserBankDetailEdit(string ConnectionString, long SiteID, long UserID, string BankTypeName, string BankName, string BankCardNumber, string BankInProvinceName, string BankInCityName, string BankUserName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserBankDetailEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("BankTypeName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankTypeName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("BankInProvinceName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankInProvinceName),
                new MSSQL.Parameter("BankInCityName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankInCityName),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankUserName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserBankDetailEdit(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string BankTypeName, string BankName, string BankCardNumber, string BankInProvinceName, string BankInCityName, string BankUserName, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserBankDetailEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("BankTypeName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankTypeName),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("BankInProvinceName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankInProvinceName),
                new MSSQL.Parameter("BankInCityName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankInCityName),
                new MSSQL.Parameter("BankUserName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankUserName),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserDistillPayByAlipay(string ConnectionString, long HandleOperatorID, string FileName, string IDs, int PaymentType, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserDistillPayByAlipay", ref Outputs,
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("FileName", SqlDbType.VarChar, 0, ParameterDirection.Input, FileName),
                new MSSQL.Parameter("IDs", SqlDbType.VarChar, 0, ParameterDirection.Input, IDs),
                new MSSQL.Parameter("PaymentType", SqlDbType.Int, 0, ParameterDirection.Input, PaymentType),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserDistillPayByAlipay(string ConnectionString, ref DataSet ds, long HandleOperatorID, string FileName, string IDs, int PaymentType, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserDistillPayByAlipay", ref ds, ref Outputs,
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("FileName", SqlDbType.VarChar, 0, ParameterDirection.Input, FileName),
                new MSSQL.Parameter("IDs", SqlDbType.VarChar, 0, ParameterDirection.Input, IDs),
                new MSSQL.Parameter("PaymentType", SqlDbType.Int, 0, ParameterDirection.Input, PaymentType),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserDistillPayByAlipaySuccess(string ConnectionString, long SiteID, long DistillID, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserDistillPayByAlipaySuccess", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserDistillPayByAlipaySuccess(string ConnectionString, ref DataSet ds, long SiteID, long DistillID, long HandleOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserDistillPayByAlipaySuccess", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("HandleOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, HandleOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserDistillPayByAlipayUnsuccess(string ConnectionString, long SiteID, long DistillID, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserDistillPayByAlipayUnsuccess", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserDistillPayByAlipayUnsuccess(string ConnectionString, ref DataSet ds, long SiteID, long DistillID, string Memo, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserDistillPayByAlipayUnsuccess", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("DistillID", SqlDbType.BigInt, 0, ParameterDirection.Input, DistillID),
                new MSSQL.Parameter("Memo", SqlDbType.VarChar, 0, ParameterDirection.Input, Memo),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserDistillPayByAlipayWriteLog(string ConnectionString, string Content)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserDistillPayByAlipayWriteLog", ref Outputs,
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content)
                );

            return CallResult;
        }

        public static int P_UserDistillPayByAlipayWriteLog(string ConnectionString, ref DataSet ds, string Content)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserDistillPayByAlipayWriteLog", ref ds, ref Outputs,
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content)
                );

            return CallResult;
        }

        public static int P_UserEditByID(string ConnectionString, long SiteID, long UserID, string Name, string RealityName, string Password, string PasswordAdv, int CityID, string Sex, DateTime BirthDay, string IDCardNumber, string Address, string Email, bool isEmailValided, string QQ, bool IsQQValided, string Telephone, string Mobile, bool isMobileValided, bool isPrivacy, bool isCanLogin, short UserType, short BankType, string BankName, string BankCardNumber, double ScoringOfSelfBuy, double ScoringOfCommendBuy, short Level, string AlipayID, string AlipayName, bool isAlipayNameValided, double PromotionMemberBonusScale, double PromotionSiteBonusScale, bool IsCrossLogin, string Reason, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserEditByID", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 0, ParameterDirection.Input, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 0, ParameterDirection.Input, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 0, ParameterDirection.Input, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 0, ParameterDirection.Input, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 0, ParameterDirection.Input, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 0, ParameterDirection.Input, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("IsQQValided", SqlDbType.Bit, 0, ParameterDirection.Input, IsQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 0, ParameterDirection.Input, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 0, ParameterDirection.Input, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 0, ParameterDirection.Input, isCanLogin),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 0, ParameterDirection.Input, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfCommendBuy),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 0, ParameterDirection.Input, Level),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 0, ParameterDirection.Input, isAlipayNameValided),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionSiteBonusScale),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 0, ParameterDirection.Input, IsCrossLogin),
                new MSSQL.Parameter("Reason", SqlDbType.VarChar, 0, ParameterDirection.Input, Reason),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserEditByID(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string Name, string RealityName, string Password, string PasswordAdv, int CityID, string Sex, DateTime BirthDay, string IDCardNumber, string Address, string Email, bool isEmailValided, string QQ, bool IsQQValided, string Telephone, string Mobile, bool isMobileValided, bool isPrivacy, bool isCanLogin, short UserType, short BankType, string BankName, string BankCardNumber, double ScoringOfSelfBuy, double ScoringOfCommendBuy, short Level, string AlipayID, string AlipayName, bool isAlipayNameValided, double PromotionMemberBonusScale, double PromotionSiteBonusScale, bool IsCrossLogin, string Reason, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserEditByID", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 0, ParameterDirection.Input, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 0, ParameterDirection.Input, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 0, ParameterDirection.Input, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 0, ParameterDirection.Input, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 0, ParameterDirection.Input, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 0, ParameterDirection.Input, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("IsQQValided", SqlDbType.Bit, 0, ParameterDirection.Input, IsQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 0, ParameterDirection.Input, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 0, ParameterDirection.Input, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 0, ParameterDirection.Input, isCanLogin),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 0, ParameterDirection.Input, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfCommendBuy),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 0, ParameterDirection.Input, Level),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 0, ParameterDirection.Input, isAlipayNameValided),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionSiteBonusScale),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 0, ParameterDirection.Input, IsCrossLogin),
                new MSSQL.Parameter("Reason", SqlDbType.VarChar, 0, ParameterDirection.Input, Reason),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserEditByName(string ConnectionString, long SiteID, long UserID, string Name, string RealityName, string Password, string PasswordAdv, int CityID, string Sex, DateTime BirthDay, string IDCardNumber, string Address, string Email, bool isEmailValided, string QQ, bool IsQQValided, string Telephone, string Mobile, bool isMobileValided, bool isPrivacy, bool isCanLogin, short UserType, short BankType, string BankName, string BankCardNumber, double ScoringOfSelfBuy, double ScoringOfCommendBuy, short Level, string AlipayID, string AlipayName, bool isAlipayNameValided, double PromotionMemberBonusScale, double PromotionSiteBonusScale, bool IsCrossLogin, string Reason, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserEditByName", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 0, ParameterDirection.Input, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 0, ParameterDirection.Input, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 0, ParameterDirection.Input, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 0, ParameterDirection.Input, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 0, ParameterDirection.Input, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 0, ParameterDirection.Input, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("IsQQValided", SqlDbType.Bit, 0, ParameterDirection.Input, IsQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 0, ParameterDirection.Input, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 0, ParameterDirection.Input, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 0, ParameterDirection.Input, isCanLogin),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 0, ParameterDirection.Input, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfCommendBuy),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 0, ParameterDirection.Input, Level),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 0, ParameterDirection.Input, isAlipayNameValided),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionSiteBonusScale),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 0, ParameterDirection.Input, IsCrossLogin),
                new MSSQL.Parameter("Reason", SqlDbType.VarChar, 0, ParameterDirection.Input, Reason),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserEditByName(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string Name, string RealityName, string Password, string PasswordAdv, int CityID, string Sex, DateTime BirthDay, string IDCardNumber, string Address, string Email, bool isEmailValided, string QQ, bool IsQQValided, string Telephone, string Mobile, bool isMobileValided, bool isPrivacy, bool isCanLogin, short UserType, short BankType, string BankName, string BankCardNumber, double ScoringOfSelfBuy, double ScoringOfCommendBuy, short Level, string AlipayID, string AlipayName, bool isAlipayNameValided, double PromotionMemberBonusScale, double PromotionSiteBonusScale, bool IsCrossLogin, string Reason, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserEditByName", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Name", SqlDbType.VarChar, 0, ParameterDirection.Input, Name),
                new MSSQL.Parameter("RealityName", SqlDbType.VarChar, 0, ParameterDirection.Input, RealityName),
                new MSSQL.Parameter("Password", SqlDbType.VarChar, 0, ParameterDirection.Input, Password),
                new MSSQL.Parameter("PasswordAdv", SqlDbType.VarChar, 0, ParameterDirection.Input, PasswordAdv),
                new MSSQL.Parameter("CityID", SqlDbType.Int, 0, ParameterDirection.Input, CityID),
                new MSSQL.Parameter("Sex", SqlDbType.VarChar, 0, ParameterDirection.Input, Sex),
                new MSSQL.Parameter("BirthDay", SqlDbType.DateTime, 0, ParameterDirection.Input, BirthDay),
                new MSSQL.Parameter("IDCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, IDCardNumber),
                new MSSQL.Parameter("Address", SqlDbType.VarChar, 0, ParameterDirection.Input, Address),
                new MSSQL.Parameter("Email", SqlDbType.VarChar, 0, ParameterDirection.Input, Email),
                new MSSQL.Parameter("isEmailValided", SqlDbType.Bit, 0, ParameterDirection.Input, isEmailValided),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("IsQQValided", SqlDbType.Bit, 0, ParameterDirection.Input, IsQQValided),
                new MSSQL.Parameter("Telephone", SqlDbType.VarChar, 0, ParameterDirection.Input, Telephone),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("isMobileValided", SqlDbType.Bit, 0, ParameterDirection.Input, isMobileValided),
                new MSSQL.Parameter("isPrivacy", SqlDbType.Bit, 0, ParameterDirection.Input, isPrivacy),
                new MSSQL.Parameter("isCanLogin", SqlDbType.Bit, 0, ParameterDirection.Input, isCanLogin),
                new MSSQL.Parameter("UserType", SqlDbType.SmallInt, 0, ParameterDirection.Input, UserType),
                new MSSQL.Parameter("BankType", SqlDbType.SmallInt, 0, ParameterDirection.Input, BankType),
                new MSSQL.Parameter("BankName", SqlDbType.VarChar, 0, ParameterDirection.Input, BankName),
                new MSSQL.Parameter("BankCardNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, BankCardNumber),
                new MSSQL.Parameter("ScoringOfSelfBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfSelfBuy),
                new MSSQL.Parameter("ScoringOfCommendBuy", SqlDbType.Float, 0, ParameterDirection.Input, ScoringOfCommendBuy),
                new MSSQL.Parameter("Level", SqlDbType.SmallInt, 0, ParameterDirection.Input, Level),
                new MSSQL.Parameter("AlipayID", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayID),
                new MSSQL.Parameter("AlipayName", SqlDbType.VarChar, 0, ParameterDirection.Input, AlipayName),
                new MSSQL.Parameter("isAlipayNameValided", SqlDbType.Bit, 0, ParameterDirection.Input, isAlipayNameValided),
                new MSSQL.Parameter("PromotionMemberBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionMemberBonusScale),
                new MSSQL.Parameter("PromotionSiteBonusScale", SqlDbType.Float, 0, ParameterDirection.Input, PromotionSiteBonusScale),
                new MSSQL.Parameter("IsCrossLogin", SqlDbType.Bit, 0, ParameterDirection.Input, IsCrossLogin),
                new MSSQL.Parameter("Reason", SqlDbType.VarChar, 0, ParameterDirection.Input, Reason),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeDelete(string ConnectionString, long SiteID, long UsersForInitiateFollowSchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserForInitiateFollowSchemeDelete", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UsersForInitiateFollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, UsersForInitiateFollowSchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeDelete(string ConnectionString, ref DataSet ds, long SiteID, long UsersForInitiateFollowSchemeID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserForInitiateFollowSchemeDelete", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UsersForInitiateFollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, UsersForInitiateFollowSchemeID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeEdit(string ConnectionString, long SiteID, long UsersForInitiateFollowSchemeID, string Description, int MaxNumberOf, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserForInitiateFollowSchemeEdit", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UsersForInitiateFollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, UsersForInitiateFollowSchemeID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxNumberOf", SqlDbType.Int, 0, ParameterDirection.Input, MaxNumberOf),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeEdit(string ConnectionString, ref DataSet ds, long SiteID, long UsersForInitiateFollowSchemeID, string Description, int MaxNumberOf, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserForInitiateFollowSchemeEdit", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UsersForInitiateFollowSchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, UsersForInitiateFollowSchemeID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxNumberOf", SqlDbType.Int, 0, ParameterDirection.Input, MaxNumberOf),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeTry(string ConnectionString, long SiteID, long UserID, int PlayTypeID, string Description, ref long NewUserForInitiateFollowSchemeTryID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserForInitiateFollowSchemeTry", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("NewUserForInitiateFollowSchemeTryID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewUserForInitiateFollowSchemeTryID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewUserForInitiateFollowSchemeTryID = System.Convert.ToInt64(Outputs["NewUserForInitiateFollowSchemeTryID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeTry(string ConnectionString, ref DataSet ds, long SiteID, long UserID, int PlayTypeID, string Description, ref long NewUserForInitiateFollowSchemeTryID, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserForInitiateFollowSchemeTry", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("NewUserForInitiateFollowSchemeTryID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewUserForInitiateFollowSchemeTryID),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                NewUserForInitiateFollowSchemeTryID = System.Convert.ToInt64(Outputs["NewUserForInitiateFollowSchemeTryID"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeTryHandle(string ConnectionString, long SiteID, long UserForInitiateFollowSchemeTryID, short HandleResult, string Description, int MaxNumberOf, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserForInitiateFollowSchemeTryHandle", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserForInitiateFollowSchemeTryID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserForInitiateFollowSchemeTryID),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxNumberOf", SqlDbType.Int, 0, ParameterDirection.Input, MaxNumberOf),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserForInitiateFollowSchemeTryHandle(string ConnectionString, ref DataSet ds, long SiteID, long UserForInitiateFollowSchemeTryID, short HandleResult, string Description, int MaxNumberOf, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserForInitiateFollowSchemeTryHandle", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserForInitiateFollowSchemeTryID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserForInitiateFollowSchemeTryID),
                new MSSQL.Parameter("HandleResult", SqlDbType.SmallInt, 0, ParameterDirection.Input, HandleResult),
                new MSSQL.Parameter("Description", SqlDbType.VarChar, 0, ParameterDirection.Input, Description),
                new MSSQL.Parameter("MaxNumberOf", SqlDbType.Int, 0, ParameterDirection.Input, MaxNumberOf),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserLogOut(string ConnectionString, long SiteID, long UserID, string Reason, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserLogOut", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Reason", SqlDbType.VarChar, 0, ParameterDirection.Input, Reason),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserLogOut(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string Reason, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserLogOut", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Reason", SqlDbType.VarChar, 0, ParameterDirection.Input, Reason),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserPaySMSCost(string ConnectionString, long SiteID, long UserID, string Mobile, int Num, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserPaySMSCost", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Num", SqlDbType.Int, 0, ParameterDirection.Input, Num),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserPaySMSCost(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string Mobile, int Num, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserPaySMSCost", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("Mobile", SqlDbType.VarChar, 0, ParameterDirection.Input, Mobile),
                new MSSQL.Parameter("Num", SqlDbType.Int, 0, ParameterDirection.Input, Num),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserQQBind(string ConnectionString, long UserID, string QQ, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_UserQQBind", ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 50, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_UserQQBind(string ConnectionString, ref DataSet ds, long UserID, string QQ, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_UserQQBind", ref ds, ref Outputs,
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("QQ", SqlDbType.VarChar, 0, ParameterDirection.Input, QQ),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 50, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_VerificationGreetingCard(string ConnectionString, long SiteID, long ID, long UserID, long VerificationCade, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_VerificationGreetingCard", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("VerificationCade", SqlDbType.BigInt, 0, ParameterDirection.Input, VerificationCade),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_VerificationGreetingCard(string ConnectionString, ref DataSet ds, long SiteID, long ID, long UserID, long VerificationCade, ref long ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_VerificationGreetingCard", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("ID", SqlDbType.BigInt, 0, ParameterDirection.Input, ID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("VerificationCade", SqlDbType.BigInt, 0, ParameterDirection.Input, VerificationCade),
                new MSSQL.Parameter("ReturnValue", SqlDbType.BigInt, 8, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt64(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ViewUserBonus(string ConnectionString, long userid, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_ViewUserBonus", ref Outputs,
                new MSSQL.Parameter("userid", SqlDbType.BigInt, 0, ParameterDirection.Input, userid),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_ViewUserBonus(string ConnectionString, ref DataSet ds, long userid, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_ViewUserBonus", ref ds, ref Outputs,
                new MSSQL.Parameter("userid", SqlDbType.BigInt, 0, ParameterDirection.Input, userid),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Win(string ConnectionString, long IsuseID, string WinLotteryNumber, string OpenAffiche, long OpenOperatorID, bool isEndTheIsuse, ref int SchemeCount, ref int QuashCount, ref int WinCount, ref int WinNoBuyCount, ref bool isEndOpen, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_Win", ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("WinLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, WinLotteryNumber),
                new MSSQL.Parameter("OpenAffiche", SqlDbType.VarChar, 0, ParameterDirection.Input, OpenAffiche),
                new MSSQL.Parameter("OpenOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OpenOperatorID),
                new MSSQL.Parameter("isEndTheIsuse", SqlDbType.Bit, 0, ParameterDirection.Input, isEndTheIsuse),
                new MSSQL.Parameter("SchemeCount", SqlDbType.Int, 4, ParameterDirection.Output, SchemeCount),
                new MSSQL.Parameter("QuashCount", SqlDbType.Int, 4, ParameterDirection.Output, QuashCount),
                new MSSQL.Parameter("WinCount", SqlDbType.Int, 4, ParameterDirection.Output, WinCount),
                new MSSQL.Parameter("WinNoBuyCount", SqlDbType.Int, 4, ParameterDirection.Output, WinNoBuyCount),
                new MSSQL.Parameter("isEndOpen", SqlDbType.Bit, 1, ParameterDirection.Output, isEndOpen),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SchemeCount = System.Convert.ToInt32(Outputs["SchemeCount"]);
            }
            catch { }

            try
            {
                QuashCount = System.Convert.ToInt32(Outputs["QuashCount"]);
            }
            catch { }

            try
            {
                WinCount = System.Convert.ToInt32(Outputs["WinCount"]);
            }
            catch { }

            try
            {
                WinNoBuyCount = System.Convert.ToInt32(Outputs["WinNoBuyCount"]);
            }
            catch { }

            try
            {
                isEndOpen = System.Convert.ToBoolean(Outputs["isEndOpen"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_Win(string ConnectionString, ref DataSet ds, long IsuseID, string WinLotteryNumber, string OpenAffiche, long OpenOperatorID, bool isEndTheIsuse, ref int SchemeCount, ref int QuashCount, ref int WinCount, ref int WinNoBuyCount, ref bool isEndOpen, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_Win", ref ds, ref Outputs,
                new MSSQL.Parameter("IsuseID", SqlDbType.BigInt, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("WinLotteryNumber", SqlDbType.VarChar, 0, ParameterDirection.Input, WinLotteryNumber),
                new MSSQL.Parameter("OpenAffiche", SqlDbType.VarChar, 0, ParameterDirection.Input, OpenAffiche),
                new MSSQL.Parameter("OpenOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OpenOperatorID),
                new MSSQL.Parameter("isEndTheIsuse", SqlDbType.Bit, 0, ParameterDirection.Input, isEndTheIsuse),
                new MSSQL.Parameter("SchemeCount", SqlDbType.Int, 4, ParameterDirection.Output, SchemeCount),
                new MSSQL.Parameter("QuashCount", SqlDbType.Int, 4, ParameterDirection.Output, QuashCount),
                new MSSQL.Parameter("WinCount", SqlDbType.Int, 4, ParameterDirection.Output, WinCount),
                new MSSQL.Parameter("WinNoBuyCount", SqlDbType.Int, 4, ParameterDirection.Output, WinNoBuyCount),
                new MSSQL.Parameter("isEndOpen", SqlDbType.Bit, 1, ParameterDirection.Output, isEndOpen),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                SchemeCount = System.Convert.ToInt32(Outputs["SchemeCount"]);
            }
            catch { }

            try
            {
                QuashCount = System.Convert.ToInt32(Outputs["QuashCount"]);
            }
            catch { }

            try
            {
                WinCount = System.Convert.ToInt32(Outputs["WinCount"]);
            }
            catch { }

            try
            {
                WinNoBuyCount = System.Convert.ToInt32(Outputs["WinNoBuyCount"]);
            }
            catch { }

            try
            {
                isEndOpen = System.Convert.ToBoolean(Outputs["isEndOpen"]);
            }
            catch { }

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WinByOpenManual(string ConnectionString, long SiteID, long SchemeID, double WinMoney, double WinMoneyNoWithTax, string WinDescription, long OpenOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_WinByOpenManual", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("WinMoneyNoWithTax", SqlDbType.Money, 0, ParameterDirection.Input, WinMoneyNoWithTax),
                new MSSQL.Parameter("WinDescription", SqlDbType.VarChar, 0, ParameterDirection.Input, WinDescription),
                new MSSQL.Parameter("OpenOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OpenOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WinByOpenManual(string ConnectionString, ref DataSet ds, long SiteID, long SchemeID, double WinMoney, double WinMoneyNoWithTax, string WinDescription, long OpenOperatorID, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_WinByOpenManual", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("WinMoneyNoWithTax", SqlDbType.Money, 0, ParameterDirection.Input, WinMoneyNoWithTax),
                new MSSQL.Parameter("WinDescription", SqlDbType.VarChar, 0, ParameterDirection.Input, WinDescription),
                new MSSQL.Parameter("OpenOperatorID", SqlDbType.BigInt, 0, ParameterDirection.Input, OpenOperatorID),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WinScoreScale(string ConnectionString, long LotteryID, double WinMoney, double ScoreScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_WinScoreScale", ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("ScoreScale", SqlDbType.Float, 0, ParameterDirection.Input, ScoreScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WinScoreScale(string ConnectionString, ref DataSet ds, long LotteryID, double WinMoney, double ScoreScale, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_WinScoreScale", ref ds, ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.BigInt, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("WinMoney", SqlDbType.Money, 0, ParameterDirection.Input, WinMoney),
                new MSSQL.Parameter("ScoreScale", SqlDbType.Float, 0, ParameterDirection.Input, ScoreScale),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WinTypeForHNXYSCAdd(string ConnectionString, int LotteryID, int IsuseID, int PlayTypeID, string WinMoneyIndex, string FirstWin, string SecondWin, string ThirdWin, double DefaultMoney, double DefaultMoneyNoWithTax, DateTime GenerateDateTime, ref int ID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_WinTypeForHNXYSCAdd", ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("IsuseID", SqlDbType.Int, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("WinMoneyIndex", SqlDbType.NVarChar, 0, ParameterDirection.Input, WinMoneyIndex),
                new MSSQL.Parameter("FirstWin", SqlDbType.NVarChar, 0, ParameterDirection.Input, FirstWin),
                new MSSQL.Parameter("SecondWin", SqlDbType.NVarChar, 0, ParameterDirection.Input, SecondWin),
                new MSSQL.Parameter("ThirdWin", SqlDbType.NVarChar, 0, ParameterDirection.Input, ThirdWin),
                new MSSQL.Parameter("DefaultMoney", SqlDbType.Money, 0, ParameterDirection.Input, DefaultMoney),
                new MSSQL.Parameter("DefaultMoneyNoWithTax", SqlDbType.Money, 0, ParameterDirection.Input, DefaultMoneyNoWithTax),
                new MSSQL.Parameter("GenerateDateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, GenerateDateTime),
                new MSSQL.Parameter("ID", SqlDbType.Int, 4, ParameterDirection.Output, ID)
                );

            try
            {
                ID = System.Convert.ToInt32(Outputs["ID"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WinTypeForHNXYSCAdd(string ConnectionString, ref DataSet ds, int LotteryID, int IsuseID, int PlayTypeID, string WinMoneyIndex, string FirstWin, string SecondWin, string ThirdWin, double DefaultMoney, double DefaultMoneyNoWithTax, DateTime GenerateDateTime, ref int ID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_WinTypeForHNXYSCAdd", ref ds, ref Outputs,
                new MSSQL.Parameter("LotteryID", SqlDbType.Int, 0, ParameterDirection.Input, LotteryID),
                new MSSQL.Parameter("IsuseID", SqlDbType.Int, 0, ParameterDirection.Input, IsuseID),
                new MSSQL.Parameter("PlayTypeID", SqlDbType.Int, 0, ParameterDirection.Input, PlayTypeID),
                new MSSQL.Parameter("WinMoneyIndex", SqlDbType.NVarChar, 0, ParameterDirection.Input, WinMoneyIndex),
                new MSSQL.Parameter("FirstWin", SqlDbType.NVarChar, 0, ParameterDirection.Input, FirstWin),
                new MSSQL.Parameter("SecondWin", SqlDbType.NVarChar, 0, ParameterDirection.Input, SecondWin),
                new MSSQL.Parameter("ThirdWin", SqlDbType.NVarChar, 0, ParameterDirection.Input, ThirdWin),
                new MSSQL.Parameter("DefaultMoney", SqlDbType.Money, 0, ParameterDirection.Input, DefaultMoney),
                new MSSQL.Parameter("DefaultMoneyNoWithTax", SqlDbType.Money, 0, ParameterDirection.Input, DefaultMoneyNoWithTax),
                new MSSQL.Parameter("GenerateDateTime", SqlDbType.DateTime, 0, ParameterDirection.Input, GenerateDateTime),
                new MSSQL.Parameter("ID", SqlDbType.Int, 4, ParameterDirection.Output, ID)
                );

            try
            {
                ID = System.Convert.ToInt32(Outputs["ID"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WriteSchemeChatContents(string ConnectionString, long SiteID, long SchemeID, long FromUserID, long ToUserID, short Type, string Content, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_WriteSchemeChatContents", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("FromUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, FromUserID),
                new MSSQL.Parameter("ToUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, ToUserID),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WriteSchemeChatContents(string ConnectionString, ref DataSet ds, long SiteID, long SchemeID, long FromUserID, long ToUserID, short Type, string Content, ref int ReturnValue, ref string ReturnDescription)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_WriteSchemeChatContents", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SchemeID", SqlDbType.BigInt, 0, ParameterDirection.Input, SchemeID),
                new MSSQL.Parameter("FromUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, FromUserID),
                new MSSQL.Parameter("ToUserID", SqlDbType.BigInt, 0, ParameterDirection.Input, ToUserID),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("ReturnValue", SqlDbType.Int, 4, ParameterDirection.Output, ReturnValue),
                new MSSQL.Parameter("ReturnDescription", SqlDbType.VarChar, 100, ParameterDirection.Output, ReturnDescription)
                );

            try
            {
                ReturnValue = System.Convert.ToInt32(Outputs["ReturnValue"]);
            }
            catch { }

            try
            {
                ReturnDescription = System.Convert.ToString(Outputs["ReturnDescription"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WriteSMS(string ConnectionString, long SiteID, long SMSID, string From, string To, string Content, ref long NewSMSID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_WriteSMS", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SMSID", SqlDbType.BigInt, 0, ParameterDirection.Input, SMSID),
                new MSSQL.Parameter("From", SqlDbType.VarChar, 0, ParameterDirection.Input, From),
                new MSSQL.Parameter("To", SqlDbType.VarChar, 0, ParameterDirection.Input, To),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("NewSMSID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewSMSID)
                );

            try
            {
                NewSMSID = System.Convert.ToInt64(Outputs["NewSMSID"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WriteSMS(string ConnectionString, ref DataSet ds, long SiteID, long SMSID, string From, string To, string Content, ref long NewSMSID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_WriteSMS", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SMSID", SqlDbType.BigInt, 0, ParameterDirection.Input, SMSID),
                new MSSQL.Parameter("From", SqlDbType.VarChar, 0, ParameterDirection.Input, From),
                new MSSQL.Parameter("To", SqlDbType.VarChar, 0, ParameterDirection.Input, To),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("NewSMSID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewSMSID)
                );

            try
            {
                NewSMSID = System.Convert.ToInt64(Outputs["NewSMSID"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WriteStationSMS(string ConnectionString, long SiteID, long SourceID, long AimID, short Type, string Content, ref long NewSMSID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_WriteStationSMS", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SourceID", SqlDbType.BigInt, 0, ParameterDirection.Input, SourceID),
                new MSSQL.Parameter("AimID", SqlDbType.BigInt, 0, ParameterDirection.Input, AimID),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("NewSMSID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewSMSID)
                );

            try
            {
                NewSMSID = System.Convert.ToInt64(Outputs["NewSMSID"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WriteStationSMS(string ConnectionString, ref DataSet ds, long SiteID, long SourceID, long AimID, short Type, string Content, ref long NewSMSID)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_WriteStationSMS", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("SourceID", SqlDbType.BigInt, 0, ParameterDirection.Input, SourceID),
                new MSSQL.Parameter("AimID", SqlDbType.BigInt, 0, ParameterDirection.Input, AimID),
                new MSSQL.Parameter("Type", SqlDbType.SmallInt, 0, ParameterDirection.Input, Type),
                new MSSQL.Parameter("Content", SqlDbType.VarChar, 0, ParameterDirection.Input, Content),
                new MSSQL.Parameter("NewSMSID", SqlDbType.BigInt, 8, ParameterDirection.Output, NewSMSID)
                );

            try
            {
                NewSMSID = System.Convert.ToInt64(Outputs["NewSMSID"]);
            }
            catch { }

            return CallResult;
        }

        public static int P_WriteSystemLog(string ConnectionString, long SiteID, long UserID, string IPAddress, short Description)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureNonQuery(ConnectionString, "P_WriteSystemLog", ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("IPAddress", SqlDbType.VarChar, 0, ParameterDirection.Input, IPAddress),
                new MSSQL.Parameter("Description", SqlDbType.SmallInt, 0, ParameterDirection.Input, Description)
                );

            return CallResult;
        }

        public static int P_WriteSystemLog(string ConnectionString, ref DataSet ds, long SiteID, long UserID, string IPAddress, short Description)
        {
            MSSQL.OutputParameter Outputs = new MSSQL.OutputParameter();

            int CallResult = MSSQL.ExecuteStoredProcedureWithQuery(ConnectionString, "P_WriteSystemLog", ref ds, ref Outputs,
                new MSSQL.Parameter("SiteID", SqlDbType.BigInt, 0, ParameterDirection.Input, SiteID),
                new MSSQL.Parameter("UserID", SqlDbType.BigInt, 0, ParameterDirection.Input, UserID),
                new MSSQL.Parameter("IPAddress", SqlDbType.VarChar, 0, ParameterDirection.Input, IPAddress),
                new MSSQL.Parameter("Description", SqlDbType.SmallInt, 0, ParameterDirection.Input, Description)
                );

            return CallResult;
        }
    }
}
